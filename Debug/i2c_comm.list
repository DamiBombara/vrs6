
i2c_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08005e90  08005e90  00015e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800629c  0800629c  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800629c  0800629c  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800629c  0800629c  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800629c  0800629c  0001629c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062a0  080062a0  000162a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  080062a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  200001cc  08006470  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  08006470  000205c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006656  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b97  00000000  00000000  00026895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f0  00000000  00000000  00028430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000066e  00000000  00000000  00028d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004403  00000000  00000000  0002938e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007e89  00000000  00000000  0002d791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000756eb  00000000  00000000  0003561a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034a4  00000000  00000000  000aad08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ae1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e78 	.word	0x08005e78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	08005e78 	.word	0x08005e78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa93 f3a3 	rbit	r3, r3
 8000bc2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	fab3 f383 	clz	r3, r3
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	2103      	movs	r1, #3
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	fa93 f3a3 	rbit	r3, r3
 8000be0:	61bb      	str	r3, [r7, #24]
  return(result);
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	fab3 f383 	clz	r3, r3
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	431a      	orrs	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	601a      	str	r2, [r3, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	3724      	adds	r7, #36	; 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b085      	sub	sp, #20
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	43db      	mvns	r3, r3
 8000c16:	401a      	ands	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	fb01 f303 	mul.w	r3, r1, r3
 8000c20:	431a      	orrs	r2, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	605a      	str	r2, [r3, #4]
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b089      	sub	sp, #36	; 0x24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	fa93 f3a3 	rbit	r3, r3
 8000c4c:	613b      	str	r3, [r7, #16]
  return(result);
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	fab3 f383 	clz	r3, r3
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	2103      	movs	r1, #3
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	401a      	ands	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	fa93 f3a3 	rbit	r3, r3
 8000c6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fab3 f383 	clz	r3, r3
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000c80:	bf00      	nop
 8000c82:	3724      	adds	r7, #36	; 0x24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	; 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa93 f3a3 	rbit	r3, r3
 8000ca6:	613b      	str	r3, [r7, #16]
  return(result);
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	fab3 f383 	clz	r3, r3
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	401a      	ands	r2, r3
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa93 f3a3 	rbit	r3, r3
 8000cc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	fab3 f383 	clz	r3, r3
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	60da      	str	r2, [r3, #12]
}
 8000cda:	bf00      	nop
 8000cdc:	3724      	adds	r7, #36	; 0x24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b089      	sub	sp, #36	; 0x24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	6a1a      	ldr	r2, [r3, #32]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	fa93 f3a3 	rbit	r3, r3
 8000d00:	613b      	str	r3, [r7, #16]
  return(result);
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	fab3 f383 	clz	r3, r3
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	401a      	ands	r2, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	fa93 f3a3 	rbit	r3, r3
 8000d1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fab3 f383 	clz	r3, r3
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000d34:	bf00      	nop
 8000d36:	3724      	adds	r7, #36	; 0x24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	0a1b      	lsrs	r3, r3, #8
 8000d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	fa93 f3a3 	rbit	r3, r3
 8000d5c:	613b      	str	r3, [r7, #16]
  return(result);
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	fab3 f383 	clz	r3, r3
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	210f      	movs	r1, #15
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	401a      	ands	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	0a1b      	lsrs	r3, r3, #8
 8000d74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa93 f3a3 	rbit	r3, r3
 8000d7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	fab3 f383 	clz	r3, r3
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000d92:	bf00      	nop
 8000d94:	3724      	adds	r7, #36	; 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b088      	sub	sp, #32
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	fa93 f3a3 	rbit	r3, r3
 8000dbc:	613b      	str	r3, [r7, #16]
  return(result);
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	fab3 f383 	clz	r3, r3
 8000dc4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000dc6:	e048      	b.n	8000e5a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d03a      	beq.n	8000e54 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	461a      	mov	r2, r3
 8000de4:	69b9      	ldr	r1, [r7, #24]
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fede 	bl	8000ba8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d003      	beq.n	8000dfc <LL_GPIO_Init+0x5e>
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d106      	bne.n	8000e0a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	461a      	mov	r2, r3
 8000e02:	69b9      	ldr	r1, [r7, #24]
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff14 	bl	8000c32 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	69b9      	ldr	r1, [r7, #24]
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff3a 	bl	8000c8c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d119      	bne.n	8000e54 <LL_GPIO_Init+0xb6>
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	fa93 f3a3 	rbit	r3, r3
 8000e2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000e2e:	fab3 f383 	clz	r3, r3
 8000e32:	2b07      	cmp	r3, #7
 8000e34:	d807      	bhi.n	8000e46 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	69b9      	ldr	r1, [r7, #24]
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ff51 	bl	8000ce6 <LL_GPIO_SetAFPin_0_7>
 8000e44:	e006      	b.n	8000e54 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	69b9      	ldr	r1, [r7, #24]
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ff76 	bl	8000d40 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	3301      	adds	r3, #1
 8000e58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa22 f303 	lsr.w	r3, r2, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1af      	bne.n	8000dc8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d003      	beq.n	8000e78 <LL_GPIO_Init+0xda>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d107      	bne.n	8000e88 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	6819      	ldr	r1, [r3, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	461a      	mov	r2, r3
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff febd 	bl	8000c02 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3720      	adds	r7, #32
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f043 0201 	orr.w	r2, r3, #1
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	601a      	str	r2, [r3, #0]
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f023 0201 	bic.w	r2, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	601a      	str	r2, [r3, #0]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b085      	sub	sp, #20
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	60f8      	str	r0, [r7, #12]
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	0219      	lsls	r1, r3, #8
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	430b      	orrs	r3, r1
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	601a      	str	r2, [r3, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000f14:	f023 0307 	bic.w	r3, r3, #7
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	609a      	str	r2, [r3, #8]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	609a      	str	r2, [r3, #8]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	609a      	str	r2, [r3, #8]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	611a      	str	r2, [r3, #16]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	601a      	str	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	605a      	str	r2, [r3, #4]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ff65 	bl	8000eb2 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	6899      	ldr	r1, [r3, #8]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ff6d 	bl	8000ed2 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffb6 	bl	8000f70 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff44 	bl	8000e92 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffa0 	bl	8000f50 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	6919      	ldr	r1, [r3, #16]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	461a      	mov	r2, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff70 	bl	8000f00 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff81 	bl	8000f30 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4619      	mov	r1, r3
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ffa9 	bl	8000f8c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	4619      	mov	r1, r3
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ffb6 	bl	8000fb2 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <LL_RCC_HSI_IsReady+0x20>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b02      	cmp	r3, #2
 800105e:	bf0c      	ite	eq
 8001060:	2301      	moveq	r3, #1
 8001062:	2300      	movne	r3, #0
 8001064:	b2db      	uxtb	r3, r3
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40021000 	.word	0x40021000

08001074 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <LL_RCC_LSE_IsReady+0x20>)
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b02      	cmp	r3, #2
 8001082:	bf0c      	ite	eq
 8001084:	2301      	moveq	r3, #1
 8001086:	2300      	movne	r3, #0
 8001088:	b2db      	uxtb	r3, r3
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	40021000 	.word	0x40021000

08001098 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <LL_RCC_GetSysClkSource+0x18>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 030c 	and.w	r3, r3, #12
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000

080010b4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <LL_RCC_GetAHBPrescaler+0x18>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000

080010d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000

080010ec <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <LL_RCC_GetAPB2Prescaler+0x18>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000

08001108 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <LL_RCC_GetUSARTClockSource+0x28>)
 8001112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001114:	2103      	movs	r1, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	401a      	ands	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	061b      	lsls	r3, r3, #24
 8001122:	4313      	orrs	r3, r2
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	40021000 	.word	0x40021000

08001134 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <LL_RCC_PLL_GetMainSource+0x18>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000

08001150 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000

0800116c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <LL_RCC_PLL_GetPrediv+0x18>)
 8001172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001174:	f003 030f 	and.w	r3, r3, #15
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000

08001188 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001190:	f000 f862 	bl	8001258 <RCC_GetSystemClockFreq>
 8001194:	4602      	mov	r2, r0
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f880 	bl	80012a4 <RCC_GetHCLKClockFreq>
 80011a4:	4602      	mov	r2, r0
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 f88e 	bl	80012d0 <RCC_GetPCLK1ClockFreq>
 80011b4:	4602      	mov	r2, r0
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f89a 	bl	80012f8 <RCC_GetPCLK2ClockFreq>
 80011c4:	4602      	mov	r2, r0
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60da      	str	r2, [r3, #12]
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d130      	bne.n	8001248 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ff8e 	bl	8001108 <LL_RCC_GetUSARTClockSource>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d00a      	beq.n	8001208 <LL_RCC_GetUSARTClockFreq+0x34>
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d819      	bhi.n	800122a <LL_RCC_GetUSARTClockFreq+0x56>
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d002      	beq.n	8001200 <LL_RCC_GetUSARTClockFreq+0x2c>
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d00c      	beq.n	8001218 <LL_RCC_GetUSARTClockFreq+0x44>
 80011fe:	e014      	b.n	800122a <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001200:	f000 f82a 	bl	8001258 <RCC_GetSystemClockFreq>
 8001204:	60f8      	str	r0, [r7, #12]
        break;
 8001206:	e01f      	b.n	8001248 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001208:	f7ff ff22 	bl	8001050 <LL_RCC_HSI_IsReady>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d017      	beq.n	8001242 <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <LL_RCC_GetUSARTClockFreq+0x80>)
 8001214:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001216:	e014      	b.n	8001242 <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001218:	f7ff ff2c 	bl	8001074 <LL_RCC_LSE_IsReady>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d011      	beq.n	8001246 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 8001222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001226:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001228:	e00d      	b.n	8001246 <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800122a:	f000 f815 	bl	8001258 <RCC_GetSystemClockFreq>
 800122e:	4603      	mov	r3, r0
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f837 	bl	80012a4 <RCC_GetHCLKClockFreq>
 8001236:	4603      	mov	r3, r0
 8001238:	4618      	mov	r0, r3
 800123a:	f000 f849 	bl	80012d0 <RCC_GetPCLK1ClockFreq>
 800123e:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8001240:	e002      	b.n	8001248 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8001242:	bf00      	nop
 8001244:	e000      	b.n	8001248 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8001246:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001248:	68fb      	ldr	r3, [r7, #12]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	007a1200 	.word	0x007a1200

08001258 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001262:	f7ff ff19 	bl	8001098 <LL_RCC_GetSysClkSource>
 8001266:	4603      	mov	r3, r0
 8001268:	2b08      	cmp	r3, #8
 800126a:	d00c      	beq.n	8001286 <RCC_GetSystemClockFreq+0x2e>
 800126c:	2b08      	cmp	r3, #8
 800126e:	d80e      	bhi.n	800128e <RCC_GetSystemClockFreq+0x36>
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <RCC_GetSystemClockFreq+0x22>
 8001274:	2b04      	cmp	r3, #4
 8001276:	d003      	beq.n	8001280 <RCC_GetSystemClockFreq+0x28>
 8001278:	e009      	b.n	800128e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <RCC_GetSystemClockFreq+0x48>)
 800127c:	607b      	str	r3, [r7, #4]
      break;
 800127e:	e009      	b.n	8001294 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <RCC_GetSystemClockFreq+0x48>)
 8001282:	607b      	str	r3, [r7, #4]
      break;
 8001284:	e006      	b.n	8001294 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001286:	f000 f84b 	bl	8001320 <RCC_PLL_GetFreqDomain_SYS>
 800128a:	6078      	str	r0, [r7, #4]
      break;
 800128c:	e002      	b.n	8001294 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <RCC_GetSystemClockFreq+0x48>)
 8001290:	607b      	str	r3, [r7, #4]
      break;
 8001292:	bf00      	nop
  }

  return frequency;
 8001294:	687b      	ldr	r3, [r7, #4]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	007a1200 	.word	0x007a1200

080012a4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80012ac:	f7ff ff02 	bl	80010b4 <LL_RCC_GetAHBPrescaler>
 80012b0:	4603      	mov	r3, r0
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	f003 030f 	and.w	r3, r3, #15
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <RCC_GetHCLKClockFreq+0x28>)
 80012ba:	5cd3      	ldrb	r3, [r2, r3]
 80012bc:	461a      	mov	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	40d3      	lsrs	r3, r2
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	08005f08 	.word	0x08005f08

080012d0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80012d8:	f7ff fefa 	bl	80010d0 <LL_RCC_GetAPB1Prescaler>
 80012dc:	4603      	mov	r3, r0
 80012de:	0a1b      	lsrs	r3, r3, #8
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <RCC_GetPCLK1ClockFreq+0x24>)
 80012e2:	5cd3      	ldrb	r3, [r2, r3]
 80012e4:	461a      	mov	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	40d3      	lsrs	r3, r2
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	08005f18 	.word	0x08005f18

080012f8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001300:	f7ff fef4 	bl	80010ec <LL_RCC_GetAPB2Prescaler>
 8001304:	4603      	mov	r3, r0
 8001306:	0adb      	lsrs	r3, r3, #11
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <RCC_GetPCLK2ClockFreq+0x24>)
 800130a:	5cd3      	ldrb	r3, [r2, r3]
 800130c:	461a      	mov	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	40d3      	lsrs	r3, r2
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	08005f18 	.word	0x08005f18

08001320 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800132e:	f7ff ff01 	bl	8001134 <LL_RCC_PLL_GetMainSource>
 8001332:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d004      	beq.n	8001344 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001340:	d003      	beq.n	800134a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001342:	e005      	b.n	8001350 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001346:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001348:	e005      	b.n	8001356 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800134c:	60fb      	str	r3, [r7, #12]
      break;
 800134e:	e002      	b.n	8001356 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001352:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001354:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001356:	f7ff ff09 	bl	800116c <LL_RCC_PLL_GetPrediv>
 800135a:	4603      	mov	r3, r0
 800135c:	3301      	adds	r3, #1
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	fbb2 f4f3 	udiv	r4, r2, r3
 8001364:	f7ff fef4 	bl	8001150 <LL_RCC_PLL_GetMultiplicator>
 8001368:	4603      	mov	r3, r0
 800136a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800136e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001372:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	fa92 f2a2 	rbit	r2, r2
 800137a:	603a      	str	r2, [r7, #0]
  return(result);
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	fab2 f282 	clz	r2, r2
 8001382:	40d3      	lsrs	r3, r2
 8001384:	3302      	adds	r3, #2
 8001386:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	bd90      	pop	{r4, r7, pc}
 8001392:	bf00      	nop
 8001394:	003d0900 	.word	0x003d0900
 8001398:	007a1200 	.word	0x007a1200

0800139c <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	bf0c      	ite	eq
 80013b0:	2301      	moveq	r3, #1
 80013b2:	2300      	movne	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	605a      	str	r2, [r3, #4]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	431a      	orrs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	609a      	str	r2, [r3, #8]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 800140e:	b4b0      	push	{r4, r5, r7}
 8001410:	b085      	sub	sp, #20
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
  register uint32_t brrtemp = 0x0U;

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001422:	d114      	bne.n	800144e <LL_USART_SetBaudRate+0x40>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	005a      	lsls	r2, r3, #1
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	085b      	lsrs	r3, r3, #1
 800142c:	441a      	add	r2, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	fbb2 f3f3 	udiv	r3, r2, r3
 8001434:	b29b      	uxth	r3, r3
 8001436:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 8001438:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 800143c:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800143e:	086b      	lsrs	r3, r5, #1
 8001440:	b29b      	uxth	r3, r3
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 800144c:	e00a      	b.n	8001464 <LL_USART_SetBaudRate+0x56>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	085a      	lsrs	r2, r3, #1
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	441a      	add	r2, r3
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	fbb2 f3f3 	udiv	r3, r2, r3
 800145c:	b29b      	uxth	r3, r3
 800145e:	461a      	mov	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	60da      	str	r2, [r3, #12]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	bcb0      	pop	{r4, r5, r7}
 800146c:	4770      	bx	lr
	...

08001470 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ff8a 	bl	800139c <LL_USART_IsEnabled>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d14e      	bne.n	800152c <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4b29      	ldr	r3, [pc, #164]	; (8001538 <LL_USART_Init+0xc8>)
 8001494:	4013      	ands	r3, r2
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	6851      	ldr	r1, [r2, #4]
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	68d2      	ldr	r2, [r2, #12]
 800149e:	4311      	orrs	r1, r2
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	6912      	ldr	r2, [r2, #16]
 80014a4:	4311      	orrs	r1, r2
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	6992      	ldr	r2, [r2, #24]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	4619      	mov	r1, r3
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ff82 	bl	80013c2 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	4619      	mov	r1, r3
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff8f 	bl	80013e8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a1b      	ldr	r2, [pc, #108]	; (800153c <LL_USART_Init+0xcc>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d104      	bne.n	80014dc <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff fe7e 	bl	80011d4 <LL_RCC_GetUSARTClockFreq>
 80014d8:	61b8      	str	r0, [r7, #24]
 80014da:	e016      	b.n	800150a <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a18      	ldr	r2, [pc, #96]	; (8001540 <LL_USART_Init+0xd0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d107      	bne.n	80014f4 <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fe4d 	bl	8001188 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	61bb      	str	r3, [r7, #24]
 80014f2:	e00a      	b.n	800150a <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a13      	ldr	r2, [pc, #76]	; (8001544 <LL_USART_Init+0xd4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d106      	bne.n	800150a <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fe41 	bl	8001188 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00d      	beq.n	800152c <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d009      	beq.n	800152c <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8001518:	2300      	movs	r3, #0
 800151a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	699a      	ldr	r2, [r3, #24]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	69b9      	ldr	r1, [r7, #24]
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ff71 	bl	800140e <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800152c:	7ffb      	ldrb	r3, [r7, #31]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3720      	adds	r7, #32
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	efff69f3 	.word	0xefff69f3
 800153c:	40013800 	.word	0x40013800
 8001540:	40004400 	.word	0x40004400
 8001544:	40004800 	.word	0x40004800

08001548 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	fbb2 f3f3 	udiv	r3, r2, r3
 800155a:	4a07      	ldr	r2, [pc, #28]	; (8001578 <LL_InitTick+0x30>)
 800155c:	3b01      	subs	r3, #1
 800155e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <LL_InitTick+0x30>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <LL_InitTick+0x30>)
 8001568:	2205      	movs	r2, #5
 800156a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000e010 	.word	0xe000e010

0800157c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001584:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ffdd 	bl	8001548 <LL_InitTick>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <LL_mDelay+0x48>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80015a6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ae:	d00c      	beq.n	80015ca <LL_mDelay+0x32>
  {
    Delay++;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3301      	adds	r3, #1
 80015b4:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80015b6:	e008      	b.n	80015ca <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <LL_mDelay+0x48>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <LL_mDelay+0x32>
    {
      Delay--;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	607b      	str	r3, [r7, #4]
  while (Delay)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1f3      	bne.n	80015b8 <LL_mDelay+0x20>
    }
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e010 	.word	0xe000e010

080015e4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <LL_SetSystemCoreClock+0x1c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000000 	.word	0x20000000

08001604 <htsInit>:
 */

#include "hts221.h"

void htsInit()
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	if (whoAmI())
 8001608:	f000 f80a 	bl	8001620 <whoAmI>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d004      	beq.n	800161c <htsInit+0x18>
	{
		i2c_send_byte(HTS221_WRITE_ADDRESS,CTRL_REG1_ADDRES, INIT_REG1);
 8001612:	2280      	movs	r2, #128	; 0x80
 8001614:	2120      	movs	r1, #32
 8001616:	20be      	movs	r0, #190	; 0xbe
 8001618:	f000 fc06 	bl	8001e28 <i2c_send_byte>
	}
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <whoAmI>:

uint8_t whoAmI()
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	if (i2c_master_read_byte(HTS221_READ_ADDRESS, HTS221_WHO_AM_I_ADDRES) == HTS221_WHO_AM_I_VALUE)
 8001624:	210f      	movs	r1, #15
 8001626:	20bf      	movs	r0, #191	; 0xbf
 8001628:	f000 fc34 	bl	8001e94 <i2c_master_read_byte>
 800162c:	4603      	mov	r3, r0
 800162e:	2bbc      	cmp	r3, #188	; 0xbc
 8001630:	d101      	bne.n	8001636 <whoAmI+0x16>
	{
		return 1;
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <whoAmI+0x18>
	}else return 0;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	bd80      	pop	{r7, pc}

0800163c <rawTemp>:

float rawTemp()
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
	uint8_t buffer[2];

	buffer[0] = i2c_master_read_byte(HTS221_READ_ADDRESS,TEMP_OUT_L_ADDRES);
 8001642:	212a      	movs	r1, #42	; 0x2a
 8001644:	20bf      	movs	r0, #191	; 0xbf
 8001646:	f000 fc25 	bl	8001e94 <i2c_master_read_byte>
 800164a:	4603      	mov	r3, r0
 800164c:	713b      	strb	r3, [r7, #4]
	buffer[1] = i2c_master_read_byte(HTS221_READ_ADDRESS,TEMP_OUT_H_ADDRES);
 800164e:	212b      	movs	r1, #43	; 0x2b
 8001650:	20bf      	movs	r0, #191	; 0xbf
 8001652:	f000 fc1f 	bl	8001e94 <i2c_master_read_byte>
 8001656:	4603      	mov	r3, r0
 8001658:	717b      	strb	r3, [r7, #5]

	return ((buffer[1] << 8) | buffer[0]) / 10;
 800165a:	797b      	ldrb	r3, [r7, #5]
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	793a      	ldrb	r2, [r7, #4]
 8001660:	4313      	orrs	r3, r2
 8001662:	4a07      	ldr	r2, [pc, #28]	; (8001680 <rawTemp+0x44>)
 8001664:	fb82 1203 	smull	r1, r2, r2, r3
 8001668:	1092      	asrs	r2, r2, #2
 800166a:	17db      	asrs	r3, r3, #31
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	ee07 3a90 	vmov	s15, r3
 8001672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	66666667 	.word	0x66666667

08001684 <rawHum>:

float rawHum()
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
	uint8_t humBuff[2];

	humBuff[0] = i2c_master_read_byte(HTS221_READ_ADDRESS,HUMIDITY_OUT_L_ADDRESS);
 800168a:	2128      	movs	r1, #40	; 0x28
 800168c:	20bf      	movs	r0, #191	; 0xbf
 800168e:	f000 fc01 	bl	8001e94 <i2c_master_read_byte>
 8001692:	4603      	mov	r3, r0
 8001694:	713b      	strb	r3, [r7, #4]
	humBuff[1] = i2c_master_read_byte(HTS221_READ_ADDRESS,HUMIDITY_OUT_H_ADDRESS);
 8001696:	2129      	movs	r1, #41	; 0x29
 8001698:	20bf      	movs	r0, #191	; 0xbf
 800169a:	f000 fbfb 	bl	8001e94 <i2c_master_read_byte>
 800169e:	4603      	mov	r3, r0
 80016a0:	717b      	strb	r3, [r7, #5]

	return ((humBuff[1] << 8) | humBuff[0]) / 1000;
 80016a2:	797b      	ldrb	r3, [r7, #5]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	793a      	ldrb	r2, [r7, #4]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <rawHum+0x44>)
 80016ac:	fb82 1203 	smull	r1, r2, r2, r3
 80016b0:	1192      	asrs	r2, r2, #6
 80016b2:	17db      	asrs	r3, r3, #31
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	ee07 3a90 	vmov	s15, r3
 80016ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80016be:	eeb0 0a67 	vmov.f32	s0, s15
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	10624dd3 	.word	0x10624dd3

080016cc <returnHeight>:

float firstHeight = 0;
float lastHeight = 0;

float returnHeight()
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	if (whoAmILPS())
 80016d0:	f000 f82e 	bl	8001730 <whoAmILPS>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d004      	beq.n	80016e4 <returnHeight+0x18>
	{
		return calculateHeight();
 80016da:	f000 f80b 	bl	80016f4 <calculateHeight>
 80016de:	eef0 7a40 	vmov.f32	s15, s0
 80016e2:	e001      	b.n	80016e8 <returnHeight+0x1c>
	} else return 0.0;
 80016e4:	eddf 7a02 	vldr	s15, [pc, #8]	; 80016f0 <returnHeight+0x24>
}
 80016e8:	eeb0 0a67 	vmov.f32	s0, s15
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	00000000 	.word	0x00000000

080016f4 <calculateHeight>:


float calculateHeight()
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	returnPressure();
 80016f8:	f000 f84a 	bl	8001790 <returnPressure>
    //return (T / L) * (1 - pow(lastHeight  / firstHeight , (R * L) / (g * M)));
	return 0;
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	ee07 3a90 	vmov	s15, r3
}
 8001704:	eeb0 0a67 	vmov.f32	s0, s15
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <lpsInit>:

void lpsInit()
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	i2c_send_byte(LPS25HB_WRITE_ADDRESS, LPS25HB_CTRL_REG1 , LPS25HB_INIT_REG1);
 8001710:	2290      	movs	r2, #144	; 0x90
 8001712:	2120      	movs	r1, #32
 8001714:	20ba      	movs	r0, #186	; 0xba
 8001716:	f000 fb87 	bl	8001e28 <i2c_send_byte>
	firstHeight = returnPressure();
 800171a:	f000 f839 	bl	8001790 <returnPressure>
 800171e:	eef0 7a40 	vmov.f32	s15, s0
 8001722:	4b02      	ldr	r3, [pc, #8]	; (800172c <lpsInit+0x20>)
 8001724:	edc3 7a00 	vstr	s15, [r3]
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200001e8 	.word	0x200001e8

08001730 <whoAmILPS>:

uint8_t whoAmILPS()
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	if (i2c_master_read_byte(LPS25HB_READ_ADDRESS, LPS25HB_WHO_AM_I_ADDRES) == LPS25HB_WHO_AM_I_VALUE){
 8001734:	210f      	movs	r1, #15
 8001736:	20bb      	movs	r0, #187	; 0xbb
 8001738:	f000 fbac 	bl	8001e94 <i2c_master_read_byte>
 800173c:	4603      	mov	r3, r0
 800173e:	2bbd      	cmp	r3, #189	; 0xbd
 8001740:	d101      	bne.n	8001746 <whoAmILPS+0x16>
		return 1;
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <whoAmILPS+0x18>
	}else return 0;
 8001746:	2300      	movs	r3, #0

}
 8001748:	4618      	mov	r0, r3
 800174a:	bd80      	pop	{r7, pc}

0800174c <rawPressure>:

int32_t rawPressure()
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
    uint8_t pressureXL = i2c_master_read_byte(LPS25HB_READ_ADDRESS, PRESS_OUT_XL_ADDRES);
 8001752:	2128      	movs	r1, #40	; 0x28
 8001754:	20bb      	movs	r0, #187	; 0xbb
 8001756:	f000 fb9d 	bl	8001e94 <i2c_master_read_byte>
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
    uint8_t pressureL = i2c_master_read_byte(LPS25HB_READ_ADDRESS, PRESS_OUT_L_ADDRES);
 800175e:	2129      	movs	r1, #41	; 0x29
 8001760:	20bb      	movs	r0, #187	; 0xbb
 8001762:	f000 fb97 	bl	8001e94 <i2c_master_read_byte>
 8001766:	4603      	mov	r3, r0
 8001768:	71bb      	strb	r3, [r7, #6]
    uint8_t pressureH = i2c_master_read_byte(LPS25HB_READ_ADDRESS, PRESS_OUT_H_ADDRES);
 800176a:	212a      	movs	r1, #42	; 0x2a
 800176c:	20bb      	movs	r0, #187	; 0xbb
 800176e:	f000 fb91 	bl	8001e94 <i2c_master_read_byte>
 8001772:	4603      	mov	r3, r0
 8001774:	717b      	strb	r3, [r7, #5]

    int32_t raw_pressure = (int32_t) pressureH << 16 | (int32_t) pressureL << 8 | pressureXL;
 8001776:	797b      	ldrb	r3, [r7, #5]
 8001778:	041a      	lsls	r2, r3, #16
 800177a:	79bb      	ldrb	r3, [r7, #6]
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	431a      	orrs	r2, r3
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	4313      	orrs	r3, r2
 8001784:	603b      	str	r3, [r7, #0]

    return raw_pressure;
 8001786:	683b      	ldr	r3, [r7, #0]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <returnPressure>:

float returnPressure(){
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
	float pressure_hPa = 0;
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	607b      	str	r3, [r7, #4]

	if (whoAmILPS())
 800179c:	f7ff ffc8 	bl	8001730 <whoAmILPS>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d012      	beq.n	80017cc <returnPressure+0x3c>
	{
		float raw_pressure = rawPressure();
 80017a6:	f7ff ffd1 	bl	800174c <rawPressure>
 80017aa:	ee07 0a90 	vmov	s15, r0
 80017ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b2:	edc7 7a00 	vstr	s15, [r7]

		pressure_hPa = raw_pressure / 4096.0f;
 80017b6:	ed97 7a00 	vldr	s14, [r7]
 80017ba:	eddf 6a08 	vldr	s13, [pc, #32]	; 80017dc <returnPressure+0x4c>
 80017be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017c2:	edc7 7a01 	vstr	s15, [r7, #4]

		lastHeight = pressure_hPa;
 80017c6:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <returnPressure+0x50>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6013      	str	r3, [r2, #0]
	}
	return pressure_hPa;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	ee07 3a90 	vmov	s15, r3
}
 80017d2:	eeb0 0a67 	vmov.f32	s0, s15
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	45800000 	.word	0x45800000
 80017e0:	200001ec 	.word	0x200001ec

080017e4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <NVIC_EnableIRQ+0x30>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000e100 	.word	0xe000e100

08001818 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	da0b      	bge.n	8001844 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <NVIC_SetPriority+0x4c>)
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	f003 030f 	and.w	r3, r3, #15
 8001838:	3b04      	subs	r3, #4
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	440b      	add	r3, r1
 8001840:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001842:	e009      	b.n	8001858 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	4907      	ldr	r1, [pc, #28]	; (8001868 <NVIC_SetPriority+0x50>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00
 8001868:	e000e100 	.word	0xe000e100

0800186c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001876:	695a      	ldr	r2, [r3, #20]
 8001878:	4907      	ldr	r1, [pc, #28]	; (8001898 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4313      	orrs	r3, r2
 800187e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4013      	ands	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40021000 	.word	0x40021000

0800189c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80018a0:	2001      	movs	r0, #1
 80018a2:	f7ff ffe3 	bl	800186c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 80018a6:	2100      	movs	r1, #0
 80018a8:	2010      	movs	r0, #16
 80018aa:	f7ff ffb5 	bl	8001818 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80018ae:	2010      	movs	r0, #16
 80018b0:	f7ff ff98 	bl	80017e4 <NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 80018b4:	2100      	movs	r1, #0
 80018b6:	2011      	movs	r0, #17
 80018b8:	f7ff ffae 	bl	8001818 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80018bc:	2011      	movs	r0, #17
 80018be:	f7ff ff91 	bl	80017e4 <NVIC_EnableIRQ>

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <LL_AHB1_GRP1_EnableClock>:
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018d2:	695a      	ldr	r2, [r3, #20]
 80018d4:	4907      	ldr	r1, [pc, #28]	; (80018f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4313      	orrs	r3, r2
 80018da:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4013      	ands	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40021000 	.word	0x40021000

080018f8 <LL_GPIO_SetPinMode>:
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa93 f3a3 	rbit	r3, r3
 8001912:	613b      	str	r3, [r7, #16]
  return(result);
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	2103      	movs	r1, #3
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	401a      	ands	r2, r3
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa93 f3a3 	rbit	r3, r3
 8001930:	61bb      	str	r3, [r7, #24]
  return(result);
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	fab3 f383 	clz	r3, r3
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	431a      	orrs	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	601a      	str	r2, [r3, #0]
}
 8001946:	bf00      	nop
 8001948:	3724      	adds	r7, #36	; 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	619a      	str	r2, [r3, #24]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001974:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001978:	f7ff ffa6 	bl	80018c8 <LL_AHB1_GRP1_EnableClock>

  /* LED pin configuration */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_OUTPUT);
 800197c:	2201      	movs	r2, #1
 800197e:	2108      	movs	r1, #8
 8001980:	4804      	ldr	r0, [pc, #16]	; (8001994 <MX_GPIO_Init+0x24>)
 8001982:	f7ff ffb9 	bl	80018f8 <LL_GPIO_SetPinMode>
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8001986:	2108      	movs	r1, #8
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <MX_GPIO_Init+0x24>)
 800198a:	f7ff ffe2 	bl	8001952 <LL_GPIO_SetOutputPin>

}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	48000400 	.word	0x48000400

08001998 <NVIC_GetPriorityGrouping>:
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <NVIC_GetPriorityGrouping+0x18>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	f003 0307 	and.w	r3, r3, #7
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <NVIC_EnableIRQ>:
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4907      	ldr	r1, [pc, #28]	; (80019e4 <NVIC_EnableIRQ+0x30>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2001      	movs	r0, #1
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000e100 	.word	0xe000e100

080019e8 <NVIC_SetPriority>:
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	da0b      	bge.n	8001a14 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	490c      	ldr	r1, [pc, #48]	; (8001a34 <NVIC_SetPriority+0x4c>)
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	f003 030f 	and.w	r3, r3, #15
 8001a08:	3b04      	subs	r3, #4
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	440b      	add	r3, r1
 8001a10:	761a      	strb	r2, [r3, #24]
}
 8001a12:	e009      	b.n	8001a28 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4907      	ldr	r1, [pc, #28]	; (8001a38 <NVIC_SetPriority+0x50>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	0112      	lsls	r2, r2, #4
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	440b      	add	r3, r1
 8001a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00
 8001a38:	e000e100 	.word	0xe000e100

08001a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f1c3 0307 	rsb	r3, r3, #7
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	bf28      	it	cs
 8001a5a:	2304      	movcs	r3, #4
 8001a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3304      	adds	r3, #4
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d902      	bls.n	8001a6c <NVIC_EncodePriority+0x30>
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3b03      	subs	r3, #3
 8001a6a:	e000      	b.n	8001a6e <NVIC_EncodePriority+0x32>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	f04f 32ff 	mov.w	r2, #4294967295
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	401a      	ands	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	43d9      	mvns	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	4313      	orrs	r3, r2
         );
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3724      	adds	r7, #36	; 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <LL_I2C_Enable>:
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f043 0201 	orr.w	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	601a      	str	r2, [r3, #0]
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_I2C_EnableClockStretching>:
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	601a      	str	r2, [r3, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <LL_I2C_DisableGeneralCall>:
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	601a      	str	r2, [r3, #0]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_I2C_SetOwnAddress2>:
{
 8001b02:	b480      	push	{r7}
 8001b04:	b085      	sub	sp, #20
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b16:	f023 0306 	bic.w	r3, r3, #6
 8001b1a:	68b9      	ldr	r1, [r7, #8]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	431a      	orrs	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	60da      	str	r2, [r3, #12]
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_I2C_DisableOwnAddress2>:
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	60da      	str	r2, [r3, #12]
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_I2C_EnableIT_RX>:
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f043 0204 	orr.w	r2, r3, #4
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	601a      	str	r2, [r3, #0]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <LL_I2C_DisableIT_RX>:
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 0204 	bic.w	r2, r3, #4
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	601a      	str	r2, [r3, #0]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <LL_I2C_IsActiveFlag_TXIS>:
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	bf0c      	ite	eq
 8001ba6:	2301      	moveq	r3, #1
 8001ba8:	2300      	movne	r3, #0
 8001baa:	b2db      	uxtb	r3, r3
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_I2C_IsActiveFlag_RXNE>:
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	bf0c      	ite	eq
 8001bcc:	2301      	moveq	r3, #1
 8001bce:	2300      	movne	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <LL_I2C_IsActiveFlag_STOP>:
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f003 0320 	and.w	r3, r3, #32
 8001bee:	2b20      	cmp	r3, #32
 8001bf0:	bf0c      	ite	eq
 8001bf2:	2301      	moveq	r3, #1
 8001bf4:	2300      	movne	r3, #0
 8001bf6:	b2db      	uxtb	r3, r3
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_I2C_ClearFlag_NACK>:
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	f043 0210 	orr.w	r2, r3, #16
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	61da      	str	r2, [r3, #28]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_I2C_ClearFlag_STOP>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	f043 0220 	orr.w	r2, r3, #32
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	61da      	str	r2, [r3, #28]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_I2C_EnableAutoEndMode>:
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	605a      	str	r2, [r3, #4]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	0d5b      	lsrs	r3, r3, #21
 8001c7a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <LL_I2C_HandleTransfer+0x48>)
 8001c80:	430b      	orrs	r3, r1
 8001c82:	43db      	mvns	r3, r3
 8001c84:	401a      	ands	r2, r3
 8001c86:	68b9      	ldr	r1, [r7, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4319      	orrs	r1, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	041b      	lsls	r3, r3, #16
 8001c90:	4319      	orrs	r1, r3
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	4319      	orrs	r1, r3
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	430b      	orrs	r3, r1
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	03ff7bff 	.word	0x03ff7bff

08001cb0 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	b2db      	uxtb	r3, r3
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001cd6:	78fa      	ldrb	r2, [r7, #3]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_AHB1_GRP1_EnableClock>:
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001cf2:	695a      	ldr	r2, [r3, #20]
 8001cf4:	4907      	ldr	r1, [pc, #28]	; (8001d14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001cfe:	695a      	ldr	r2, [r3, #20]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4013      	ands	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d06:	68fb      	ldr	r3, [r7, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	40021000 	.word	0x40021000

08001d18 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d22:	69da      	ldr	r2, [r3, #28]
 8001d24:	4907      	ldr	r1, [pc, #28]	; (8001d44 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d2e:	69da      	ldr	r2, [r3, #28]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4013      	ands	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d36:	68fb      	ldr	r3, [r7, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	40021000 	.word	0x40021000

08001d48 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08e      	sub	sp, #56	; 0x38
 8001d4c:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001d4e:	f107 031c 	add.w	r3, r7, #28
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
 8001d5c:	611a      	str	r2, [r3, #16]
 8001d5e:	615a      	str	r2, [r3, #20]
 8001d60:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
 8001d70:	615a      	str	r2, [r3, #20]
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001d72:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001d76:	f7ff ffb7 	bl	8001ce8 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001d7a:	23c0      	movs	r3, #192	; 0xc0
 8001d7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001d86:	2301      	movs	r3, #1
 8001d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001d8e:	2304      	movs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	4619      	mov	r1, r3
 8001d96:	4821      	ldr	r0, [pc, #132]	; (8001e1c <MX_I2C1_Init+0xd4>)
 8001d98:	f7ff f801 	bl	8000d9e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001d9c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001da0:	f7ff ffba 	bl	8001d18 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001da4:	f7ff fdf8 	bl	8001998 <NVIC_GetPriorityGrouping>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fe44 	bl	8001a3c <NVIC_EncodePriority>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4619      	mov	r1, r3
 8001db8:	201f      	movs	r0, #31
 8001dba:	f7ff fe15 	bl	80019e8 <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001dbe:	201f      	movs	r0, #31
 8001dc0:	f7ff fdf8 	bl	80019b4 <NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001dc4:	4816      	ldr	r0, [pc, #88]	; (8001e20 <MX_I2C1_Init+0xd8>)
 8001dc6:	f7ff ff3d 	bl	8001c44 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001dca:	4815      	ldr	r0, [pc, #84]	; (8001e20 <MX_I2C1_Init+0xd8>)
 8001dcc:	f7ff feb1 	bl	8001b32 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001dd0:	4813      	ldr	r0, [pc, #76]	; (8001e20 <MX_I2C1_Init+0xd8>)
 8001dd2:	f7ff fe86 	bl	8001ae2 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001dd6:	4812      	ldr	r0, [pc, #72]	; (8001e20 <MX_I2C1_Init+0xd8>)
 8001dd8:	f7ff fe73 	bl	8001ac2 <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <MX_I2C1_Init+0xdc>)
 8001de2:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8001dec:	2302      	movs	r3, #2
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001df4:	2300      	movs	r3, #0
 8001df6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4808      	ldr	r0, [pc, #32]	; (8001e20 <MX_I2C1_Init+0xd8>)
 8001e00:	f7ff f8ea 	bl	8000fd8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2100      	movs	r1, #0
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <MX_I2C1_Init+0xd8>)
 8001e0a:	f7ff fe7a 	bl	8001b02 <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 8001e0e:	4804      	ldr	r0, [pc, #16]	; (8001e20 <MX_I2C1_Init+0xd8>)
 8001e10:	f7ff fe47 	bl	8001aa2 <LL_I2C_Enable>
}
 8001e14:	bf00      	nop
 8001e16:	3738      	adds	r7, #56	; 0x38
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	48000400 	.word	0x48000400
 8001e20:	40005400 	.word	0x40005400
 8001e24:	2000090e 	.word	0x2000090e

08001e28 <i2c_send_byte>:

void i2c_send_byte(uint8_t slave_address, uint8_t register_address, uint8_t data)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
 8001e32:	460b      	mov	r3, r1
 8001e34:	71bb      	strb	r3, [r7, #6]
 8001e36:	4613      	mov	r3, r2
 8001e38:	717b      	strb	r3, [r7, #5]
	// Initialize communication
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001e3a:	79f9      	ldrb	r1, [r7, #7]
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <i2c_send_byte+0x64>)
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	2301      	movs	r3, #1
 8001e48:	2200      	movs	r2, #0
 8001e4a:	4811      	ldr	r0, [pc, #68]	; (8001e90 <i2c_send_byte+0x68>)
 8001e4c:	f7ff ff0a 	bl	8001c64 <LL_I2C_HandleTransfer>
	LL_I2C_TransmitData8(I2C1, register_address);
 8001e50:	79bb      	ldrb	r3, [r7, #6]
 8001e52:	4619      	mov	r1, r3
 8001e54:	480e      	ldr	r0, [pc, #56]	; (8001e90 <i2c_send_byte+0x68>)
 8001e56:	f7ff ff38 	bl	8001cca <LL_I2C_TransmitData8>

	while (!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001e5a:	e00a      	b.n	8001e72 <i2c_send_byte+0x4a>
	{
		if (LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001e5c:	480c      	ldr	r0, [pc, #48]	; (8001e90 <i2c_send_byte+0x68>)
 8001e5e:	f7ff fe98 	bl	8001b92 <LL_I2C_IsActiveFlag_TXIS>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d004      	beq.n	8001e72 <i2c_send_byte+0x4a>
	    {
			LL_I2C_TransmitData8(I2C1, data);
 8001e68:	797b      	ldrb	r3, [r7, #5]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4808      	ldr	r0, [pc, #32]	; (8001e90 <i2c_send_byte+0x68>)
 8001e6e:	f7ff ff2c 	bl	8001cca <LL_I2C_TransmitData8>
	while (!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001e72:	4807      	ldr	r0, [pc, #28]	; (8001e90 <i2c_send_byte+0x68>)
 8001e74:	f7ff feb3 	bl	8001bde <LL_I2C_IsActiveFlag_STOP>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0ee      	beq.n	8001e5c <i2c_send_byte+0x34>
	    }
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001e7e:	4804      	ldr	r0, [pc, #16]	; (8001e90 <i2c_send_byte+0x68>)
 8001e80:	f7ff fed0 	bl	8001c24 <LL_I2C_ClearFlag_STOP>
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	80002000 	.word	0x80002000
 8001e90:	40005400 	.word	0x40005400

08001e94 <i2c_master_read_byte>:

uint8_t i2c_master_read_byte(uint8_t slave_address, uint8_t register_address)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af02      	add	r7, sp, #8
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	460a      	mov	r2, r1
 8001e9e:	71fb      	strb	r3, [r7, #7]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	71bb      	strb	r3, [r7, #6]
	LL_I2C_EnableIT_RX(I2C1);
 8001ea4:	4825      	ldr	r0, [pc, #148]	; (8001f3c <i2c_master_read_byte+0xa8>)
 8001ea6:	f7ff fe54 	bl	8001b52 <LL_I2C_EnableIT_RX>
	// Initialize communication
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001eaa:	79f9      	ldrb	r1, [r7, #7]
 8001eac:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <i2c_master_read_byte+0xac>)
 8001eae:	9301      	str	r3, [sp, #4]
 8001eb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	2200      	movs	r2, #0
 8001eba:	4820      	ldr	r0, [pc, #128]	; (8001f3c <i2c_master_read_byte+0xa8>)
 8001ebc:	f7ff fed2 	bl	8001c64 <LL_I2C_HandleTransfer>
	// Send register address
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001ec0:	e00a      	b.n	8001ed8 <i2c_master_read_byte+0x44>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001ec2:	481e      	ldr	r0, [pc, #120]	; (8001f3c <i2c_master_read_byte+0xa8>)
 8001ec4:	f7ff fe65 	bl	8001b92 <LL_I2C_IsActiveFlag_TXIS>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d004      	beq.n	8001ed8 <i2c_master_read_byte+0x44>
		{
			LL_I2C_TransmitData8(I2C1, register_address);
 8001ece:	79bb      	ldrb	r3, [r7, #6]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	481a      	ldr	r0, [pc, #104]	; (8001f3c <i2c_master_read_byte+0xa8>)
 8001ed4:	f7ff fef9 	bl	8001cca <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001ed8:	4818      	ldr	r0, [pc, #96]	; (8001f3c <i2c_master_read_byte+0xa8>)
 8001eda:	f7ff fe80 	bl	8001bde <LL_I2C_IsActiveFlag_STOP>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0ee      	beq.n	8001ec2 <i2c_master_read_byte+0x2e>
		}
	}

	LL_I2C_ClearFlag_STOP(I2C1);
 8001ee4:	4815      	ldr	r0, [pc, #84]	; (8001f3c <i2c_master_read_byte+0xa8>)
 8001ee6:	f7ff fe9d 	bl	8001c24 <LL_I2C_ClearFlag_STOP>

	while(LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001eea:	bf00      	nop
 8001eec:	4813      	ldr	r0, [pc, #76]	; (8001f3c <i2c_master_read_byte+0xa8>)
 8001eee:	f7ff fe76 	bl	8001bde <LL_I2C_IsActiveFlag_STOP>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1f9      	bne.n	8001eec <i2c_master_read_byte+0x58>

	// Receive data from slave device
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001ef8:	79f9      	ldrb	r1, [r7, #7]
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <i2c_master_read_byte+0xb0>)
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2301      	movs	r3, #1
 8001f06:	2200      	movs	r2, #0
 8001f08:	480c      	ldr	r0, [pc, #48]	; (8001f3c <i2c_master_read_byte+0xa8>)
 8001f0a:	f7ff feab 	bl	8001c64 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001f0e:	bf00      	nop
 8001f10:	480a      	ldr	r0, [pc, #40]	; (8001f3c <i2c_master_read_byte+0xa8>)
 8001f12:	f7ff fe64 	bl	8001bde <LL_I2C_IsActiveFlag_STOP>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f9      	beq.n	8001f10 <i2c_master_read_byte+0x7c>

	//End of transfer
	LL_I2C_DisableIT_RX(I2C1);
 8001f1c:	4807      	ldr	r0, [pc, #28]	; (8001f3c <i2c_master_read_byte+0xa8>)
 8001f1e:	f7ff fe28 	bl	8001b72 <LL_I2C_DisableIT_RX>
	LL_I2C_ClearFlag_STOP(I2C1);
 8001f22:	4806      	ldr	r0, [pc, #24]	; (8001f3c <i2c_master_read_byte+0xa8>)
 8001f24:	f7ff fe7e 	bl	8001c24 <LL_I2C_ClearFlag_STOP>
	LL_I2C_ClearFlag_NACK(I2C1);
 8001f28:	4804      	ldr	r0, [pc, #16]	; (8001f3c <i2c_master_read_byte+0xa8>)
 8001f2a:	f7ff fe6b 	bl	8001c04 <LL_I2C_ClearFlag_NACK>

	return i2c_rx_data;
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <i2c_master_read_byte+0xb4>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40005400 	.word	0x40005400
 8001f40:	80002000 	.word	0x80002000
 8001f44:	80002400 	.word	0x80002400
 8001f48:	200001f0 	.word	0x200001f0

08001f4c <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
	// Check RXNE flag value in ISR register
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001f50:	4807      	ldr	r0, [pc, #28]	; (8001f70 <I2C1_EV_IRQHandler+0x24>)
 8001f52:	f7ff fe31 	bl	8001bb8 <LL_I2C_IsActiveFlag_RXNE>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <I2C1_EV_IRQHandler+0x1e>
	{
		// Call function Master Reception Callback
		i2c_rx_data = LL_I2C_ReceiveData8(I2C1);
 8001f5c:	4804      	ldr	r0, [pc, #16]	; (8001f70 <I2C1_EV_IRQHandler+0x24>)
 8001f5e:	f7ff fea7 	bl	8001cb0 <LL_I2C_ReceiveData8>
 8001f62:	4603      	mov	r3, r0
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <I2C1_EV_IRQHandler+0x28>)
 8001f68:	701a      	strb	r2, [r3, #0]
	}
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40005400 	.word	0x40005400
 8001f74:	200001f0 	.word	0x200001f0

08001f78 <NVIC_SetPriorityGrouping>:
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <NVIC_SetPriorityGrouping+0x44>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f94:	4013      	ands	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001faa:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <NVIC_SetPriorityGrouping+0x44>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	60d3      	str	r3, [r2, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <LL_RCC_HSI_Enable>:
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <LL_RCC_HSI_Enable+0x1c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <LL_RCC_HSI_Enable+0x1c>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6013      	str	r3, [r2, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000

08001fe0 <LL_RCC_HSI_IsReady>:
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <LL_RCC_HSI_IsReady+0x20>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	40021000 	.word	0x40021000

08002004 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800200c:	4b07      	ldr	r3, [pc, #28]	; (800202c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4904      	ldr	r1, [pc, #16]	; (800202c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000

08002030 <LL_RCC_SetSysClkSource>:
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <LL_RCC_SetSysClkSource+0x24>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f023 0203 	bic.w	r2, r3, #3
 8002040:	4904      	ldr	r1, [pc, #16]	; (8002054 <LL_RCC_SetSysClkSource+0x24>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	40021000 	.word	0x40021000

08002058 <LL_RCC_GetSysClkSource>:
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <LL_RCC_GetSysClkSource+0x18>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000

08002074 <LL_RCC_SetAHBPrescaler>:
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <LL_RCC_SetAHBPrescaler+0x24>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002084:	4904      	ldr	r1, [pc, #16]	; (8002098 <LL_RCC_SetAHBPrescaler+0x24>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	40021000 	.word	0x40021000

0800209c <LL_RCC_SetAPB1Prescaler>:
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ac:	4904      	ldr	r1, [pc, #16]	; (80020c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40021000 	.word	0x40021000

080020c4 <LL_RCC_SetAPB2Prescaler>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020d4:	4904      	ldr	r1, [pc, #16]	; (80020e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	40021000 	.word	0x40021000

080020ec <LL_RCC_SetI2CClockSource>:
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <LL_RCC_SetI2CClockSource+0x2c>)
 80020f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	0e1b      	lsrs	r3, r3, #24
 80020fc:	43db      	mvns	r3, r3
 80020fe:	401a      	ands	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002106:	4904      	ldr	r1, [pc, #16]	; (8002118 <LL_RCC_SetI2CClockSource+0x2c>)
 8002108:	4313      	orrs	r3, r2
 800210a:	630b      	str	r3, [r1, #48]	; 0x30
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40021000 	.word	0x40021000

0800211c <LL_APB1_GRP1_EnableClock>:
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002126:	69da      	ldr	r2, [r3, #28]
 8002128:	4907      	ldr	r1, [pc, #28]	; (8002148 <LL_APB1_GRP1_EnableClock+0x2c>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4313      	orrs	r3, r2
 800212e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002132:	69da      	ldr	r2, [r3, #28]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4013      	ands	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800213a:	68fb      	ldr	r3, [r7, #12]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40021000 	.word	0x40021000

0800214c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002156:	699a      	ldr	r2, [r3, #24]
 8002158:	4907      	ldr	r1, [pc, #28]	; (8002178 <LL_APB2_GRP1_EnableClock+0x2c>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4313      	orrs	r3, r2
 800215e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002162:	699a      	ldr	r2, [r3, #24]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4013      	ands	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800216a:	68fb      	ldr	r3, [r7, #12]
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40021000 	.word	0x40021000

0800217c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <LL_FLASH_SetLatency+0x24>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 0207 	bic.w	r2, r3, #7
 800218c:	4904      	ldr	r1, [pc, #16]	; (80021a0 <LL_FLASH_SetLatency+0x24>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	40022000 	.word	0x40022000

080021a4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <LL_FLASH_GetLatency+0x18>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0307 	and.w	r3, r3, #7
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40022000 	.word	0x40022000

080021c0 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d106      	bne.n	80021dc <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <LL_SYSTICK_SetClkSource+0x34>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a08      	ldr	r2, [pc, #32]	; (80021f4 <LL_SYSTICK_SetClkSource+0x34>)
 80021d4:	f043 0304 	orr.w	r3, r3, #4
 80021d8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80021da:	e005      	b.n	80021e8 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <LL_SYSTICK_SetClkSource+0x34>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <LL_SYSTICK_SetClkSource+0x34>)
 80021e2:	f023 0304 	bic.w	r3, r3, #4
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000e010 	.word	0xe000e010

080021f8 <main>:

void SystemClock_Config(void);


int main(void)
{
 80021f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021fc:	b08a      	sub	sp, #40	; 0x28
 80021fe:	af06      	add	r7, sp, #24
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002200:	2001      	movs	r0, #1
 8002202:	f7ff ffa3 	bl	800214c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002206:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800220a:	f7ff ff87 	bl	800211c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800220e:	2003      	movs	r0, #3
 8002210:	f7ff feb2 	bl	8001f78 <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8002214:	f000 f856 	bl	80022c4 <SystemClock_Config>

  MX_GPIO_Init();
 8002218:	f7ff fbaa 	bl	8001970 <MX_GPIO_Init>
  MX_I2C1_Init();
 800221c:	f7ff fd94 	bl	8001d48 <MX_I2C1_Init>

  MX_DMA_Init();
 8002220:	f7ff fb3c 	bl	800189c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002224:	f000 fe16 	bl	8002e54 <MX_USART2_UART_Init>

  lpsInit();
 8002228:	f7ff fa70 	bl	800170c <lpsInit>
  htsInit();
 800222c:	f7ff f9ea 	bl	8001604 <htsInit>

  float temp = 0;
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
  float hum = 0;
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	60bb      	str	r3, [r7, #8]
  float pressure = 0;
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	607b      	str	r3, [r7, #4]
  float height = 0;
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	603b      	str	r3, [r7, #0]

  while (1)
  {
	  temp = rawTemp();
 8002248:	f7ff f9f8 	bl	800163c <rawTemp>
 800224c:	ed87 0a03 	vstr	s0, [r7, #12]
	  hum = rawHum();
 8002250:	f7ff fa18 	bl	8001684 <rawHum>
 8002254:	ed87 0a02 	vstr	s0, [r7, #8]
	  pressure = returnPressure();
 8002258:	f7ff fa9a 	bl	8001790 <returnPressure>
 800225c:	ed87 0a01 	vstr	s0, [r7, #4]
	  height = returnHeight();
 8002260:	f7ff fa34 	bl	80016cc <returnHeight>
 8002264:	ed87 0a00 	vstr	s0, [r7]
	  sprintf(tx_data, "Teplota [°C]: %.2f, relat. vlhkosť [%%]: %.2f, tlak vzduchu [hPa]: %.2f, relat. výška od zeme [m]: %.2f;\n\r", temp, hum, pressure, height);
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f7fe f96d 	bl	8000548 <__aeabi_f2d>
 800226e:	4682      	mov	sl, r0
 8002270:	468b      	mov	fp, r1
 8002272:	68b8      	ldr	r0, [r7, #8]
 8002274:	f7fe f968 	bl	8000548 <__aeabi_f2d>
 8002278:	4604      	mov	r4, r0
 800227a:	460d      	mov	r5, r1
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7fe f963 	bl	8000548 <__aeabi_f2d>
 8002282:	4680      	mov	r8, r0
 8002284:	4689      	mov	r9, r1
 8002286:	6838      	ldr	r0, [r7, #0]
 8002288:	f7fe f95e 	bl	8000548 <__aeabi_f2d>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002294:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002298:	e9cd 4500 	strd	r4, r5, [sp]
 800229c:	4652      	mov	r2, sl
 800229e:	465b      	mov	r3, fp
 80022a0:	4906      	ldr	r1, [pc, #24]	; (80022bc <main+0xc4>)
 80022a2:	4807      	ldr	r0, [pc, #28]	; (80022c0 <main+0xc8>)
 80022a4:	f001 fc8c 	bl	8003bc0 <siprintf>
	  USART2_PutBuffer(tx_data, sizeof(tx_data));
 80022a8:	21f4      	movs	r1, #244	; 0xf4
 80022aa:	4805      	ldr	r0, [pc, #20]	; (80022c0 <main+0xc8>)
 80022ac:	f000 feb6 	bl	800301c <USART2_PutBuffer>
	  LL_mDelay(1000);
 80022b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022b4:	f7ff f970 	bl	8001598 <LL_mDelay>
  {
 80022b8:	e7c6      	b.n	8002248 <main+0x50>
 80022ba:	bf00      	nop
 80022bc:	08005e90 	.word	0x08005e90
 80022c0:	200001f4 	.word	0x200001f4

080022c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80022c8:	2000      	movs	r0, #0
 80022ca:	f7ff ff57 	bl	800217c <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 80022ce:	f7ff ff69 	bl	80021a4 <LL_FLASH_GetLatency>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <SystemClock_Config+0x18>
  {
  Error_Handler();  
 80022d8:	f000 f82e 	bl	8002338 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 80022dc:	f7ff fe70 	bl	8001fc0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80022e0:	bf00      	nop
 80022e2:	f7ff fe7d 	bl	8001fe0 <LL_RCC_HSI_IsReady>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d1fa      	bne.n	80022e2 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80022ec:	2010      	movs	r0, #16
 80022ee:	f7ff fe89 	bl	8002004 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80022f2:	2000      	movs	r0, #0
 80022f4:	f7ff febe 	bl	8002074 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80022f8:	2000      	movs	r0, #0
 80022fa:	f7ff fecf 	bl	800209c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80022fe:	2000      	movs	r0, #0
 8002300:	f7ff fee0 	bl	80020c4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002304:	2000      	movs	r0, #0
 8002306:	f7ff fe93 	bl	8002030 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800230a:	bf00      	nop
 800230c:	f7ff fea4 	bl	8002058 <LL_RCC_GetSysClkSource>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1fa      	bne.n	800230c <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8002316:	4807      	ldr	r0, [pc, #28]	; (8002334 <SystemClock_Config+0x70>)
 8002318:	f7ff f930 	bl	800157c <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 800231c:	2004      	movs	r0, #4
 800231e:	f7ff ff4f 	bl	80021c0 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8002322:	4804      	ldr	r0, [pc, #16]	; (8002334 <SystemClock_Config+0x70>)
 8002324:	f7ff f95e 	bl	80015e4 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8002328:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800232c:	f7ff fede 	bl	80020ec <LL_RCC_SetI2CClockSource>
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}
 8002334:	007a1200 	.word	0x007a1200

08002338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	3b01      	subs	r3, #1
 8002356:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <LL_DMA_DisableChannel+0x3c>)
 8002358:	5cd3      	ldrb	r3, [r2, r3]
 800235a:	461a      	mov	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4413      	add	r3, r2
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	3a01      	subs	r2, #1
 8002366:	4907      	ldr	r1, [pc, #28]	; (8002384 <LL_DMA_DisableChannel+0x3c>)
 8002368:	5c8a      	ldrb	r2, [r1, r2]
 800236a:	4611      	mov	r1, r2
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	440a      	add	r2, r1
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	6013      	str	r3, [r2, #0]
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	08005f00 	.word	0x08005f00

08002388 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002398:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800239c:	bf0c      	ite	eq
 800239e:	2301      	moveq	r3, #1
 80023a0:	2300      	movne	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023c4:	bf0c      	ite	eq
 80023c6:	2301      	moveq	r3, #1
 80023c8:	2300      	movne	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ec:	bf0c      	ite	eq
 80023ee:	2301      	moveq	r3, #1
 80023f0:	2300      	movne	r3, #0
 80023f2:	b2db      	uxtb	r3, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800240e:	605a      	str	r2, [r3, #4]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800242a:	605a      	str	r2, [r3, #4]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002446:	605a      	str	r2, [r3, #4]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b10      	cmp	r3, #16
 8002466:	bf0c      	ite	eq
 8002468:	2301      	moveq	r3, #1
 800246a:	2300      	movne	r3, #0
 800246c:	b2db      	uxtb	r3, r3
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248a:	2b40      	cmp	r3, #64	; 0x40
 800248c:	bf0c      	ite	eq
 800248e:	2301      	moveq	r3, #1
 8002490:	2300      	movne	r3, #0
 8002492:	b2db      	uxtb	r3, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2210      	movs	r2, #16
 80024ac:	621a      	str	r2, [r3, #32]
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024cc:	e7fe      	b.n	80024cc <HardFault_Handler+0x4>

080024ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d2:	e7fe      	b.n	80024d2 <MemManage_Handler+0x4>

080024d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024d8:	e7fe      	b.n	80024d8 <BusFault_Handler+0x4>

080024da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024de:	e7fe      	b.n	80024de <UsageFault_Handler+0x4>

080024e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 800251c:	480a      	ldr	r0, [pc, #40]	; (8002548 <DMA1_Channel7_IRQHandler+0x30>)
 800251e:	f7ff ff47 	bl	80023b0 <LL_DMA_IsActiveFlag_TC7>
 8002522:	4603      	mov	r3, r0
 8002524:	2b01      	cmp	r3, #1
 8002526:	d10d      	bne.n	8002544 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8002528:	4807      	ldr	r0, [pc, #28]	; (8002548 <DMA1_Channel7_IRQHandler+0x30>)
 800252a:	f7ff ff77 	bl	800241c <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 800252e:	bf00      	nop
 8002530:	4806      	ldr	r0, [pc, #24]	; (800254c <DMA1_Channel7_IRQHandler+0x34>)
 8002532:	f7ff ffa2 	bl	800247a <LL_USART_IsActiveFlag_TC>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f9      	beq.n	8002530 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 800253c:	2107      	movs	r1, #7
 800253e:	4802      	ldr	r0, [pc, #8]	; (8002548 <DMA1_Channel7_IRQHandler+0x30>)
 8002540:	f7ff ff02 	bl	8002348 <LL_DMA_DisableChannel>
	}
}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40020000 	.word	0x40020000
 800254c:	40004400 	.word	0x40004400

08002550 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8002554:	480c      	ldr	r0, [pc, #48]	; (8002588 <DMA1_Channel6_IRQHandler+0x38>)
 8002556:	f7ff ff17 	bl	8002388 <LL_DMA_IsActiveFlag_TC6>
 800255a:	4603      	mov	r3, r0
 800255c:	2b01      	cmp	r3, #1
 800255e:	d105      	bne.n	800256c <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8002560:	f000 fd7c 	bl	800305c <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8002564:	4808      	ldr	r0, [pc, #32]	; (8002588 <DMA1_Channel6_IRQHandler+0x38>)
 8002566:	f7ff ff4b 	bl	8002400 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 800256a:	e00a      	b.n	8002582 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 800256c:	4806      	ldr	r0, [pc, #24]	; (8002588 <DMA1_Channel6_IRQHandler+0x38>)
 800256e:	f7ff ff33 	bl	80023d8 <LL_DMA_IsActiveFlag_HT6>
 8002572:	4603      	mov	r3, r0
 8002574:	2b01      	cmp	r3, #1
 8002576:	d104      	bne.n	8002582 <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8002578:	f000 fd70 	bl	800305c <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <DMA1_Channel6_IRQHandler+0x38>)
 800257e:	f7ff ff5b 	bl	8002438 <LL_DMA_ClearFlag_HT6>
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40020000 	.word	0x40020000

0800258c <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8002590:	4806      	ldr	r0, [pc, #24]	; (80025ac <USART2_IRQHandler+0x20>)
 8002592:	f7ff ff5f 	bl	8002454 <LL_USART_IsActiveFlag_IDLE>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d004      	beq.n	80025a6 <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 800259c:	f000 fd5e 	bl	800305c <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 80025a0:	4802      	ldr	r0, [pc, #8]	; (80025ac <USART2_IRQHandler+0x20>)
 80025a2:	f7ff ff7d 	bl	80024a0 <LL_USART_ClearFlag_IDLE>
	}
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40004400 	.word	0x40004400

080025b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
	return 1;
 80025b4:	2301      	movs	r3, #1
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <_kill>:

int _kill(int pid, int sig)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025ca:	f001 fbaf 	bl	8003d2c <__errno>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2216      	movs	r2, #22
 80025d2:	601a      	str	r2, [r3, #0]
	return -1;
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <_exit>:

void _exit (int status)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025e8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff ffe7 	bl	80025c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025f2:	e7fe      	b.n	80025f2 <_exit+0x12>

080025f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	e00a      	b.n	800261c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002606:	f3af 8000 	nop.w
 800260a:	4601      	mov	r1, r0
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	60ba      	str	r2, [r7, #8]
 8002612:	b2ca      	uxtb	r2, r1
 8002614:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	3301      	adds	r3, #1
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	429a      	cmp	r2, r3
 8002622:	dbf0      	blt.n	8002606 <_read+0x12>
	}

return len;
 8002624:	687b      	ldr	r3, [r7, #4]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	e009      	b.n	8002654 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	60ba      	str	r2, [r7, #8]
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	3301      	adds	r3, #1
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	429a      	cmp	r2, r3
 800265a:	dbf1      	blt.n	8002640 <_write+0x12>
	}
	return len;
 800265c:	687b      	ldr	r3, [r7, #4]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <_close>:

int _close(int file)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
	return -1;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800268e:	605a      	str	r2, [r3, #4]
	return 0;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <_isatty>:

int _isatty(int file)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
	return 1;
 80026a6:	2301      	movs	r3, #1
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
	return 0;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void* _sbrk(int incr)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <_sbrk+0x50>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <_sbrk+0x16>
		heap_end = &end;
 80026e0:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <_sbrk+0x50>)
 80026e2:	4a10      	ldr	r2, [pc, #64]	; (8002724 <_sbrk+0x54>)
 80026e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80026e6:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <_sbrk+0x50>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <_sbrk+0x50>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4413      	add	r3, r2
 80026f4:	466a      	mov	r2, sp
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d907      	bls.n	800270a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80026fa:	f001 fb17 	bl	8003d2c <__errno>
 80026fe:	4603      	mov	r3, r0
 8002700:	220c      	movs	r2, #12
 8002702:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002704:	f04f 33ff 	mov.w	r3, #4294967295
 8002708:	e006      	b.n	8002718 <_sbrk+0x48>
	}

	heap_end += incr;
 800270a:	4b05      	ldr	r3, [pc, #20]	; (8002720 <_sbrk+0x50>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	4a03      	ldr	r2, [pc, #12]	; (8002720 <_sbrk+0x50>)
 8002714:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002716:	68fb      	ldr	r3, [r7, #12]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	200003e8 	.word	0x200003e8
 8002724:	200005c0 	.word	0x200005c0

08002728 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800272c:	4b1f      	ldr	r3, [pc, #124]	; (80027ac <SystemInit+0x84>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	4a1e      	ldr	r2, [pc, #120]	; (80027ac <SystemInit+0x84>)
 8002734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800273c:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <SystemInit+0x88>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a1b      	ldr	r2, [pc, #108]	; (80027b0 <SystemInit+0x88>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <SystemInit+0x88>)
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	4918      	ldr	r1, [pc, #96]	; (80027b0 <SystemInit+0x88>)
 800274e:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <SystemInit+0x8c>)
 8002750:	4013      	ands	r3, r2
 8002752:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002754:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <SystemInit+0x88>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a15      	ldr	r2, [pc, #84]	; (80027b0 <SystemInit+0x88>)
 800275a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800275e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002762:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <SystemInit+0x88>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a11      	ldr	r2, [pc, #68]	; (80027b0 <SystemInit+0x88>)
 800276a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800276e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <SystemInit+0x88>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a0e      	ldr	r2, [pc, #56]	; (80027b0 <SystemInit+0x88>)
 8002776:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800277a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <SystemInit+0x88>)
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	4a0b      	ldr	r2, [pc, #44]	; (80027b0 <SystemInit+0x88>)
 8002782:	f023 030f 	bic.w	r3, r3, #15
 8002786:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <SystemInit+0x88>)
 800278a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800278c:	4908      	ldr	r1, [pc, #32]	; (80027b0 <SystemInit+0x88>)
 800278e:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <SystemInit+0x90>)
 8002790:	4013      	ands	r3, r2
 8002792:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <SystemInit+0x88>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800279a:	4b04      	ldr	r3, [pc, #16]	; (80027ac <SystemInit+0x84>)
 800279c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027a0:	609a      	str	r2, [r3, #8]
#endif
}
 80027a2:	bf00      	nop
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00
 80027b0:	40021000 	.word	0x40021000
 80027b4:	f87fc00c 	.word	0xf87fc00c
 80027b8:	ff00fccc 	.word	0xff00fccc

080027bc <NVIC_EnableIRQ>:
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	f003 021f 	and.w	r2, r3, #31
 80027cc:	4907      	ldr	r1, [pc, #28]	; (80027ec <NVIC_EnableIRQ+0x30>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	2001      	movs	r0, #1
 80027d6:	fa00 f202 	lsl.w	r2, r0, r2
 80027da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	e000e100 	.word	0xe000e100

080027f0 <NVIC_SetPriority>:
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	2b00      	cmp	r3, #0
 8002802:	da0b      	bge.n	800281c <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	b2da      	uxtb	r2, r3
 8002808:	490c      	ldr	r1, [pc, #48]	; (800283c <NVIC_SetPriority+0x4c>)
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	f003 030f 	and.w	r3, r3, #15
 8002810:	3b04      	subs	r3, #4
 8002812:	0112      	lsls	r2, r2, #4
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	440b      	add	r3, r1
 8002818:	761a      	strb	r2, [r3, #24]
}
 800281a:	e009      	b.n	8002830 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	4907      	ldr	r1, [pc, #28]	; (8002840 <NVIC_SetPriority+0x50>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	0112      	lsls	r2, r2, #4
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	440b      	add	r3, r1
 800282c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00
 8002840:	e000e100 	.word	0xe000e100

08002844 <LL_AHB1_GRP1_EnableClock>:
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800284c:	4b08      	ldr	r3, [pc, #32]	; (8002870 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	4907      	ldr	r1, [pc, #28]	; (8002870 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4313      	orrs	r3, r2
 8002856:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800285a:	695a      	ldr	r2, [r3, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4013      	ands	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002862:	68fb      	ldr	r3, [r7, #12]
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40021000 	.word	0x40021000

08002874 <LL_APB1_GRP1_EnableClock>:
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800287c:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800287e:	69da      	ldr	r2, [r3, #28]
 8002880:	4907      	ldr	r1, [pc, #28]	; (80028a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4313      	orrs	r3, r2
 8002886:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800288a:	69da      	ldr	r2, [r3, #28]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4013      	ands	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	40021000 	.word	0x40021000

080028a4 <LL_DMA_EnableChannel>:
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	3b01      	subs	r3, #1
 80028b2:	4a0b      	ldr	r2, [pc, #44]	; (80028e0 <LL_DMA_EnableChannel+0x3c>)
 80028b4:	5cd3      	ldrb	r3, [r2, r3]
 80028b6:	461a      	mov	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4413      	add	r3, r2
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	3a01      	subs	r2, #1
 80028c2:	4907      	ldr	r1, [pc, #28]	; (80028e0 <LL_DMA_EnableChannel+0x3c>)
 80028c4:	5c8a      	ldrb	r2, [r1, r2]
 80028c6:	4611      	mov	r1, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	440a      	add	r2, r1
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6013      	str	r3, [r2, #0]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	08005f20 	.word	0x08005f20

080028e4 <LL_DMA_DisableChannel>:
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	4a0b      	ldr	r2, [pc, #44]	; (8002920 <LL_DMA_DisableChannel+0x3c>)
 80028f4:	5cd3      	ldrb	r3, [r2, r3]
 80028f6:	461a      	mov	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4413      	add	r3, r2
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	3a01      	subs	r2, #1
 8002902:	4907      	ldr	r1, [pc, #28]	; (8002920 <LL_DMA_DisableChannel+0x3c>)
 8002904:	5c8a      	ldrb	r2, [r1, r2]
 8002906:	4611      	mov	r1, r2
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	440a      	add	r2, r1
 800290c:	f023 0301 	bic.w	r3, r3, #1
 8002910:	6013      	str	r3, [r2, #0]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	08005f20 	.word	0x08005f20

08002924 <LL_DMA_SetDataTransferDirection>:
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	3b01      	subs	r3, #1
 8002934:	4a0d      	ldr	r2, [pc, #52]	; (800296c <LL_DMA_SetDataTransferDirection+0x48>)
 8002936:	5cd3      	ldrb	r3, [r2, r3]
 8002938:	461a      	mov	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4413      	add	r3, r2
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002944:	f023 0310 	bic.w	r3, r3, #16
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	3a01      	subs	r2, #1
 800294c:	4907      	ldr	r1, [pc, #28]	; (800296c <LL_DMA_SetDataTransferDirection+0x48>)
 800294e:	5c8a      	ldrb	r2, [r1, r2]
 8002950:	4611      	mov	r1, r2
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	440a      	add	r2, r1
 8002956:	4611      	mov	r1, r2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	08005f20 	.word	0x08005f20

08002970 <LL_DMA_GetDataTransferDirection>:
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	3b01      	subs	r3, #1
 800297e:	4a07      	ldr	r2, [pc, #28]	; (800299c <LL_DMA_GetDataTransferDirection+0x2c>)
 8002980:	5cd3      	ldrb	r3, [r2, r3]
 8002982:	461a      	mov	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4413      	add	r3, r2
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	f244 0310 	movw	r3, #16400	; 0x4010
 800298e:	4013      	ands	r3, r2
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	08005f20 	.word	0x08005f20

080029a0 <LL_DMA_SetMode>:
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	4a0c      	ldr	r2, [pc, #48]	; (80029e4 <LL_DMA_SetMode+0x44>)
 80029b2:	5cd3      	ldrb	r3, [r2, r3]
 80029b4:	461a      	mov	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4413      	add	r3, r2
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f023 0220 	bic.w	r2, r3, #32
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	4907      	ldr	r1, [pc, #28]	; (80029e4 <LL_DMA_SetMode+0x44>)
 80029c6:	5ccb      	ldrb	r3, [r1, r3]
 80029c8:	4619      	mov	r1, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	440b      	add	r3, r1
 80029ce:	4619      	mov	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	600b      	str	r3, [r1, #0]
}
 80029d6:	bf00      	nop
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	08005f20 	.word	0x08005f20

080029e8 <LL_DMA_SetPeriphIncMode>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	4a0c      	ldr	r2, [pc, #48]	; (8002a2c <LL_DMA_SetPeriphIncMode+0x44>)
 80029fa:	5cd3      	ldrb	r3, [r2, r3]
 80029fc:	461a      	mov	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4413      	add	r3, r2
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	4907      	ldr	r1, [pc, #28]	; (8002a2c <LL_DMA_SetPeriphIncMode+0x44>)
 8002a0e:	5ccb      	ldrb	r3, [r1, r3]
 8002a10:	4619      	mov	r1, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	440b      	add	r3, r1
 8002a16:	4619      	mov	r1, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]
}
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	08005f20 	.word	0x08005f20

08002a30 <LL_DMA_SetMemoryIncMode>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	4a0c      	ldr	r2, [pc, #48]	; (8002a74 <LL_DMA_SetMemoryIncMode+0x44>)
 8002a42:	5cd3      	ldrb	r3, [r2, r3]
 8002a44:	461a      	mov	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4413      	add	r3, r2
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	4907      	ldr	r1, [pc, #28]	; (8002a74 <LL_DMA_SetMemoryIncMode+0x44>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	440b      	add	r3, r1
 8002a5e:	4619      	mov	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	08005f20 	.word	0x08005f20

08002a78 <LL_DMA_SetPeriphSize>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	4a0c      	ldr	r2, [pc, #48]	; (8002abc <LL_DMA_SetPeriphSize+0x44>)
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4413      	add	r3, r2
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	4907      	ldr	r1, [pc, #28]	; (8002abc <LL_DMA_SetPeriphSize+0x44>)
 8002a9e:	5ccb      	ldrb	r3, [r1, r3]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	440b      	add	r3, r1
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]
}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	08005f20 	.word	0x08005f20

08002ac0 <LL_DMA_SetMemorySize>:
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	4a0c      	ldr	r2, [pc, #48]	; (8002b04 <LL_DMA_SetMemorySize+0x44>)
 8002ad2:	5cd3      	ldrb	r3, [r2, r3]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4413      	add	r3, r2
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	4907      	ldr	r1, [pc, #28]	; (8002b04 <LL_DMA_SetMemorySize+0x44>)
 8002ae6:	5ccb      	ldrb	r3, [r1, r3]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	440b      	add	r3, r1
 8002aee:	4619      	mov	r1, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]
}
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	08005f20 	.word	0x08005f20

08002b08 <LL_DMA_SetChannelPriorityLevel>:
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	4a0c      	ldr	r2, [pc, #48]	; (8002b4c <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002b1a:	5cd3      	ldrb	r3, [r2, r3]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4413      	add	r3, r2
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	4907      	ldr	r1, [pc, #28]	; (8002b4c <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002b2e:	5ccb      	ldrb	r3, [r1, r3]
 8002b30:	4619      	mov	r1, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	440b      	add	r3, r1
 8002b36:	4619      	mov	r1, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]
}
 8002b3e:	bf00      	nop
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	08005f20 	.word	0x08005f20

08002b50 <LL_DMA_SetDataLength>:
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	4a0c      	ldr	r2, [pc, #48]	; (8002b94 <LL_DMA_SetDataLength+0x44>)
 8002b62:	5cd3      	ldrb	r3, [r2, r3]
 8002b64:	461a      	mov	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4413      	add	r3, r2
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	0c1b      	lsrs	r3, r3, #16
 8002b6e:	041b      	lsls	r3, r3, #16
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	3a01      	subs	r2, #1
 8002b74:	4907      	ldr	r1, [pc, #28]	; (8002b94 <LL_DMA_SetDataLength+0x44>)
 8002b76:	5c8a      	ldrb	r2, [r1, r2]
 8002b78:	4611      	mov	r1, r2
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	440a      	add	r2, r1
 8002b7e:	4611      	mov	r1, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	08005f20 	.word	0x08005f20

08002b98 <LL_DMA_GetDataLength>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	4a06      	ldr	r2, [pc, #24]	; (8002bc0 <LL_DMA_GetDataLength+0x28>)
 8002ba8:	5cd3      	ldrb	r3, [r2, r3]
 8002baa:	461a      	mov	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4413      	add	r3, r2
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	b29b      	uxth	r3, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	08005f20 	.word	0x08005f20

08002bc4 <LL_DMA_ConfigAddresses>:
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d114      	bne.n	8002c02 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	4a16      	ldr	r2, [pc, #88]	; (8002c38 <LL_DMA_ConfigAddresses+0x74>)
 8002bde:	5cd3      	ldrb	r3, [r2, r3]
 8002be0:	461a      	mov	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4413      	add	r3, r2
 8002be6:	461a      	mov	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	4a11      	ldr	r2, [pc, #68]	; (8002c38 <LL_DMA_ConfigAddresses+0x74>)
 8002bf2:	5cd3      	ldrb	r3, [r2, r3]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	6093      	str	r3, [r2, #8]
}
 8002c00:	e013      	b.n	8002c2a <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	4a0c      	ldr	r2, [pc, #48]	; (8002c38 <LL_DMA_ConfigAddresses+0x74>)
 8002c08:	5cd3      	ldrb	r3, [r2, r3]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4413      	add	r3, r2
 8002c10:	461a      	mov	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	4a07      	ldr	r2, [pc, #28]	; (8002c38 <LL_DMA_ConfigAddresses+0x74>)
 8002c1c:	5cd3      	ldrb	r3, [r2, r3]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4413      	add	r3, r2
 8002c24:	461a      	mov	r2, r3
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	60d3      	str	r3, [r2, #12]
}
 8002c2a:	bf00      	nop
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	08005f20 	.word	0x08005f20

08002c3c <LL_DMA_SetMemoryAddress>:
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	4a06      	ldr	r2, [pc, #24]	; (8002c68 <LL_DMA_SetMemoryAddress+0x2c>)
 8002c4e:	5cd3      	ldrb	r3, [r2, r3]
 8002c50:	461a      	mov	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4413      	add	r3, r2
 8002c56:	461a      	mov	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	60d3      	str	r3, [r2, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	08005f20 	.word	0x08005f20

08002c6c <LL_DMA_SetPeriphAddress>:
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	4a06      	ldr	r2, [pc, #24]	; (8002c98 <LL_DMA_SetPeriphAddress+0x2c>)
 8002c7e:	5cd3      	ldrb	r3, [r2, r3]
 8002c80:	461a      	mov	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4413      	add	r3, r2
 8002c86:	461a      	mov	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6093      	str	r3, [r2, #8]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	08005f20 	.word	0x08005f20

08002c9c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	4a0b      	ldr	r2, [pc, #44]	; (8002cd8 <LL_DMA_EnableIT_TC+0x3c>)
 8002cac:	5cd3      	ldrb	r3, [r2, r3]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	3a01      	subs	r2, #1
 8002cba:	4907      	ldr	r1, [pc, #28]	; (8002cd8 <LL_DMA_EnableIT_TC+0x3c>)
 8002cbc:	5c8a      	ldrb	r2, [r1, r2]
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	440a      	add	r2, r1
 8002cc4:	f043 0302 	orr.w	r3, r3, #2
 8002cc8:	6013      	str	r3, [r2, #0]
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	08005f20 	.word	0x08005f20

08002cdc <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	4a0b      	ldr	r2, [pc, #44]	; (8002d18 <LL_DMA_EnableIT_HT+0x3c>)
 8002cec:	5cd3      	ldrb	r3, [r2, r3]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	3a01      	subs	r2, #1
 8002cfa:	4907      	ldr	r1, [pc, #28]	; (8002d18 <LL_DMA_EnableIT_HT+0x3c>)
 8002cfc:	5c8a      	ldrb	r2, [r1, r2]
 8002cfe:	4611      	mov	r1, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	440a      	add	r2, r1
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	6013      	str	r3, [r2, #0]
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	08005f20 	.word	0x08005f20

08002d1c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	4a0b      	ldr	r2, [pc, #44]	; (8002d58 <LL_DMA_EnableIT_TE+0x3c>)
 8002d2c:	5cd3      	ldrb	r3, [r2, r3]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4413      	add	r3, r2
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	3a01      	subs	r2, #1
 8002d3a:	4907      	ldr	r1, [pc, #28]	; (8002d58 <LL_DMA_EnableIT_TE+0x3c>)
 8002d3c:	5c8a      	ldrb	r2, [r1, r2]
 8002d3e:	4611      	mov	r1, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	440a      	add	r2, r1
 8002d44:	f043 0308 	orr.w	r3, r3, #8
 8002d48:	6013      	str	r3, [r2, #0]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	08005f20 	.word	0x08005f20

08002d5c <LL_USART_Enable>:
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f043 0201 	orr.w	r2, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	601a      	str	r2, [r3, #0]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <LL_USART_ConfigAsyncMode>:
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f043 0210 	orr.w	r2, r3, #16
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	601a      	str	r2, [r3, #0]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	609a      	str	r2, [r3, #8]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8002e28:	b490      	push	{r4, r7}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d103      	bne.n	8002e40 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3328      	adds	r3, #40	; 0x28
 8002e3c:	461c      	mov	r4, r3
 8002e3e:	e002      	b.n	8002e46 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3324      	adds	r3, #36	; 0x24
 8002e44:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 8002e46:	4623      	mov	r3, r4
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc90      	pop	{r4, r7}
 8002e50:	4770      	bx	lr
	...

08002e54 <MX_USART2_UART_Init>:
	}
}

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8002e54:	b5b0      	push	{r4, r5, r7, lr}
 8002e56:	b090      	sub	sp, #64	; 0x40
 8002e58:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002e5a:	f107 031c 	add.w	r3, r7, #28
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	609a      	str	r2, [r3, #8]
 8002e66:	60da      	str	r2, [r3, #12]
 8002e68:	611a      	str	r2, [r3, #16]
 8002e6a:	615a      	str	r2, [r3, #20]
 8002e6c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	611a      	str	r2, [r3, #16]
 8002e7c:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002e7e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002e82:	f7ff fcf7 	bl	8002874 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002e86:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002e8a:	f7ff fcdb 	bl	8002844 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8002e8e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002e92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002e94:	2302      	movs	r3, #2
 8002e96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002ea4:	2307      	movs	r3, #7
 8002ea6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea8:	1d3b      	adds	r3, r7, #4
 8002eaa:	4619      	mov	r1, r3
 8002eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eb0:	f7fd ff75 	bl	8000d9e <LL_GPIO_Init>
   * You can use configuration from example program and modify it.
   * For more information about DMA registers, refer to reference manual.
   */
  
  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2106      	movs	r1, #6
 8002eb8:	4855      	ldr	r0, [pc, #340]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002eba:	f7ff fd33 	bl	8002924 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8002ebe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ec2:	2106      	movs	r1, #6
 8002ec4:	4852      	ldr	r0, [pc, #328]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002ec6:	f7ff fe1f 	bl	8002b08 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2106      	movs	r1, #6
 8002ece:	4850      	ldr	r0, [pc, #320]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002ed0:	f7ff fd66 	bl	80029a0 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2106      	movs	r1, #6
 8002ed8:	484d      	ldr	r0, [pc, #308]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002eda:	f7ff fd85 	bl	80029e8 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8002ede:	2280      	movs	r2, #128	; 0x80
 8002ee0:	2106      	movs	r1, #6
 8002ee2:	484b      	ldr	r0, [pc, #300]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002ee4:	f7ff fda4 	bl	8002a30 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2106      	movs	r1, #6
 8002eec:	4848      	ldr	r0, [pc, #288]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002eee:	f7ff fdc3 	bl	8002a78 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2106      	movs	r1, #6
 8002ef6:	4846      	ldr	r0, [pc, #280]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002ef8:	f7ff fde2 	bl	8002ac0 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8002efc:	2101      	movs	r1, #1
 8002efe:	4845      	ldr	r0, [pc, #276]	; (8003014 <MX_USART2_UART_Init+0x1c0>)
 8002f00:	f7ff ff92 	bl	8002e28 <LL_USART_DMA_GetRegAddr>
 8002f04:	4604      	mov	r4, r0
 8002f06:	4d44      	ldr	r5, [pc, #272]	; (8003018 <MX_USART2_UART_Init+0x1c4>)
 8002f08:	2106      	movs	r1, #6
 8002f0a:	4841      	ldr	r0, [pc, #260]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002f0c:	f7ff fd30 	bl	8002970 <LL_DMA_GetDataTransferDirection>
 8002f10:	4603      	mov	r3, r0
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	462b      	mov	r3, r5
 8002f16:	4622      	mov	r2, r4
 8002f18:	2106      	movs	r1, #6
 8002f1a:	483d      	ldr	r0, [pc, #244]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002f1c:	f7ff fe52 	bl	8002bc4 <LL_DMA_ConfigAddresses>
						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							(uint32_t)bufferUSART2dma,
							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002f20:	2280      	movs	r2, #128	; 0x80
 8002f22:	2106      	movs	r1, #6
 8002f24:	483a      	ldr	r0, [pc, #232]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002f26:	f7ff fe13 	bl	8002b50 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002f2a:	2106      	movs	r1, #6
 8002f2c:	4838      	ldr	r0, [pc, #224]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002f2e:	f7ff fcb9 	bl	80028a4 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8002f32:	4838      	ldr	r0, [pc, #224]	; (8003014 <MX_USART2_UART_Init+0x1c0>)
 8002f34:	f7ff ff58 	bl	8002de8 <LL_USART_EnableDMAReq_RX>


  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8002f38:	2106      	movs	r1, #6
 8002f3a:	4835      	ldr	r0, [pc, #212]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002f3c:	f7ff feae 	bl	8002c9c <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8002f40:	2106      	movs	r1, #6
 8002f42:	4833      	ldr	r0, [pc, #204]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002f44:	f7ff feca 	bl	8002cdc <LL_DMA_EnableIT_HT>


  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002f48:	2210      	movs	r2, #16
 8002f4a:	2107      	movs	r1, #7
 8002f4c:	4830      	ldr	r0, [pc, #192]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002f4e:	f7ff fce9 	bl	8002924 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8002f52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f56:	2107      	movs	r1, #7
 8002f58:	482d      	ldr	r0, [pc, #180]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002f5a:	f7ff fdd5 	bl	8002b08 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2107      	movs	r1, #7
 8002f62:	482b      	ldr	r0, [pc, #172]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002f64:	f7ff fd1c 	bl	80029a0 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2107      	movs	r1, #7
 8002f6c:	4828      	ldr	r0, [pc, #160]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002f6e:	f7ff fd3b 	bl	80029e8 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8002f72:	2280      	movs	r2, #128	; 0x80
 8002f74:	2107      	movs	r1, #7
 8002f76:	4826      	ldr	r0, [pc, #152]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002f78:	f7ff fd5a 	bl	8002a30 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2107      	movs	r1, #7
 8002f80:	4823      	ldr	r0, [pc, #140]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002f82:	f7ff fd79 	bl	8002a78 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002f86:	2200      	movs	r2, #0
 8002f88:	2107      	movs	r1, #7
 8002f8a:	4821      	ldr	r0, [pc, #132]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002f8c:	f7ff fd98 	bl	8002ac0 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002f90:	2100      	movs	r1, #0
 8002f92:	4820      	ldr	r0, [pc, #128]	; (8003014 <MX_USART2_UART_Init+0x1c0>)
 8002f94:	f7ff ff48 	bl	8002e28 <LL_USART_DMA_GetRegAddr>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	2107      	movs	r1, #7
 8002f9e:	481c      	ldr	r0, [pc, #112]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002fa0:	f7ff fe64 	bl	8002c6c <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8002fa4:	481b      	ldr	r0, [pc, #108]	; (8003014 <MX_USART2_UART_Init+0x1c0>)
 8002fa6:	f7ff ff2f 	bl	8002e08 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8002faa:	2107      	movs	r1, #7
 8002fac:	4818      	ldr	r0, [pc, #96]	; (8003010 <MX_USART2_UART_Init+0x1bc>)
 8002fae:	f7ff feb5 	bl	8002d1c <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	2026      	movs	r0, #38	; 0x26
 8002fb6:	f7ff fc1b 	bl	80027f0 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002fba:	2026      	movs	r0, #38	; 0x26
 8002fbc:	f7ff fbfe 	bl	80027bc <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8002fc0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002fc4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002fd2:	230c      	movs	r3, #12
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002fde:	f107 031c 	add.w	r3, r7, #28
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	480b      	ldr	r0, [pc, #44]	; (8003014 <MX_USART2_UART_Init+0x1c0>)
 8002fe6:	f7fe fa43 	bl	8001470 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002fea:	480a      	ldr	r0, [pc, #40]	; (8003014 <MX_USART2_UART_Init+0x1c0>)
 8002fec:	f7ff fec6 	bl	8002d7c <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 8002ff0:	4808      	ldr	r0, [pc, #32]	; (8003014 <MX_USART2_UART_Init+0x1c0>)
 8002ff2:	f7ff fee9 	bl	8002dc8 <LL_USART_DisableIT_CTS>

  /* Enable USART2 peripheral and interrupts*/
  LL_USART_EnableIT_IDLE(USART2);
 8002ff6:	4807      	ldr	r0, [pc, #28]	; (8003014 <MX_USART2_UART_Init+0x1c0>)
 8002ff8:	f7ff fed6 	bl	8002da8 <LL_USART_EnableIT_IDLE>
  LL_USART_ConfigAsyncMode(USART2);
 8002ffc:	4805      	ldr	r0, [pc, #20]	; (8003014 <MX_USART2_UART_Init+0x1c0>)
 8002ffe:	f7ff febd 	bl	8002d7c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8003002:	4804      	ldr	r0, [pc, #16]	; (8003014 <MX_USART2_UART_Init+0x1c0>)
 8003004:	f7ff feaa 	bl	8002d5c <LL_USART_Enable>
}
 8003008:	bf00      	nop
 800300a:	3738      	adds	r7, #56	; 0x38
 800300c:	46bd      	mov	sp, r7
 800300e:	bdb0      	pop	{r4, r5, r7, pc}
 8003010:	40020000 	.word	0x40020000
 8003014:	40004400 	.word	0x40004400
 8003018:	200003ec 	.word	0x200003ec

0800301c <USART2_PutBuffer>:


// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	461a      	mov	r2, r3
 800302c:	2107      	movs	r1, #7
 800302e:	480a      	ldr	r0, [pc, #40]	; (8003058 <USART2_PutBuffer+0x3c>)
 8003030:	f7ff fe04 	bl	8002c3c <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	461a      	mov	r2, r3
 8003038:	2107      	movs	r1, #7
 800303a:	4807      	ldr	r0, [pc, #28]	; (8003058 <USART2_PutBuffer+0x3c>)
 800303c:	f7ff fd88 	bl	8002b50 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8003040:	2107      	movs	r1, #7
 8003042:	4805      	ldr	r0, [pc, #20]	; (8003058 <USART2_PutBuffer+0x3c>)
 8003044:	f7ff fe2a 	bl	8002c9c <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8003048:	2107      	movs	r1, #7
 800304a:	4803      	ldr	r0, [pc, #12]	; (8003058 <USART2_PutBuffer+0x3c>)
 800304c:	f7ff fc2a 	bl	80028a4 <LL_DMA_EnableChannel>
}
 8003050:	bf00      	nop
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40020000 	.word	0x40020000

0800305c <USART2_CheckDmaReception>:
 *	Forwards data to callback function.
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */
void USART2_CheckDmaReception(void)
{
 800305c:	b5b0      	push	{r4, r5, r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af02      	add	r7, sp, #8
	if(USART2_ProcessData == 0) return;
 8003062:	4b29      	ldr	r3, [pc, #164]	; (8003108 <USART2_CheckDmaReception+0xac>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d04a      	beq.n	8003100 <USART2_CheckDmaReception+0xa4>

	static uint16_t old_pos = 0;
	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 800306a:	2106      	movs	r1, #6
 800306c:	4827      	ldr	r0, [pc, #156]	; (800310c <USART2_CheckDmaReception+0xb0>)
 800306e:	f7ff fd93 	bl	8002b98 <LL_DMA_GetDataLength>
 8003072:	4603      	mov	r3, r0
 8003074:	b29b      	uxth	r3, r3
 8003076:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800307a:	80fb      	strh	r3, [r7, #6]

	if ((pos - old_pos) < 35 && (pos != old_pos)) USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos, pos);
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	4a24      	ldr	r2, [pc, #144]	; (8003110 <USART2_CheckDmaReception+0xb4>)
 8003080:	8812      	ldrh	r2, [r2, #0]
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	2b22      	cmp	r3, #34	; 0x22
 8003086:	dc12      	bgt.n	80030ae <USART2_CheckDmaReception+0x52>
 8003088:	4b21      	ldr	r3, [pc, #132]	; (8003110 <USART2_CheckDmaReception+0xb4>)
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	88fa      	ldrh	r2, [r7, #6]
 800308e:	429a      	cmp	r2, r3
 8003090:	d00d      	beq.n	80030ae <USART2_CheckDmaReception+0x52>
 8003092:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <USART2_CheckDmaReception+0xac>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1e      	ldr	r2, [pc, #120]	; (8003110 <USART2_CheckDmaReception+0xb4>)
 8003098:	8812      	ldrh	r2, [r2, #0]
 800309a:	4611      	mov	r1, r2
 800309c:	4a1d      	ldr	r2, [pc, #116]	; (8003114 <USART2_CheckDmaReception+0xb8>)
 800309e:	1888      	adds	r0, r1, r2
 80030a0:	4a1b      	ldr	r2, [pc, #108]	; (8003110 <USART2_CheckDmaReception+0xb4>)
 80030a2:	8812      	ldrh	r2, [r2, #0]
 80030a4:	88f9      	ldrh	r1, [r7, #6]
 80030a6:	1a8a      	subs	r2, r1, r2
 80030a8:	b291      	uxth	r1, r2
 80030aa:	88fa      	ldrh	r2, [r7, #6]
 80030ac:	4798      	blx	r3

	old_pos = pos;
 80030ae:	4a18      	ldr	r2, [pc, #96]	; (8003110 <USART2_CheckDmaReception+0xb4>)
 80030b0:	88fb      	ldrh	r3, [r7, #6]
 80030b2:	8013      	strh	r3, [r2, #0]

	if(pos >= 92) {
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	2b5b      	cmp	r3, #91	; 0x5b
 80030b8:	d923      	bls.n	8003102 <USART2_CheckDmaReception+0xa6>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 80030ba:	2106      	movs	r1, #6
 80030bc:	4813      	ldr	r0, [pc, #76]	; (800310c <USART2_CheckDmaReception+0xb0>)
 80030be:	f7ff fc11 	bl	80028e4 <LL_DMA_DisableChannel>

		LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6,
 80030c2:	2101      	movs	r1, #1
 80030c4:	4814      	ldr	r0, [pc, #80]	; (8003118 <USART2_CheckDmaReception+0xbc>)
 80030c6:	f7ff feaf 	bl	8002e28 <LL_USART_DMA_GetRegAddr>
 80030ca:	4604      	mov	r4, r0
 80030cc:	4d11      	ldr	r5, [pc, #68]	; (8003114 <USART2_CheckDmaReception+0xb8>)
 80030ce:	2106      	movs	r1, #6
 80030d0:	480e      	ldr	r0, [pc, #56]	; (800310c <USART2_CheckDmaReception+0xb0>)
 80030d2:	f7ff fc4d 	bl	8002970 <LL_DMA_GetDataTransferDirection>
 80030d6:	4603      	mov	r3, r0
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	462b      	mov	r3, r5
 80030dc:	4622      	mov	r2, r4
 80030de:	2106      	movs	r1, #6
 80030e0:	480a      	ldr	r0, [pc, #40]	; (800310c <USART2_CheckDmaReception+0xb0>)
 80030e2:	f7ff fd6f 	bl	8002bc4 <LL_DMA_ConfigAddresses>
			                   LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
			                   (uint32_t)bufferUSART2dma,
			                   LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 80030e6:	2280      	movs	r2, #128	; 0x80
 80030e8:	2106      	movs	r1, #6
 80030ea:	4808      	ldr	r0, [pc, #32]	; (800310c <USART2_CheckDmaReception+0xb0>)
 80030ec:	f7ff fd30 	bl	8002b50 <LL_DMA_SetDataLength>
        LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80030f0:	2106      	movs	r1, #6
 80030f2:	4806      	ldr	r0, [pc, #24]	; (800310c <USART2_CheckDmaReception+0xb0>)
 80030f4:	f7ff fbd6 	bl	80028a4 <LL_DMA_EnableChannel>
		old_pos = 0;
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <USART2_CheckDmaReception+0xb4>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	801a      	strh	r2, [r3, #0]
 80030fe:	e000      	b.n	8003102 <USART2_CheckDmaReception+0xa6>
	if(USART2_ProcessData == 0) return;
 8003100:	bf00      	nop
	}
}
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bdb0      	pop	{r4, r5, r7, pc}
 8003108:	2000046c 	.word	0x2000046c
 800310c:	40020000 	.word	0x40020000
 8003110:	20000470 	.word	0x20000470
 8003114:	200003ec 	.word	0x200003ec
 8003118:	40004400 	.word	0x40004400

0800311c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800311c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003154 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003120:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003122:	e003      	b.n	800312c <LoopCopyDataInit>

08003124 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003126:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003128:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800312a:	3104      	adds	r1, #4

0800312c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800312c:	480b      	ldr	r0, [pc, #44]	; (800315c <LoopForever+0xa>)
	ldr	r3, =_edata
 800312e:	4b0c      	ldr	r3, [pc, #48]	; (8003160 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003130:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003132:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003134:	d3f6      	bcc.n	8003124 <CopyDataInit>
	ldr	r2, =_sbss
 8003136:	4a0b      	ldr	r2, [pc, #44]	; (8003164 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003138:	e002      	b.n	8003140 <LoopFillZerobss>

0800313a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800313a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800313c:	f842 3b04 	str.w	r3, [r2], #4

08003140 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003140:	4b09      	ldr	r3, [pc, #36]	; (8003168 <LoopForever+0x16>)
	cmp	r2, r3
 8003142:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003144:	d3f9      	bcc.n	800313a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003146:	f7ff faef 	bl	8002728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800314a:	f000 fdf5 	bl	8003d38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800314e:	f7ff f853 	bl	80021f8 <main>

08003152 <LoopForever>:

LoopForever:
    b LoopForever
 8003152:	e7fe      	b.n	8003152 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003154:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003158:	080062a4 	.word	0x080062a4
	ldr	r0, =_sdata
 800315c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003160:	200001cc 	.word	0x200001cc
	ldr	r2, =_sbss
 8003164:	200001cc 	.word	0x200001cc
	ldr	r3, = _ebss
 8003168:	200005c0 	.word	0x200005c0

0800316c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800316c:	e7fe      	b.n	800316c <ADC1_2_IRQHandler>

0800316e <__cvt>:
 800316e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003172:	ec55 4b10 	vmov	r4, r5, d0
 8003176:	2d00      	cmp	r5, #0
 8003178:	460e      	mov	r6, r1
 800317a:	4619      	mov	r1, r3
 800317c:	462b      	mov	r3, r5
 800317e:	bfbb      	ittet	lt
 8003180:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003184:	461d      	movlt	r5, r3
 8003186:	2300      	movge	r3, #0
 8003188:	232d      	movlt	r3, #45	; 0x2d
 800318a:	700b      	strb	r3, [r1, #0]
 800318c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800318e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003192:	4691      	mov	r9, r2
 8003194:	f023 0820 	bic.w	r8, r3, #32
 8003198:	bfbc      	itt	lt
 800319a:	4622      	movlt	r2, r4
 800319c:	4614      	movlt	r4, r2
 800319e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80031a2:	d005      	beq.n	80031b0 <__cvt+0x42>
 80031a4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80031a8:	d100      	bne.n	80031ac <__cvt+0x3e>
 80031aa:	3601      	adds	r6, #1
 80031ac:	2102      	movs	r1, #2
 80031ae:	e000      	b.n	80031b2 <__cvt+0x44>
 80031b0:	2103      	movs	r1, #3
 80031b2:	ab03      	add	r3, sp, #12
 80031b4:	9301      	str	r3, [sp, #4]
 80031b6:	ab02      	add	r3, sp, #8
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	ec45 4b10 	vmov	d0, r4, r5
 80031be:	4653      	mov	r3, sl
 80031c0:	4632      	mov	r2, r6
 80031c2:	f000 fe69 	bl	8003e98 <_dtoa_r>
 80031c6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80031ca:	4607      	mov	r7, r0
 80031cc:	d102      	bne.n	80031d4 <__cvt+0x66>
 80031ce:	f019 0f01 	tst.w	r9, #1
 80031d2:	d022      	beq.n	800321a <__cvt+0xac>
 80031d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80031d8:	eb07 0906 	add.w	r9, r7, r6
 80031dc:	d110      	bne.n	8003200 <__cvt+0x92>
 80031de:	783b      	ldrb	r3, [r7, #0]
 80031e0:	2b30      	cmp	r3, #48	; 0x30
 80031e2:	d10a      	bne.n	80031fa <__cvt+0x8c>
 80031e4:	2200      	movs	r2, #0
 80031e6:	2300      	movs	r3, #0
 80031e8:	4620      	mov	r0, r4
 80031ea:	4629      	mov	r1, r5
 80031ec:	f7fd fc6c 	bl	8000ac8 <__aeabi_dcmpeq>
 80031f0:	b918      	cbnz	r0, 80031fa <__cvt+0x8c>
 80031f2:	f1c6 0601 	rsb	r6, r6, #1
 80031f6:	f8ca 6000 	str.w	r6, [sl]
 80031fa:	f8da 3000 	ldr.w	r3, [sl]
 80031fe:	4499      	add	r9, r3
 8003200:	2200      	movs	r2, #0
 8003202:	2300      	movs	r3, #0
 8003204:	4620      	mov	r0, r4
 8003206:	4629      	mov	r1, r5
 8003208:	f7fd fc5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800320c:	b108      	cbz	r0, 8003212 <__cvt+0xa4>
 800320e:	f8cd 900c 	str.w	r9, [sp, #12]
 8003212:	2230      	movs	r2, #48	; 0x30
 8003214:	9b03      	ldr	r3, [sp, #12]
 8003216:	454b      	cmp	r3, r9
 8003218:	d307      	bcc.n	800322a <__cvt+0xbc>
 800321a:	9b03      	ldr	r3, [sp, #12]
 800321c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800321e:	1bdb      	subs	r3, r3, r7
 8003220:	4638      	mov	r0, r7
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	b004      	add	sp, #16
 8003226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800322a:	1c59      	adds	r1, r3, #1
 800322c:	9103      	str	r1, [sp, #12]
 800322e:	701a      	strb	r2, [r3, #0]
 8003230:	e7f0      	b.n	8003214 <__cvt+0xa6>

08003232 <__exponent>:
 8003232:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003234:	4603      	mov	r3, r0
 8003236:	2900      	cmp	r1, #0
 8003238:	bfb8      	it	lt
 800323a:	4249      	neglt	r1, r1
 800323c:	f803 2b02 	strb.w	r2, [r3], #2
 8003240:	bfb4      	ite	lt
 8003242:	222d      	movlt	r2, #45	; 0x2d
 8003244:	222b      	movge	r2, #43	; 0x2b
 8003246:	2909      	cmp	r1, #9
 8003248:	7042      	strb	r2, [r0, #1]
 800324a:	dd2a      	ble.n	80032a2 <__exponent+0x70>
 800324c:	f10d 0207 	add.w	r2, sp, #7
 8003250:	4617      	mov	r7, r2
 8003252:	260a      	movs	r6, #10
 8003254:	4694      	mov	ip, r2
 8003256:	fb91 f5f6 	sdiv	r5, r1, r6
 800325a:	fb06 1415 	mls	r4, r6, r5, r1
 800325e:	3430      	adds	r4, #48	; 0x30
 8003260:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003264:	460c      	mov	r4, r1
 8003266:	2c63      	cmp	r4, #99	; 0x63
 8003268:	f102 32ff 	add.w	r2, r2, #4294967295
 800326c:	4629      	mov	r1, r5
 800326e:	dcf1      	bgt.n	8003254 <__exponent+0x22>
 8003270:	3130      	adds	r1, #48	; 0x30
 8003272:	f1ac 0402 	sub.w	r4, ip, #2
 8003276:	f802 1c01 	strb.w	r1, [r2, #-1]
 800327a:	1c41      	adds	r1, r0, #1
 800327c:	4622      	mov	r2, r4
 800327e:	42ba      	cmp	r2, r7
 8003280:	d30a      	bcc.n	8003298 <__exponent+0x66>
 8003282:	f10d 0209 	add.w	r2, sp, #9
 8003286:	eba2 020c 	sub.w	r2, r2, ip
 800328a:	42bc      	cmp	r4, r7
 800328c:	bf88      	it	hi
 800328e:	2200      	movhi	r2, #0
 8003290:	4413      	add	r3, r2
 8003292:	1a18      	subs	r0, r3, r0
 8003294:	b003      	add	sp, #12
 8003296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003298:	f812 5b01 	ldrb.w	r5, [r2], #1
 800329c:	f801 5f01 	strb.w	r5, [r1, #1]!
 80032a0:	e7ed      	b.n	800327e <__exponent+0x4c>
 80032a2:	2330      	movs	r3, #48	; 0x30
 80032a4:	3130      	adds	r1, #48	; 0x30
 80032a6:	7083      	strb	r3, [r0, #2]
 80032a8:	70c1      	strb	r1, [r0, #3]
 80032aa:	1d03      	adds	r3, r0, #4
 80032ac:	e7f1      	b.n	8003292 <__exponent+0x60>
	...

080032b0 <_printf_float>:
 80032b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032b4:	ed2d 8b02 	vpush	{d8}
 80032b8:	b08d      	sub	sp, #52	; 0x34
 80032ba:	460c      	mov	r4, r1
 80032bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80032c0:	4616      	mov	r6, r2
 80032c2:	461f      	mov	r7, r3
 80032c4:	4605      	mov	r5, r0
 80032c6:	f000 fce7 	bl	8003c98 <_localeconv_r>
 80032ca:	f8d0 a000 	ldr.w	sl, [r0]
 80032ce:	4650      	mov	r0, sl
 80032d0:	f7fc ffce 	bl	8000270 <strlen>
 80032d4:	2300      	movs	r3, #0
 80032d6:	930a      	str	r3, [sp, #40]	; 0x28
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	9305      	str	r3, [sp, #20]
 80032dc:	f8d8 3000 	ldr.w	r3, [r8]
 80032e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80032e4:	3307      	adds	r3, #7
 80032e6:	f023 0307 	bic.w	r3, r3, #7
 80032ea:	f103 0208 	add.w	r2, r3, #8
 80032ee:	f8c8 2000 	str.w	r2, [r8]
 80032f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80032f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80032fa:	9307      	str	r3, [sp, #28]
 80032fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8003300:	ee08 0a10 	vmov	s16, r0
 8003304:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003308:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800330c:	4b9e      	ldr	r3, [pc, #632]	; (8003588 <_printf_float+0x2d8>)
 800330e:	f04f 32ff 	mov.w	r2, #4294967295
 8003312:	f7fd fc0b 	bl	8000b2c <__aeabi_dcmpun>
 8003316:	bb88      	cbnz	r0, 800337c <_printf_float+0xcc>
 8003318:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800331c:	4b9a      	ldr	r3, [pc, #616]	; (8003588 <_printf_float+0x2d8>)
 800331e:	f04f 32ff 	mov.w	r2, #4294967295
 8003322:	f7fd fbe5 	bl	8000af0 <__aeabi_dcmple>
 8003326:	bb48      	cbnz	r0, 800337c <_printf_float+0xcc>
 8003328:	2200      	movs	r2, #0
 800332a:	2300      	movs	r3, #0
 800332c:	4640      	mov	r0, r8
 800332e:	4649      	mov	r1, r9
 8003330:	f7fd fbd4 	bl	8000adc <__aeabi_dcmplt>
 8003334:	b110      	cbz	r0, 800333c <_printf_float+0x8c>
 8003336:	232d      	movs	r3, #45	; 0x2d
 8003338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800333c:	4a93      	ldr	r2, [pc, #588]	; (800358c <_printf_float+0x2dc>)
 800333e:	4b94      	ldr	r3, [pc, #592]	; (8003590 <_printf_float+0x2e0>)
 8003340:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003344:	bf94      	ite	ls
 8003346:	4690      	movls	r8, r2
 8003348:	4698      	movhi	r8, r3
 800334a:	2303      	movs	r3, #3
 800334c:	6123      	str	r3, [r4, #16]
 800334e:	9b05      	ldr	r3, [sp, #20]
 8003350:	f023 0304 	bic.w	r3, r3, #4
 8003354:	6023      	str	r3, [r4, #0]
 8003356:	f04f 0900 	mov.w	r9, #0
 800335a:	9700      	str	r7, [sp, #0]
 800335c:	4633      	mov	r3, r6
 800335e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003360:	4621      	mov	r1, r4
 8003362:	4628      	mov	r0, r5
 8003364:	f000 f9da 	bl	800371c <_printf_common>
 8003368:	3001      	adds	r0, #1
 800336a:	f040 8090 	bne.w	800348e <_printf_float+0x1de>
 800336e:	f04f 30ff 	mov.w	r0, #4294967295
 8003372:	b00d      	add	sp, #52	; 0x34
 8003374:	ecbd 8b02 	vpop	{d8}
 8003378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800337c:	4642      	mov	r2, r8
 800337e:	464b      	mov	r3, r9
 8003380:	4640      	mov	r0, r8
 8003382:	4649      	mov	r1, r9
 8003384:	f7fd fbd2 	bl	8000b2c <__aeabi_dcmpun>
 8003388:	b140      	cbz	r0, 800339c <_printf_float+0xec>
 800338a:	464b      	mov	r3, r9
 800338c:	2b00      	cmp	r3, #0
 800338e:	bfbc      	itt	lt
 8003390:	232d      	movlt	r3, #45	; 0x2d
 8003392:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003396:	4a7f      	ldr	r2, [pc, #508]	; (8003594 <_printf_float+0x2e4>)
 8003398:	4b7f      	ldr	r3, [pc, #508]	; (8003598 <_printf_float+0x2e8>)
 800339a:	e7d1      	b.n	8003340 <_printf_float+0x90>
 800339c:	6863      	ldr	r3, [r4, #4]
 800339e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80033a2:	9206      	str	r2, [sp, #24]
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	d13f      	bne.n	8003428 <_printf_float+0x178>
 80033a8:	2306      	movs	r3, #6
 80033aa:	6063      	str	r3, [r4, #4]
 80033ac:	9b05      	ldr	r3, [sp, #20]
 80033ae:	6861      	ldr	r1, [r4, #4]
 80033b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80033b4:	2300      	movs	r3, #0
 80033b6:	9303      	str	r3, [sp, #12]
 80033b8:	ab0a      	add	r3, sp, #40	; 0x28
 80033ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80033be:	ab09      	add	r3, sp, #36	; 0x24
 80033c0:	ec49 8b10 	vmov	d0, r8, r9
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	6022      	str	r2, [r4, #0]
 80033c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80033cc:	4628      	mov	r0, r5
 80033ce:	f7ff fece 	bl	800316e <__cvt>
 80033d2:	9b06      	ldr	r3, [sp, #24]
 80033d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80033d6:	2b47      	cmp	r3, #71	; 0x47
 80033d8:	4680      	mov	r8, r0
 80033da:	d108      	bne.n	80033ee <_printf_float+0x13e>
 80033dc:	1cc8      	adds	r0, r1, #3
 80033de:	db02      	blt.n	80033e6 <_printf_float+0x136>
 80033e0:	6863      	ldr	r3, [r4, #4]
 80033e2:	4299      	cmp	r1, r3
 80033e4:	dd41      	ble.n	800346a <_printf_float+0x1ba>
 80033e6:	f1ab 0302 	sub.w	r3, fp, #2
 80033ea:	fa5f fb83 	uxtb.w	fp, r3
 80033ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80033f2:	d820      	bhi.n	8003436 <_printf_float+0x186>
 80033f4:	3901      	subs	r1, #1
 80033f6:	465a      	mov	r2, fp
 80033f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80033fc:	9109      	str	r1, [sp, #36]	; 0x24
 80033fe:	f7ff ff18 	bl	8003232 <__exponent>
 8003402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003404:	1813      	adds	r3, r2, r0
 8003406:	2a01      	cmp	r2, #1
 8003408:	4681      	mov	r9, r0
 800340a:	6123      	str	r3, [r4, #16]
 800340c:	dc02      	bgt.n	8003414 <_printf_float+0x164>
 800340e:	6822      	ldr	r2, [r4, #0]
 8003410:	07d2      	lsls	r2, r2, #31
 8003412:	d501      	bpl.n	8003418 <_printf_float+0x168>
 8003414:	3301      	adds	r3, #1
 8003416:	6123      	str	r3, [r4, #16]
 8003418:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800341c:	2b00      	cmp	r3, #0
 800341e:	d09c      	beq.n	800335a <_printf_float+0xaa>
 8003420:	232d      	movs	r3, #45	; 0x2d
 8003422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003426:	e798      	b.n	800335a <_printf_float+0xaa>
 8003428:	9a06      	ldr	r2, [sp, #24]
 800342a:	2a47      	cmp	r2, #71	; 0x47
 800342c:	d1be      	bne.n	80033ac <_printf_float+0xfc>
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1bc      	bne.n	80033ac <_printf_float+0xfc>
 8003432:	2301      	movs	r3, #1
 8003434:	e7b9      	b.n	80033aa <_printf_float+0xfa>
 8003436:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800343a:	d118      	bne.n	800346e <_printf_float+0x1be>
 800343c:	2900      	cmp	r1, #0
 800343e:	6863      	ldr	r3, [r4, #4]
 8003440:	dd0b      	ble.n	800345a <_printf_float+0x1aa>
 8003442:	6121      	str	r1, [r4, #16]
 8003444:	b913      	cbnz	r3, 800344c <_printf_float+0x19c>
 8003446:	6822      	ldr	r2, [r4, #0]
 8003448:	07d0      	lsls	r0, r2, #31
 800344a:	d502      	bpl.n	8003452 <_printf_float+0x1a2>
 800344c:	3301      	adds	r3, #1
 800344e:	440b      	add	r3, r1
 8003450:	6123      	str	r3, [r4, #16]
 8003452:	65a1      	str	r1, [r4, #88]	; 0x58
 8003454:	f04f 0900 	mov.w	r9, #0
 8003458:	e7de      	b.n	8003418 <_printf_float+0x168>
 800345a:	b913      	cbnz	r3, 8003462 <_printf_float+0x1b2>
 800345c:	6822      	ldr	r2, [r4, #0]
 800345e:	07d2      	lsls	r2, r2, #31
 8003460:	d501      	bpl.n	8003466 <_printf_float+0x1b6>
 8003462:	3302      	adds	r3, #2
 8003464:	e7f4      	b.n	8003450 <_printf_float+0x1a0>
 8003466:	2301      	movs	r3, #1
 8003468:	e7f2      	b.n	8003450 <_printf_float+0x1a0>
 800346a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800346e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003470:	4299      	cmp	r1, r3
 8003472:	db05      	blt.n	8003480 <_printf_float+0x1d0>
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	6121      	str	r1, [r4, #16]
 8003478:	07d8      	lsls	r0, r3, #31
 800347a:	d5ea      	bpl.n	8003452 <_printf_float+0x1a2>
 800347c:	1c4b      	adds	r3, r1, #1
 800347e:	e7e7      	b.n	8003450 <_printf_float+0x1a0>
 8003480:	2900      	cmp	r1, #0
 8003482:	bfd4      	ite	le
 8003484:	f1c1 0202 	rsble	r2, r1, #2
 8003488:	2201      	movgt	r2, #1
 800348a:	4413      	add	r3, r2
 800348c:	e7e0      	b.n	8003450 <_printf_float+0x1a0>
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	055a      	lsls	r2, r3, #21
 8003492:	d407      	bmi.n	80034a4 <_printf_float+0x1f4>
 8003494:	6923      	ldr	r3, [r4, #16]
 8003496:	4642      	mov	r2, r8
 8003498:	4631      	mov	r1, r6
 800349a:	4628      	mov	r0, r5
 800349c:	47b8      	blx	r7
 800349e:	3001      	adds	r0, #1
 80034a0:	d12c      	bne.n	80034fc <_printf_float+0x24c>
 80034a2:	e764      	b.n	800336e <_printf_float+0xbe>
 80034a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80034a8:	f240 80e0 	bls.w	800366c <_printf_float+0x3bc>
 80034ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80034b0:	2200      	movs	r2, #0
 80034b2:	2300      	movs	r3, #0
 80034b4:	f7fd fb08 	bl	8000ac8 <__aeabi_dcmpeq>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d034      	beq.n	8003526 <_printf_float+0x276>
 80034bc:	4a37      	ldr	r2, [pc, #220]	; (800359c <_printf_float+0x2ec>)
 80034be:	2301      	movs	r3, #1
 80034c0:	4631      	mov	r1, r6
 80034c2:	4628      	mov	r0, r5
 80034c4:	47b8      	blx	r7
 80034c6:	3001      	adds	r0, #1
 80034c8:	f43f af51 	beq.w	800336e <_printf_float+0xbe>
 80034cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034d0:	429a      	cmp	r2, r3
 80034d2:	db02      	blt.n	80034da <_printf_float+0x22a>
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	07d8      	lsls	r0, r3, #31
 80034d8:	d510      	bpl.n	80034fc <_printf_float+0x24c>
 80034da:	ee18 3a10 	vmov	r3, s16
 80034de:	4652      	mov	r2, sl
 80034e0:	4631      	mov	r1, r6
 80034e2:	4628      	mov	r0, r5
 80034e4:	47b8      	blx	r7
 80034e6:	3001      	adds	r0, #1
 80034e8:	f43f af41 	beq.w	800336e <_printf_float+0xbe>
 80034ec:	f04f 0800 	mov.w	r8, #0
 80034f0:	f104 091a 	add.w	r9, r4, #26
 80034f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034f6:	3b01      	subs	r3, #1
 80034f8:	4543      	cmp	r3, r8
 80034fa:	dc09      	bgt.n	8003510 <_printf_float+0x260>
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	079b      	lsls	r3, r3, #30
 8003500:	f100 8107 	bmi.w	8003712 <_printf_float+0x462>
 8003504:	68e0      	ldr	r0, [r4, #12]
 8003506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003508:	4298      	cmp	r0, r3
 800350a:	bfb8      	it	lt
 800350c:	4618      	movlt	r0, r3
 800350e:	e730      	b.n	8003372 <_printf_float+0xc2>
 8003510:	2301      	movs	r3, #1
 8003512:	464a      	mov	r2, r9
 8003514:	4631      	mov	r1, r6
 8003516:	4628      	mov	r0, r5
 8003518:	47b8      	blx	r7
 800351a:	3001      	adds	r0, #1
 800351c:	f43f af27 	beq.w	800336e <_printf_float+0xbe>
 8003520:	f108 0801 	add.w	r8, r8, #1
 8003524:	e7e6      	b.n	80034f4 <_printf_float+0x244>
 8003526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003528:	2b00      	cmp	r3, #0
 800352a:	dc39      	bgt.n	80035a0 <_printf_float+0x2f0>
 800352c:	4a1b      	ldr	r2, [pc, #108]	; (800359c <_printf_float+0x2ec>)
 800352e:	2301      	movs	r3, #1
 8003530:	4631      	mov	r1, r6
 8003532:	4628      	mov	r0, r5
 8003534:	47b8      	blx	r7
 8003536:	3001      	adds	r0, #1
 8003538:	f43f af19 	beq.w	800336e <_printf_float+0xbe>
 800353c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003540:	4313      	orrs	r3, r2
 8003542:	d102      	bne.n	800354a <_printf_float+0x29a>
 8003544:	6823      	ldr	r3, [r4, #0]
 8003546:	07d9      	lsls	r1, r3, #31
 8003548:	d5d8      	bpl.n	80034fc <_printf_float+0x24c>
 800354a:	ee18 3a10 	vmov	r3, s16
 800354e:	4652      	mov	r2, sl
 8003550:	4631      	mov	r1, r6
 8003552:	4628      	mov	r0, r5
 8003554:	47b8      	blx	r7
 8003556:	3001      	adds	r0, #1
 8003558:	f43f af09 	beq.w	800336e <_printf_float+0xbe>
 800355c:	f04f 0900 	mov.w	r9, #0
 8003560:	f104 0a1a 	add.w	sl, r4, #26
 8003564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003566:	425b      	negs	r3, r3
 8003568:	454b      	cmp	r3, r9
 800356a:	dc01      	bgt.n	8003570 <_printf_float+0x2c0>
 800356c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800356e:	e792      	b.n	8003496 <_printf_float+0x1e6>
 8003570:	2301      	movs	r3, #1
 8003572:	4652      	mov	r2, sl
 8003574:	4631      	mov	r1, r6
 8003576:	4628      	mov	r0, r5
 8003578:	47b8      	blx	r7
 800357a:	3001      	adds	r0, #1
 800357c:	f43f aef7 	beq.w	800336e <_printf_float+0xbe>
 8003580:	f109 0901 	add.w	r9, r9, #1
 8003584:	e7ee      	b.n	8003564 <_printf_float+0x2b4>
 8003586:	bf00      	nop
 8003588:	7fefffff 	.word	0x7fefffff
 800358c:	08005f27 	.word	0x08005f27
 8003590:	08005f2b 	.word	0x08005f2b
 8003594:	08005f2f 	.word	0x08005f2f
 8003598:	08005f33 	.word	0x08005f33
 800359c:	08005f37 	.word	0x08005f37
 80035a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035a4:	429a      	cmp	r2, r3
 80035a6:	bfa8      	it	ge
 80035a8:	461a      	movge	r2, r3
 80035aa:	2a00      	cmp	r2, #0
 80035ac:	4691      	mov	r9, r2
 80035ae:	dc37      	bgt.n	8003620 <_printf_float+0x370>
 80035b0:	f04f 0b00 	mov.w	fp, #0
 80035b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035b8:	f104 021a 	add.w	r2, r4, #26
 80035bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035be:	9305      	str	r3, [sp, #20]
 80035c0:	eba3 0309 	sub.w	r3, r3, r9
 80035c4:	455b      	cmp	r3, fp
 80035c6:	dc33      	bgt.n	8003630 <_printf_float+0x380>
 80035c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035cc:	429a      	cmp	r2, r3
 80035ce:	db3b      	blt.n	8003648 <_printf_float+0x398>
 80035d0:	6823      	ldr	r3, [r4, #0]
 80035d2:	07da      	lsls	r2, r3, #31
 80035d4:	d438      	bmi.n	8003648 <_printf_float+0x398>
 80035d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80035da:	eba2 0903 	sub.w	r9, r2, r3
 80035de:	9b05      	ldr	r3, [sp, #20]
 80035e0:	1ad2      	subs	r2, r2, r3
 80035e2:	4591      	cmp	r9, r2
 80035e4:	bfa8      	it	ge
 80035e6:	4691      	movge	r9, r2
 80035e8:	f1b9 0f00 	cmp.w	r9, #0
 80035ec:	dc35      	bgt.n	800365a <_printf_float+0x3aa>
 80035ee:	f04f 0800 	mov.w	r8, #0
 80035f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035f6:	f104 0a1a 	add.w	sl, r4, #26
 80035fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	eba3 0309 	sub.w	r3, r3, r9
 8003604:	4543      	cmp	r3, r8
 8003606:	f77f af79 	ble.w	80034fc <_printf_float+0x24c>
 800360a:	2301      	movs	r3, #1
 800360c:	4652      	mov	r2, sl
 800360e:	4631      	mov	r1, r6
 8003610:	4628      	mov	r0, r5
 8003612:	47b8      	blx	r7
 8003614:	3001      	adds	r0, #1
 8003616:	f43f aeaa 	beq.w	800336e <_printf_float+0xbe>
 800361a:	f108 0801 	add.w	r8, r8, #1
 800361e:	e7ec      	b.n	80035fa <_printf_float+0x34a>
 8003620:	4613      	mov	r3, r2
 8003622:	4631      	mov	r1, r6
 8003624:	4642      	mov	r2, r8
 8003626:	4628      	mov	r0, r5
 8003628:	47b8      	blx	r7
 800362a:	3001      	adds	r0, #1
 800362c:	d1c0      	bne.n	80035b0 <_printf_float+0x300>
 800362e:	e69e      	b.n	800336e <_printf_float+0xbe>
 8003630:	2301      	movs	r3, #1
 8003632:	4631      	mov	r1, r6
 8003634:	4628      	mov	r0, r5
 8003636:	9205      	str	r2, [sp, #20]
 8003638:	47b8      	blx	r7
 800363a:	3001      	adds	r0, #1
 800363c:	f43f ae97 	beq.w	800336e <_printf_float+0xbe>
 8003640:	9a05      	ldr	r2, [sp, #20]
 8003642:	f10b 0b01 	add.w	fp, fp, #1
 8003646:	e7b9      	b.n	80035bc <_printf_float+0x30c>
 8003648:	ee18 3a10 	vmov	r3, s16
 800364c:	4652      	mov	r2, sl
 800364e:	4631      	mov	r1, r6
 8003650:	4628      	mov	r0, r5
 8003652:	47b8      	blx	r7
 8003654:	3001      	adds	r0, #1
 8003656:	d1be      	bne.n	80035d6 <_printf_float+0x326>
 8003658:	e689      	b.n	800336e <_printf_float+0xbe>
 800365a:	9a05      	ldr	r2, [sp, #20]
 800365c:	464b      	mov	r3, r9
 800365e:	4442      	add	r2, r8
 8003660:	4631      	mov	r1, r6
 8003662:	4628      	mov	r0, r5
 8003664:	47b8      	blx	r7
 8003666:	3001      	adds	r0, #1
 8003668:	d1c1      	bne.n	80035ee <_printf_float+0x33e>
 800366a:	e680      	b.n	800336e <_printf_float+0xbe>
 800366c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800366e:	2a01      	cmp	r2, #1
 8003670:	dc01      	bgt.n	8003676 <_printf_float+0x3c6>
 8003672:	07db      	lsls	r3, r3, #31
 8003674:	d53a      	bpl.n	80036ec <_printf_float+0x43c>
 8003676:	2301      	movs	r3, #1
 8003678:	4642      	mov	r2, r8
 800367a:	4631      	mov	r1, r6
 800367c:	4628      	mov	r0, r5
 800367e:	47b8      	blx	r7
 8003680:	3001      	adds	r0, #1
 8003682:	f43f ae74 	beq.w	800336e <_printf_float+0xbe>
 8003686:	ee18 3a10 	vmov	r3, s16
 800368a:	4652      	mov	r2, sl
 800368c:	4631      	mov	r1, r6
 800368e:	4628      	mov	r0, r5
 8003690:	47b8      	blx	r7
 8003692:	3001      	adds	r0, #1
 8003694:	f43f ae6b 	beq.w	800336e <_printf_float+0xbe>
 8003698:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800369c:	2200      	movs	r2, #0
 800369e:	2300      	movs	r3, #0
 80036a0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80036a4:	f7fd fa10 	bl	8000ac8 <__aeabi_dcmpeq>
 80036a8:	b9d8      	cbnz	r0, 80036e2 <_printf_float+0x432>
 80036aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80036ae:	f108 0201 	add.w	r2, r8, #1
 80036b2:	4631      	mov	r1, r6
 80036b4:	4628      	mov	r0, r5
 80036b6:	47b8      	blx	r7
 80036b8:	3001      	adds	r0, #1
 80036ba:	d10e      	bne.n	80036da <_printf_float+0x42a>
 80036bc:	e657      	b.n	800336e <_printf_float+0xbe>
 80036be:	2301      	movs	r3, #1
 80036c0:	4652      	mov	r2, sl
 80036c2:	4631      	mov	r1, r6
 80036c4:	4628      	mov	r0, r5
 80036c6:	47b8      	blx	r7
 80036c8:	3001      	adds	r0, #1
 80036ca:	f43f ae50 	beq.w	800336e <_printf_float+0xbe>
 80036ce:	f108 0801 	add.w	r8, r8, #1
 80036d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036d4:	3b01      	subs	r3, #1
 80036d6:	4543      	cmp	r3, r8
 80036d8:	dcf1      	bgt.n	80036be <_printf_float+0x40e>
 80036da:	464b      	mov	r3, r9
 80036dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80036e0:	e6da      	b.n	8003498 <_printf_float+0x1e8>
 80036e2:	f04f 0800 	mov.w	r8, #0
 80036e6:	f104 0a1a 	add.w	sl, r4, #26
 80036ea:	e7f2      	b.n	80036d2 <_printf_float+0x422>
 80036ec:	2301      	movs	r3, #1
 80036ee:	4642      	mov	r2, r8
 80036f0:	e7df      	b.n	80036b2 <_printf_float+0x402>
 80036f2:	2301      	movs	r3, #1
 80036f4:	464a      	mov	r2, r9
 80036f6:	4631      	mov	r1, r6
 80036f8:	4628      	mov	r0, r5
 80036fa:	47b8      	blx	r7
 80036fc:	3001      	adds	r0, #1
 80036fe:	f43f ae36 	beq.w	800336e <_printf_float+0xbe>
 8003702:	f108 0801 	add.w	r8, r8, #1
 8003706:	68e3      	ldr	r3, [r4, #12]
 8003708:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800370a:	1a5b      	subs	r3, r3, r1
 800370c:	4543      	cmp	r3, r8
 800370e:	dcf0      	bgt.n	80036f2 <_printf_float+0x442>
 8003710:	e6f8      	b.n	8003504 <_printf_float+0x254>
 8003712:	f04f 0800 	mov.w	r8, #0
 8003716:	f104 0919 	add.w	r9, r4, #25
 800371a:	e7f4      	b.n	8003706 <_printf_float+0x456>

0800371c <_printf_common>:
 800371c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003720:	4616      	mov	r6, r2
 8003722:	4699      	mov	r9, r3
 8003724:	688a      	ldr	r2, [r1, #8]
 8003726:	690b      	ldr	r3, [r1, #16]
 8003728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800372c:	4293      	cmp	r3, r2
 800372e:	bfb8      	it	lt
 8003730:	4613      	movlt	r3, r2
 8003732:	6033      	str	r3, [r6, #0]
 8003734:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003738:	4607      	mov	r7, r0
 800373a:	460c      	mov	r4, r1
 800373c:	b10a      	cbz	r2, 8003742 <_printf_common+0x26>
 800373e:	3301      	adds	r3, #1
 8003740:	6033      	str	r3, [r6, #0]
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	0699      	lsls	r1, r3, #26
 8003746:	bf42      	ittt	mi
 8003748:	6833      	ldrmi	r3, [r6, #0]
 800374a:	3302      	addmi	r3, #2
 800374c:	6033      	strmi	r3, [r6, #0]
 800374e:	6825      	ldr	r5, [r4, #0]
 8003750:	f015 0506 	ands.w	r5, r5, #6
 8003754:	d106      	bne.n	8003764 <_printf_common+0x48>
 8003756:	f104 0a19 	add.w	sl, r4, #25
 800375a:	68e3      	ldr	r3, [r4, #12]
 800375c:	6832      	ldr	r2, [r6, #0]
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	42ab      	cmp	r3, r5
 8003762:	dc26      	bgt.n	80037b2 <_printf_common+0x96>
 8003764:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003768:	1e13      	subs	r3, r2, #0
 800376a:	6822      	ldr	r2, [r4, #0]
 800376c:	bf18      	it	ne
 800376e:	2301      	movne	r3, #1
 8003770:	0692      	lsls	r2, r2, #26
 8003772:	d42b      	bmi.n	80037cc <_printf_common+0xb0>
 8003774:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003778:	4649      	mov	r1, r9
 800377a:	4638      	mov	r0, r7
 800377c:	47c0      	blx	r8
 800377e:	3001      	adds	r0, #1
 8003780:	d01e      	beq.n	80037c0 <_printf_common+0xa4>
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	6922      	ldr	r2, [r4, #16]
 8003786:	f003 0306 	and.w	r3, r3, #6
 800378a:	2b04      	cmp	r3, #4
 800378c:	bf02      	ittt	eq
 800378e:	68e5      	ldreq	r5, [r4, #12]
 8003790:	6833      	ldreq	r3, [r6, #0]
 8003792:	1aed      	subeq	r5, r5, r3
 8003794:	68a3      	ldr	r3, [r4, #8]
 8003796:	bf0c      	ite	eq
 8003798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800379c:	2500      	movne	r5, #0
 800379e:	4293      	cmp	r3, r2
 80037a0:	bfc4      	itt	gt
 80037a2:	1a9b      	subgt	r3, r3, r2
 80037a4:	18ed      	addgt	r5, r5, r3
 80037a6:	2600      	movs	r6, #0
 80037a8:	341a      	adds	r4, #26
 80037aa:	42b5      	cmp	r5, r6
 80037ac:	d11a      	bne.n	80037e4 <_printf_common+0xc8>
 80037ae:	2000      	movs	r0, #0
 80037b0:	e008      	b.n	80037c4 <_printf_common+0xa8>
 80037b2:	2301      	movs	r3, #1
 80037b4:	4652      	mov	r2, sl
 80037b6:	4649      	mov	r1, r9
 80037b8:	4638      	mov	r0, r7
 80037ba:	47c0      	blx	r8
 80037bc:	3001      	adds	r0, #1
 80037be:	d103      	bne.n	80037c8 <_printf_common+0xac>
 80037c0:	f04f 30ff 	mov.w	r0, #4294967295
 80037c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c8:	3501      	adds	r5, #1
 80037ca:	e7c6      	b.n	800375a <_printf_common+0x3e>
 80037cc:	18e1      	adds	r1, r4, r3
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	2030      	movs	r0, #48	; 0x30
 80037d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037d6:	4422      	add	r2, r4
 80037d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037e0:	3302      	adds	r3, #2
 80037e2:	e7c7      	b.n	8003774 <_printf_common+0x58>
 80037e4:	2301      	movs	r3, #1
 80037e6:	4622      	mov	r2, r4
 80037e8:	4649      	mov	r1, r9
 80037ea:	4638      	mov	r0, r7
 80037ec:	47c0      	blx	r8
 80037ee:	3001      	adds	r0, #1
 80037f0:	d0e6      	beq.n	80037c0 <_printf_common+0xa4>
 80037f2:	3601      	adds	r6, #1
 80037f4:	e7d9      	b.n	80037aa <_printf_common+0x8e>
	...

080037f8 <_printf_i>:
 80037f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037fc:	7e0f      	ldrb	r7, [r1, #24]
 80037fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003800:	2f78      	cmp	r7, #120	; 0x78
 8003802:	4691      	mov	r9, r2
 8003804:	4680      	mov	r8, r0
 8003806:	460c      	mov	r4, r1
 8003808:	469a      	mov	sl, r3
 800380a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800380e:	d807      	bhi.n	8003820 <_printf_i+0x28>
 8003810:	2f62      	cmp	r7, #98	; 0x62
 8003812:	d80a      	bhi.n	800382a <_printf_i+0x32>
 8003814:	2f00      	cmp	r7, #0
 8003816:	f000 80d4 	beq.w	80039c2 <_printf_i+0x1ca>
 800381a:	2f58      	cmp	r7, #88	; 0x58
 800381c:	f000 80c0 	beq.w	80039a0 <_printf_i+0x1a8>
 8003820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003824:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003828:	e03a      	b.n	80038a0 <_printf_i+0xa8>
 800382a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800382e:	2b15      	cmp	r3, #21
 8003830:	d8f6      	bhi.n	8003820 <_printf_i+0x28>
 8003832:	a101      	add	r1, pc, #4	; (adr r1, 8003838 <_printf_i+0x40>)
 8003834:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003838:	08003891 	.word	0x08003891
 800383c:	080038a5 	.word	0x080038a5
 8003840:	08003821 	.word	0x08003821
 8003844:	08003821 	.word	0x08003821
 8003848:	08003821 	.word	0x08003821
 800384c:	08003821 	.word	0x08003821
 8003850:	080038a5 	.word	0x080038a5
 8003854:	08003821 	.word	0x08003821
 8003858:	08003821 	.word	0x08003821
 800385c:	08003821 	.word	0x08003821
 8003860:	08003821 	.word	0x08003821
 8003864:	080039a9 	.word	0x080039a9
 8003868:	080038d1 	.word	0x080038d1
 800386c:	08003963 	.word	0x08003963
 8003870:	08003821 	.word	0x08003821
 8003874:	08003821 	.word	0x08003821
 8003878:	080039cb 	.word	0x080039cb
 800387c:	08003821 	.word	0x08003821
 8003880:	080038d1 	.word	0x080038d1
 8003884:	08003821 	.word	0x08003821
 8003888:	08003821 	.word	0x08003821
 800388c:	0800396b 	.word	0x0800396b
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	1d1a      	adds	r2, r3, #4
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	602a      	str	r2, [r5, #0]
 8003898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800389c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038a0:	2301      	movs	r3, #1
 80038a2:	e09f      	b.n	80039e4 <_printf_i+0x1ec>
 80038a4:	6820      	ldr	r0, [r4, #0]
 80038a6:	682b      	ldr	r3, [r5, #0]
 80038a8:	0607      	lsls	r7, r0, #24
 80038aa:	f103 0104 	add.w	r1, r3, #4
 80038ae:	6029      	str	r1, [r5, #0]
 80038b0:	d501      	bpl.n	80038b6 <_printf_i+0xbe>
 80038b2:	681e      	ldr	r6, [r3, #0]
 80038b4:	e003      	b.n	80038be <_printf_i+0xc6>
 80038b6:	0646      	lsls	r6, r0, #25
 80038b8:	d5fb      	bpl.n	80038b2 <_printf_i+0xba>
 80038ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80038be:	2e00      	cmp	r6, #0
 80038c0:	da03      	bge.n	80038ca <_printf_i+0xd2>
 80038c2:	232d      	movs	r3, #45	; 0x2d
 80038c4:	4276      	negs	r6, r6
 80038c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038ca:	485a      	ldr	r0, [pc, #360]	; (8003a34 <_printf_i+0x23c>)
 80038cc:	230a      	movs	r3, #10
 80038ce:	e012      	b.n	80038f6 <_printf_i+0xfe>
 80038d0:	682b      	ldr	r3, [r5, #0]
 80038d2:	6820      	ldr	r0, [r4, #0]
 80038d4:	1d19      	adds	r1, r3, #4
 80038d6:	6029      	str	r1, [r5, #0]
 80038d8:	0605      	lsls	r5, r0, #24
 80038da:	d501      	bpl.n	80038e0 <_printf_i+0xe8>
 80038dc:	681e      	ldr	r6, [r3, #0]
 80038de:	e002      	b.n	80038e6 <_printf_i+0xee>
 80038e0:	0641      	lsls	r1, r0, #25
 80038e2:	d5fb      	bpl.n	80038dc <_printf_i+0xe4>
 80038e4:	881e      	ldrh	r6, [r3, #0]
 80038e6:	4853      	ldr	r0, [pc, #332]	; (8003a34 <_printf_i+0x23c>)
 80038e8:	2f6f      	cmp	r7, #111	; 0x6f
 80038ea:	bf0c      	ite	eq
 80038ec:	2308      	moveq	r3, #8
 80038ee:	230a      	movne	r3, #10
 80038f0:	2100      	movs	r1, #0
 80038f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038f6:	6865      	ldr	r5, [r4, #4]
 80038f8:	60a5      	str	r5, [r4, #8]
 80038fa:	2d00      	cmp	r5, #0
 80038fc:	bfa2      	ittt	ge
 80038fe:	6821      	ldrge	r1, [r4, #0]
 8003900:	f021 0104 	bicge.w	r1, r1, #4
 8003904:	6021      	strge	r1, [r4, #0]
 8003906:	b90e      	cbnz	r6, 800390c <_printf_i+0x114>
 8003908:	2d00      	cmp	r5, #0
 800390a:	d04b      	beq.n	80039a4 <_printf_i+0x1ac>
 800390c:	4615      	mov	r5, r2
 800390e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003912:	fb03 6711 	mls	r7, r3, r1, r6
 8003916:	5dc7      	ldrb	r7, [r0, r7]
 8003918:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800391c:	4637      	mov	r7, r6
 800391e:	42bb      	cmp	r3, r7
 8003920:	460e      	mov	r6, r1
 8003922:	d9f4      	bls.n	800390e <_printf_i+0x116>
 8003924:	2b08      	cmp	r3, #8
 8003926:	d10b      	bne.n	8003940 <_printf_i+0x148>
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	07de      	lsls	r6, r3, #31
 800392c:	d508      	bpl.n	8003940 <_printf_i+0x148>
 800392e:	6923      	ldr	r3, [r4, #16]
 8003930:	6861      	ldr	r1, [r4, #4]
 8003932:	4299      	cmp	r1, r3
 8003934:	bfde      	ittt	le
 8003936:	2330      	movle	r3, #48	; 0x30
 8003938:	f805 3c01 	strble.w	r3, [r5, #-1]
 800393c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003940:	1b52      	subs	r2, r2, r5
 8003942:	6122      	str	r2, [r4, #16]
 8003944:	f8cd a000 	str.w	sl, [sp]
 8003948:	464b      	mov	r3, r9
 800394a:	aa03      	add	r2, sp, #12
 800394c:	4621      	mov	r1, r4
 800394e:	4640      	mov	r0, r8
 8003950:	f7ff fee4 	bl	800371c <_printf_common>
 8003954:	3001      	adds	r0, #1
 8003956:	d14a      	bne.n	80039ee <_printf_i+0x1f6>
 8003958:	f04f 30ff 	mov.w	r0, #4294967295
 800395c:	b004      	add	sp, #16
 800395e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	f043 0320 	orr.w	r3, r3, #32
 8003968:	6023      	str	r3, [r4, #0]
 800396a:	4833      	ldr	r0, [pc, #204]	; (8003a38 <_printf_i+0x240>)
 800396c:	2778      	movs	r7, #120	; 0x78
 800396e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	6829      	ldr	r1, [r5, #0]
 8003976:	061f      	lsls	r7, r3, #24
 8003978:	f851 6b04 	ldr.w	r6, [r1], #4
 800397c:	d402      	bmi.n	8003984 <_printf_i+0x18c>
 800397e:	065f      	lsls	r7, r3, #25
 8003980:	bf48      	it	mi
 8003982:	b2b6      	uxthmi	r6, r6
 8003984:	07df      	lsls	r7, r3, #31
 8003986:	bf48      	it	mi
 8003988:	f043 0320 	orrmi.w	r3, r3, #32
 800398c:	6029      	str	r1, [r5, #0]
 800398e:	bf48      	it	mi
 8003990:	6023      	strmi	r3, [r4, #0]
 8003992:	b91e      	cbnz	r6, 800399c <_printf_i+0x1a4>
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	f023 0320 	bic.w	r3, r3, #32
 800399a:	6023      	str	r3, [r4, #0]
 800399c:	2310      	movs	r3, #16
 800399e:	e7a7      	b.n	80038f0 <_printf_i+0xf8>
 80039a0:	4824      	ldr	r0, [pc, #144]	; (8003a34 <_printf_i+0x23c>)
 80039a2:	e7e4      	b.n	800396e <_printf_i+0x176>
 80039a4:	4615      	mov	r5, r2
 80039a6:	e7bd      	b.n	8003924 <_printf_i+0x12c>
 80039a8:	682b      	ldr	r3, [r5, #0]
 80039aa:	6826      	ldr	r6, [r4, #0]
 80039ac:	6961      	ldr	r1, [r4, #20]
 80039ae:	1d18      	adds	r0, r3, #4
 80039b0:	6028      	str	r0, [r5, #0]
 80039b2:	0635      	lsls	r5, r6, #24
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	d501      	bpl.n	80039bc <_printf_i+0x1c4>
 80039b8:	6019      	str	r1, [r3, #0]
 80039ba:	e002      	b.n	80039c2 <_printf_i+0x1ca>
 80039bc:	0670      	lsls	r0, r6, #25
 80039be:	d5fb      	bpl.n	80039b8 <_printf_i+0x1c0>
 80039c0:	8019      	strh	r1, [r3, #0]
 80039c2:	2300      	movs	r3, #0
 80039c4:	6123      	str	r3, [r4, #16]
 80039c6:	4615      	mov	r5, r2
 80039c8:	e7bc      	b.n	8003944 <_printf_i+0x14c>
 80039ca:	682b      	ldr	r3, [r5, #0]
 80039cc:	1d1a      	adds	r2, r3, #4
 80039ce:	602a      	str	r2, [r5, #0]
 80039d0:	681d      	ldr	r5, [r3, #0]
 80039d2:	6862      	ldr	r2, [r4, #4]
 80039d4:	2100      	movs	r1, #0
 80039d6:	4628      	mov	r0, r5
 80039d8:	f7fc fbfa 	bl	80001d0 <memchr>
 80039dc:	b108      	cbz	r0, 80039e2 <_printf_i+0x1ea>
 80039de:	1b40      	subs	r0, r0, r5
 80039e0:	6060      	str	r0, [r4, #4]
 80039e2:	6863      	ldr	r3, [r4, #4]
 80039e4:	6123      	str	r3, [r4, #16]
 80039e6:	2300      	movs	r3, #0
 80039e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039ec:	e7aa      	b.n	8003944 <_printf_i+0x14c>
 80039ee:	6923      	ldr	r3, [r4, #16]
 80039f0:	462a      	mov	r2, r5
 80039f2:	4649      	mov	r1, r9
 80039f4:	4640      	mov	r0, r8
 80039f6:	47d0      	blx	sl
 80039f8:	3001      	adds	r0, #1
 80039fa:	d0ad      	beq.n	8003958 <_printf_i+0x160>
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	079b      	lsls	r3, r3, #30
 8003a00:	d413      	bmi.n	8003a2a <_printf_i+0x232>
 8003a02:	68e0      	ldr	r0, [r4, #12]
 8003a04:	9b03      	ldr	r3, [sp, #12]
 8003a06:	4298      	cmp	r0, r3
 8003a08:	bfb8      	it	lt
 8003a0a:	4618      	movlt	r0, r3
 8003a0c:	e7a6      	b.n	800395c <_printf_i+0x164>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	4632      	mov	r2, r6
 8003a12:	4649      	mov	r1, r9
 8003a14:	4640      	mov	r0, r8
 8003a16:	47d0      	blx	sl
 8003a18:	3001      	adds	r0, #1
 8003a1a:	d09d      	beq.n	8003958 <_printf_i+0x160>
 8003a1c:	3501      	adds	r5, #1
 8003a1e:	68e3      	ldr	r3, [r4, #12]
 8003a20:	9903      	ldr	r1, [sp, #12]
 8003a22:	1a5b      	subs	r3, r3, r1
 8003a24:	42ab      	cmp	r3, r5
 8003a26:	dcf2      	bgt.n	8003a0e <_printf_i+0x216>
 8003a28:	e7eb      	b.n	8003a02 <_printf_i+0x20a>
 8003a2a:	2500      	movs	r5, #0
 8003a2c:	f104 0619 	add.w	r6, r4, #25
 8003a30:	e7f5      	b.n	8003a1e <_printf_i+0x226>
 8003a32:	bf00      	nop
 8003a34:	08005f39 	.word	0x08005f39
 8003a38:	08005f4a 	.word	0x08005f4a

08003a3c <std>:
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	b510      	push	{r4, lr}
 8003a40:	4604      	mov	r4, r0
 8003a42:	e9c0 3300 	strd	r3, r3, [r0]
 8003a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a4a:	6083      	str	r3, [r0, #8]
 8003a4c:	8181      	strh	r1, [r0, #12]
 8003a4e:	6643      	str	r3, [r0, #100]	; 0x64
 8003a50:	81c2      	strh	r2, [r0, #14]
 8003a52:	6183      	str	r3, [r0, #24]
 8003a54:	4619      	mov	r1, r3
 8003a56:	2208      	movs	r2, #8
 8003a58:	305c      	adds	r0, #92	; 0x5c
 8003a5a:	f000 f914 	bl	8003c86 <memset>
 8003a5e:	4b0d      	ldr	r3, [pc, #52]	; (8003a94 <std+0x58>)
 8003a60:	6263      	str	r3, [r4, #36]	; 0x24
 8003a62:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <std+0x5c>)
 8003a64:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a66:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <std+0x60>)
 8003a68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	; (8003aa0 <std+0x64>)
 8003a6c:	6323      	str	r3, [r4, #48]	; 0x30
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <std+0x68>)
 8003a70:	6224      	str	r4, [r4, #32]
 8003a72:	429c      	cmp	r4, r3
 8003a74:	d006      	beq.n	8003a84 <std+0x48>
 8003a76:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003a7a:	4294      	cmp	r4, r2
 8003a7c:	d002      	beq.n	8003a84 <std+0x48>
 8003a7e:	33d0      	adds	r3, #208	; 0xd0
 8003a80:	429c      	cmp	r4, r3
 8003a82:	d105      	bne.n	8003a90 <std+0x54>
 8003a84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a8c:	f000 b978 	b.w	8003d80 <__retarget_lock_init_recursive>
 8003a90:	bd10      	pop	{r4, pc}
 8003a92:	bf00      	nop
 8003a94:	08003c01 	.word	0x08003c01
 8003a98:	08003c23 	.word	0x08003c23
 8003a9c:	08003c5b 	.word	0x08003c5b
 8003aa0:	08003c7f 	.word	0x08003c7f
 8003aa4:	20000474 	.word	0x20000474

08003aa8 <stdio_exit_handler>:
 8003aa8:	4a02      	ldr	r2, [pc, #8]	; (8003ab4 <stdio_exit_handler+0xc>)
 8003aaa:	4903      	ldr	r1, [pc, #12]	; (8003ab8 <stdio_exit_handler+0x10>)
 8003aac:	4803      	ldr	r0, [pc, #12]	; (8003abc <stdio_exit_handler+0x14>)
 8003aae:	f000 b869 	b.w	8003b84 <_fwalk_sglue>
 8003ab2:	bf00      	nop
 8003ab4:	20000004 	.word	0x20000004
 8003ab8:	08005731 	.word	0x08005731
 8003abc:	20000010 	.word	0x20000010

08003ac0 <cleanup_stdio>:
 8003ac0:	6841      	ldr	r1, [r0, #4]
 8003ac2:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <cleanup_stdio+0x34>)
 8003ac4:	4299      	cmp	r1, r3
 8003ac6:	b510      	push	{r4, lr}
 8003ac8:	4604      	mov	r4, r0
 8003aca:	d001      	beq.n	8003ad0 <cleanup_stdio+0x10>
 8003acc:	f001 fe30 	bl	8005730 <_fflush_r>
 8003ad0:	68a1      	ldr	r1, [r4, #8]
 8003ad2:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <cleanup_stdio+0x38>)
 8003ad4:	4299      	cmp	r1, r3
 8003ad6:	d002      	beq.n	8003ade <cleanup_stdio+0x1e>
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f001 fe29 	bl	8005730 <_fflush_r>
 8003ade:	68e1      	ldr	r1, [r4, #12]
 8003ae0:	4b06      	ldr	r3, [pc, #24]	; (8003afc <cleanup_stdio+0x3c>)
 8003ae2:	4299      	cmp	r1, r3
 8003ae4:	d004      	beq.n	8003af0 <cleanup_stdio+0x30>
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003aec:	f001 be20 	b.w	8005730 <_fflush_r>
 8003af0:	bd10      	pop	{r4, pc}
 8003af2:	bf00      	nop
 8003af4:	20000474 	.word	0x20000474
 8003af8:	200004dc 	.word	0x200004dc
 8003afc:	20000544 	.word	0x20000544

08003b00 <global_stdio_init.part.0>:
 8003b00:	b510      	push	{r4, lr}
 8003b02:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <global_stdio_init.part.0+0x30>)
 8003b04:	4c0b      	ldr	r4, [pc, #44]	; (8003b34 <global_stdio_init.part.0+0x34>)
 8003b06:	4a0c      	ldr	r2, [pc, #48]	; (8003b38 <global_stdio_init.part.0+0x38>)
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2104      	movs	r1, #4
 8003b10:	f7ff ff94 	bl	8003a3c <std>
 8003b14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003b18:	2201      	movs	r2, #1
 8003b1a:	2109      	movs	r1, #9
 8003b1c:	f7ff ff8e 	bl	8003a3c <std>
 8003b20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003b24:	2202      	movs	r2, #2
 8003b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b2a:	2112      	movs	r1, #18
 8003b2c:	f7ff bf86 	b.w	8003a3c <std>
 8003b30:	200005ac 	.word	0x200005ac
 8003b34:	20000474 	.word	0x20000474
 8003b38:	08003aa9 	.word	0x08003aa9

08003b3c <__sfp_lock_acquire>:
 8003b3c:	4801      	ldr	r0, [pc, #4]	; (8003b44 <__sfp_lock_acquire+0x8>)
 8003b3e:	f000 b920 	b.w	8003d82 <__retarget_lock_acquire_recursive>
 8003b42:	bf00      	nop
 8003b44:	200005b5 	.word	0x200005b5

08003b48 <__sfp_lock_release>:
 8003b48:	4801      	ldr	r0, [pc, #4]	; (8003b50 <__sfp_lock_release+0x8>)
 8003b4a:	f000 b91b 	b.w	8003d84 <__retarget_lock_release_recursive>
 8003b4e:	bf00      	nop
 8003b50:	200005b5 	.word	0x200005b5

08003b54 <__sinit>:
 8003b54:	b510      	push	{r4, lr}
 8003b56:	4604      	mov	r4, r0
 8003b58:	f7ff fff0 	bl	8003b3c <__sfp_lock_acquire>
 8003b5c:	6a23      	ldr	r3, [r4, #32]
 8003b5e:	b11b      	cbz	r3, 8003b68 <__sinit+0x14>
 8003b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b64:	f7ff bff0 	b.w	8003b48 <__sfp_lock_release>
 8003b68:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <__sinit+0x28>)
 8003b6a:	6223      	str	r3, [r4, #32]
 8003b6c:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <__sinit+0x2c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f5      	bne.n	8003b60 <__sinit+0xc>
 8003b74:	f7ff ffc4 	bl	8003b00 <global_stdio_init.part.0>
 8003b78:	e7f2      	b.n	8003b60 <__sinit+0xc>
 8003b7a:	bf00      	nop
 8003b7c:	08003ac1 	.word	0x08003ac1
 8003b80:	200005ac 	.word	0x200005ac

08003b84 <_fwalk_sglue>:
 8003b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b88:	4607      	mov	r7, r0
 8003b8a:	4688      	mov	r8, r1
 8003b8c:	4614      	mov	r4, r2
 8003b8e:	2600      	movs	r6, #0
 8003b90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b94:	f1b9 0901 	subs.w	r9, r9, #1
 8003b98:	d505      	bpl.n	8003ba6 <_fwalk_sglue+0x22>
 8003b9a:	6824      	ldr	r4, [r4, #0]
 8003b9c:	2c00      	cmp	r4, #0
 8003b9e:	d1f7      	bne.n	8003b90 <_fwalk_sglue+0xc>
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ba6:	89ab      	ldrh	r3, [r5, #12]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d907      	bls.n	8003bbc <_fwalk_sglue+0x38>
 8003bac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	d003      	beq.n	8003bbc <_fwalk_sglue+0x38>
 8003bb4:	4629      	mov	r1, r5
 8003bb6:	4638      	mov	r0, r7
 8003bb8:	47c0      	blx	r8
 8003bba:	4306      	orrs	r6, r0
 8003bbc:	3568      	adds	r5, #104	; 0x68
 8003bbe:	e7e9      	b.n	8003b94 <_fwalk_sglue+0x10>

08003bc0 <siprintf>:
 8003bc0:	b40e      	push	{r1, r2, r3}
 8003bc2:	b500      	push	{lr}
 8003bc4:	b09c      	sub	sp, #112	; 0x70
 8003bc6:	ab1d      	add	r3, sp, #116	; 0x74
 8003bc8:	9002      	str	r0, [sp, #8]
 8003bca:	9006      	str	r0, [sp, #24]
 8003bcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bd0:	4809      	ldr	r0, [pc, #36]	; (8003bf8 <siprintf+0x38>)
 8003bd2:	9107      	str	r1, [sp, #28]
 8003bd4:	9104      	str	r1, [sp, #16]
 8003bd6:	4909      	ldr	r1, [pc, #36]	; (8003bfc <siprintf+0x3c>)
 8003bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bdc:	9105      	str	r1, [sp, #20]
 8003bde:	6800      	ldr	r0, [r0, #0]
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	a902      	add	r1, sp, #8
 8003be4:	f001 fc20 	bl	8005428 <_svfiprintf_r>
 8003be8:	9b02      	ldr	r3, [sp, #8]
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
 8003bee:	b01c      	add	sp, #112	; 0x70
 8003bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bf4:	b003      	add	sp, #12
 8003bf6:	4770      	bx	lr
 8003bf8:	2000005c 	.word	0x2000005c
 8003bfc:	ffff0208 	.word	0xffff0208

08003c00 <__sread>:
 8003c00:	b510      	push	{r4, lr}
 8003c02:	460c      	mov	r4, r1
 8003c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c08:	f000 f86c 	bl	8003ce4 <_read_r>
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	bfab      	itete	ge
 8003c10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c12:	89a3      	ldrhlt	r3, [r4, #12]
 8003c14:	181b      	addge	r3, r3, r0
 8003c16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c1a:	bfac      	ite	ge
 8003c1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c1e:	81a3      	strhlt	r3, [r4, #12]
 8003c20:	bd10      	pop	{r4, pc}

08003c22 <__swrite>:
 8003c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c26:	461f      	mov	r7, r3
 8003c28:	898b      	ldrh	r3, [r1, #12]
 8003c2a:	05db      	lsls	r3, r3, #23
 8003c2c:	4605      	mov	r5, r0
 8003c2e:	460c      	mov	r4, r1
 8003c30:	4616      	mov	r6, r2
 8003c32:	d505      	bpl.n	8003c40 <__swrite+0x1e>
 8003c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c38:	2302      	movs	r3, #2
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f000 f840 	bl	8003cc0 <_lseek_r>
 8003c40:	89a3      	ldrh	r3, [r4, #12]
 8003c42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c4a:	81a3      	strh	r3, [r4, #12]
 8003c4c:	4632      	mov	r2, r6
 8003c4e:	463b      	mov	r3, r7
 8003c50:	4628      	mov	r0, r5
 8003c52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c56:	f000 b857 	b.w	8003d08 <_write_r>

08003c5a <__sseek>:
 8003c5a:	b510      	push	{r4, lr}
 8003c5c:	460c      	mov	r4, r1
 8003c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c62:	f000 f82d 	bl	8003cc0 <_lseek_r>
 8003c66:	1c43      	adds	r3, r0, #1
 8003c68:	89a3      	ldrh	r3, [r4, #12]
 8003c6a:	bf15      	itete	ne
 8003c6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c76:	81a3      	strheq	r3, [r4, #12]
 8003c78:	bf18      	it	ne
 8003c7a:	81a3      	strhne	r3, [r4, #12]
 8003c7c:	bd10      	pop	{r4, pc}

08003c7e <__sclose>:
 8003c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c82:	f000 b80d 	b.w	8003ca0 <_close_r>

08003c86 <memset>:
 8003c86:	4402      	add	r2, r0
 8003c88:	4603      	mov	r3, r0
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d100      	bne.n	8003c90 <memset+0xa>
 8003c8e:	4770      	bx	lr
 8003c90:	f803 1b01 	strb.w	r1, [r3], #1
 8003c94:	e7f9      	b.n	8003c8a <memset+0x4>
	...

08003c98 <_localeconv_r>:
 8003c98:	4800      	ldr	r0, [pc, #0]	; (8003c9c <_localeconv_r+0x4>)
 8003c9a:	4770      	bx	lr
 8003c9c:	20000150 	.word	0x20000150

08003ca0 <_close_r>:
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	4d06      	ldr	r5, [pc, #24]	; (8003cbc <_close_r+0x1c>)
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	4608      	mov	r0, r1
 8003caa:	602b      	str	r3, [r5, #0]
 8003cac:	f7fe fcdb 	bl	8002666 <_close>
 8003cb0:	1c43      	adds	r3, r0, #1
 8003cb2:	d102      	bne.n	8003cba <_close_r+0x1a>
 8003cb4:	682b      	ldr	r3, [r5, #0]
 8003cb6:	b103      	cbz	r3, 8003cba <_close_r+0x1a>
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	bd38      	pop	{r3, r4, r5, pc}
 8003cbc:	200005b0 	.word	0x200005b0

08003cc0 <_lseek_r>:
 8003cc0:	b538      	push	{r3, r4, r5, lr}
 8003cc2:	4d07      	ldr	r5, [pc, #28]	; (8003ce0 <_lseek_r+0x20>)
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	4608      	mov	r0, r1
 8003cc8:	4611      	mov	r1, r2
 8003cca:	2200      	movs	r2, #0
 8003ccc:	602a      	str	r2, [r5, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f7fe fcf0 	bl	80026b4 <_lseek>
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	d102      	bne.n	8003cde <_lseek_r+0x1e>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	b103      	cbz	r3, 8003cde <_lseek_r+0x1e>
 8003cdc:	6023      	str	r3, [r4, #0]
 8003cde:	bd38      	pop	{r3, r4, r5, pc}
 8003ce0:	200005b0 	.word	0x200005b0

08003ce4 <_read_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	4d07      	ldr	r5, [pc, #28]	; (8003d04 <_read_r+0x20>)
 8003ce8:	4604      	mov	r4, r0
 8003cea:	4608      	mov	r0, r1
 8003cec:	4611      	mov	r1, r2
 8003cee:	2200      	movs	r2, #0
 8003cf0:	602a      	str	r2, [r5, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f7fe fc7e 	bl	80025f4 <_read>
 8003cf8:	1c43      	adds	r3, r0, #1
 8003cfa:	d102      	bne.n	8003d02 <_read_r+0x1e>
 8003cfc:	682b      	ldr	r3, [r5, #0]
 8003cfe:	b103      	cbz	r3, 8003d02 <_read_r+0x1e>
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	bd38      	pop	{r3, r4, r5, pc}
 8003d04:	200005b0 	.word	0x200005b0

08003d08 <_write_r>:
 8003d08:	b538      	push	{r3, r4, r5, lr}
 8003d0a:	4d07      	ldr	r5, [pc, #28]	; (8003d28 <_write_r+0x20>)
 8003d0c:	4604      	mov	r4, r0
 8003d0e:	4608      	mov	r0, r1
 8003d10:	4611      	mov	r1, r2
 8003d12:	2200      	movs	r2, #0
 8003d14:	602a      	str	r2, [r5, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	f7fe fc89 	bl	800262e <_write>
 8003d1c:	1c43      	adds	r3, r0, #1
 8003d1e:	d102      	bne.n	8003d26 <_write_r+0x1e>
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	b103      	cbz	r3, 8003d26 <_write_r+0x1e>
 8003d24:	6023      	str	r3, [r4, #0]
 8003d26:	bd38      	pop	{r3, r4, r5, pc}
 8003d28:	200005b0 	.word	0x200005b0

08003d2c <__errno>:
 8003d2c:	4b01      	ldr	r3, [pc, #4]	; (8003d34 <__errno+0x8>)
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	2000005c 	.word	0x2000005c

08003d38 <__libc_init_array>:
 8003d38:	b570      	push	{r4, r5, r6, lr}
 8003d3a:	4d0d      	ldr	r5, [pc, #52]	; (8003d70 <__libc_init_array+0x38>)
 8003d3c:	4c0d      	ldr	r4, [pc, #52]	; (8003d74 <__libc_init_array+0x3c>)
 8003d3e:	1b64      	subs	r4, r4, r5
 8003d40:	10a4      	asrs	r4, r4, #2
 8003d42:	2600      	movs	r6, #0
 8003d44:	42a6      	cmp	r6, r4
 8003d46:	d109      	bne.n	8003d5c <__libc_init_array+0x24>
 8003d48:	4d0b      	ldr	r5, [pc, #44]	; (8003d78 <__libc_init_array+0x40>)
 8003d4a:	4c0c      	ldr	r4, [pc, #48]	; (8003d7c <__libc_init_array+0x44>)
 8003d4c:	f002 f894 	bl	8005e78 <_init>
 8003d50:	1b64      	subs	r4, r4, r5
 8003d52:	10a4      	asrs	r4, r4, #2
 8003d54:	2600      	movs	r6, #0
 8003d56:	42a6      	cmp	r6, r4
 8003d58:	d105      	bne.n	8003d66 <__libc_init_array+0x2e>
 8003d5a:	bd70      	pop	{r4, r5, r6, pc}
 8003d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d60:	4798      	blx	r3
 8003d62:	3601      	adds	r6, #1
 8003d64:	e7ee      	b.n	8003d44 <__libc_init_array+0xc>
 8003d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d6a:	4798      	blx	r3
 8003d6c:	3601      	adds	r6, #1
 8003d6e:	e7f2      	b.n	8003d56 <__libc_init_array+0x1e>
 8003d70:	0800629c 	.word	0x0800629c
 8003d74:	0800629c 	.word	0x0800629c
 8003d78:	0800629c 	.word	0x0800629c
 8003d7c:	080062a0 	.word	0x080062a0

08003d80 <__retarget_lock_init_recursive>:
 8003d80:	4770      	bx	lr

08003d82 <__retarget_lock_acquire_recursive>:
 8003d82:	4770      	bx	lr

08003d84 <__retarget_lock_release_recursive>:
 8003d84:	4770      	bx	lr

08003d86 <quorem>:
 8003d86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d8a:	6903      	ldr	r3, [r0, #16]
 8003d8c:	690c      	ldr	r4, [r1, #16]
 8003d8e:	42a3      	cmp	r3, r4
 8003d90:	4607      	mov	r7, r0
 8003d92:	db7e      	blt.n	8003e92 <quorem+0x10c>
 8003d94:	3c01      	subs	r4, #1
 8003d96:	f101 0814 	add.w	r8, r1, #20
 8003d9a:	f100 0514 	add.w	r5, r0, #20
 8003d9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003da8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003dac:	3301      	adds	r3, #1
 8003dae:	429a      	cmp	r2, r3
 8003db0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003db4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003db8:	fbb2 f6f3 	udiv	r6, r2, r3
 8003dbc:	d331      	bcc.n	8003e22 <quorem+0x9c>
 8003dbe:	f04f 0e00 	mov.w	lr, #0
 8003dc2:	4640      	mov	r0, r8
 8003dc4:	46ac      	mov	ip, r5
 8003dc6:	46f2      	mov	sl, lr
 8003dc8:	f850 2b04 	ldr.w	r2, [r0], #4
 8003dcc:	b293      	uxth	r3, r2
 8003dce:	fb06 e303 	mla	r3, r6, r3, lr
 8003dd2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003dd6:	0c1a      	lsrs	r2, r3, #16
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	ebaa 0303 	sub.w	r3, sl, r3
 8003dde:	f8dc a000 	ldr.w	sl, [ip]
 8003de2:	fa13 f38a 	uxtah	r3, r3, sl
 8003de6:	fb06 220e 	mla	r2, r6, lr, r2
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	9b00      	ldr	r3, [sp, #0]
 8003dee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003df2:	b292      	uxth	r2, r2
 8003df4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003df8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003dfc:	f8bd 3000 	ldrh.w	r3, [sp]
 8003e00:	4581      	cmp	r9, r0
 8003e02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e06:	f84c 3b04 	str.w	r3, [ip], #4
 8003e0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003e0e:	d2db      	bcs.n	8003dc8 <quorem+0x42>
 8003e10:	f855 300b 	ldr.w	r3, [r5, fp]
 8003e14:	b92b      	cbnz	r3, 8003e22 <quorem+0x9c>
 8003e16:	9b01      	ldr	r3, [sp, #4]
 8003e18:	3b04      	subs	r3, #4
 8003e1a:	429d      	cmp	r5, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	d32c      	bcc.n	8003e7a <quorem+0xf4>
 8003e20:	613c      	str	r4, [r7, #16]
 8003e22:	4638      	mov	r0, r7
 8003e24:	f001 f9a6 	bl	8005174 <__mcmp>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	db22      	blt.n	8003e72 <quorem+0xec>
 8003e2c:	3601      	adds	r6, #1
 8003e2e:	4629      	mov	r1, r5
 8003e30:	2000      	movs	r0, #0
 8003e32:	f858 2b04 	ldr.w	r2, [r8], #4
 8003e36:	f8d1 c000 	ldr.w	ip, [r1]
 8003e3a:	b293      	uxth	r3, r2
 8003e3c:	1ac3      	subs	r3, r0, r3
 8003e3e:	0c12      	lsrs	r2, r2, #16
 8003e40:	fa13 f38c 	uxtah	r3, r3, ip
 8003e44:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003e48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e52:	45c1      	cmp	r9, r8
 8003e54:	f841 3b04 	str.w	r3, [r1], #4
 8003e58:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003e5c:	d2e9      	bcs.n	8003e32 <quorem+0xac>
 8003e5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e66:	b922      	cbnz	r2, 8003e72 <quorem+0xec>
 8003e68:	3b04      	subs	r3, #4
 8003e6a:	429d      	cmp	r5, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	d30a      	bcc.n	8003e86 <quorem+0x100>
 8003e70:	613c      	str	r4, [r7, #16]
 8003e72:	4630      	mov	r0, r6
 8003e74:	b003      	add	sp, #12
 8003e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	3b04      	subs	r3, #4
 8003e7e:	2a00      	cmp	r2, #0
 8003e80:	d1ce      	bne.n	8003e20 <quorem+0x9a>
 8003e82:	3c01      	subs	r4, #1
 8003e84:	e7c9      	b.n	8003e1a <quorem+0x94>
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	3b04      	subs	r3, #4
 8003e8a:	2a00      	cmp	r2, #0
 8003e8c:	d1f0      	bne.n	8003e70 <quorem+0xea>
 8003e8e:	3c01      	subs	r4, #1
 8003e90:	e7eb      	b.n	8003e6a <quorem+0xe4>
 8003e92:	2000      	movs	r0, #0
 8003e94:	e7ee      	b.n	8003e74 <quorem+0xee>
	...

08003e98 <_dtoa_r>:
 8003e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e9c:	ed2d 8b04 	vpush	{d8-d9}
 8003ea0:	69c5      	ldr	r5, [r0, #28]
 8003ea2:	b093      	sub	sp, #76	; 0x4c
 8003ea4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003ea8:	ec57 6b10 	vmov	r6, r7, d0
 8003eac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003eb0:	9107      	str	r1, [sp, #28]
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	920a      	str	r2, [sp, #40]	; 0x28
 8003eb6:	930d      	str	r3, [sp, #52]	; 0x34
 8003eb8:	b975      	cbnz	r5, 8003ed8 <_dtoa_r+0x40>
 8003eba:	2010      	movs	r0, #16
 8003ebc:	f000 fe2a 	bl	8004b14 <malloc>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	61e0      	str	r0, [r4, #28]
 8003ec4:	b920      	cbnz	r0, 8003ed0 <_dtoa_r+0x38>
 8003ec6:	4bae      	ldr	r3, [pc, #696]	; (8004180 <_dtoa_r+0x2e8>)
 8003ec8:	21ef      	movs	r1, #239	; 0xef
 8003eca:	48ae      	ldr	r0, [pc, #696]	; (8004184 <_dtoa_r+0x2ec>)
 8003ecc:	f001 fc90 	bl	80057f0 <__assert_func>
 8003ed0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003ed4:	6005      	str	r5, [r0, #0]
 8003ed6:	60c5      	str	r5, [r0, #12]
 8003ed8:	69e3      	ldr	r3, [r4, #28]
 8003eda:	6819      	ldr	r1, [r3, #0]
 8003edc:	b151      	cbz	r1, 8003ef4 <_dtoa_r+0x5c>
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	604a      	str	r2, [r1, #4]
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	4093      	lsls	r3, r2
 8003ee6:	608b      	str	r3, [r1, #8]
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f000 ff07 	bl	8004cfc <_Bfree>
 8003eee:	69e3      	ldr	r3, [r4, #28]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	1e3b      	subs	r3, r7, #0
 8003ef6:	bfbb      	ittet	lt
 8003ef8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003efc:	9303      	strlt	r3, [sp, #12]
 8003efe:	2300      	movge	r3, #0
 8003f00:	2201      	movlt	r2, #1
 8003f02:	bfac      	ite	ge
 8003f04:	f8c8 3000 	strge.w	r3, [r8]
 8003f08:	f8c8 2000 	strlt.w	r2, [r8]
 8003f0c:	4b9e      	ldr	r3, [pc, #632]	; (8004188 <_dtoa_r+0x2f0>)
 8003f0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003f12:	ea33 0308 	bics.w	r3, r3, r8
 8003f16:	d11b      	bne.n	8003f50 <_dtoa_r+0xb8>
 8003f18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003f1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003f24:	4333      	orrs	r3, r6
 8003f26:	f000 8593 	beq.w	8004a50 <_dtoa_r+0xbb8>
 8003f2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f2c:	b963      	cbnz	r3, 8003f48 <_dtoa_r+0xb0>
 8003f2e:	4b97      	ldr	r3, [pc, #604]	; (800418c <_dtoa_r+0x2f4>)
 8003f30:	e027      	b.n	8003f82 <_dtoa_r+0xea>
 8003f32:	4b97      	ldr	r3, [pc, #604]	; (8004190 <_dtoa_r+0x2f8>)
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	3308      	adds	r3, #8
 8003f38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	9800      	ldr	r0, [sp, #0]
 8003f3e:	b013      	add	sp, #76	; 0x4c
 8003f40:	ecbd 8b04 	vpop	{d8-d9}
 8003f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f48:	4b90      	ldr	r3, [pc, #576]	; (800418c <_dtoa_r+0x2f4>)
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	3303      	adds	r3, #3
 8003f4e:	e7f3      	b.n	8003f38 <_dtoa_r+0xa0>
 8003f50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003f54:	2200      	movs	r2, #0
 8003f56:	ec51 0b17 	vmov	r0, r1, d7
 8003f5a:	eeb0 8a47 	vmov.f32	s16, s14
 8003f5e:	eef0 8a67 	vmov.f32	s17, s15
 8003f62:	2300      	movs	r3, #0
 8003f64:	f7fc fdb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f68:	4681      	mov	r9, r0
 8003f6a:	b160      	cbz	r0, 8003f86 <_dtoa_r+0xee>
 8003f6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003f6e:	2301      	movs	r3, #1
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 8568 	beq.w	8004a4a <_dtoa_r+0xbb2>
 8003f7a:	4b86      	ldr	r3, [pc, #536]	; (8004194 <_dtoa_r+0x2fc>)
 8003f7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	e7da      	b.n	8003f3c <_dtoa_r+0xa4>
 8003f86:	aa10      	add	r2, sp, #64	; 0x40
 8003f88:	a911      	add	r1, sp, #68	; 0x44
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	eeb0 0a48 	vmov.f32	s0, s16
 8003f90:	eef0 0a68 	vmov.f32	s1, s17
 8003f94:	f001 f994 	bl	80052c0 <__d2b>
 8003f98:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003f9c:	4682      	mov	sl, r0
 8003f9e:	2d00      	cmp	r5, #0
 8003fa0:	d07f      	beq.n	80040a2 <_dtoa_r+0x20a>
 8003fa2:	ee18 3a90 	vmov	r3, s17
 8003fa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003faa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003fae:	ec51 0b18 	vmov	r0, r1, d8
 8003fb2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003fb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003fba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	4b75      	ldr	r3, [pc, #468]	; (8004198 <_dtoa_r+0x300>)
 8003fc4:	f7fc f960 	bl	8000288 <__aeabi_dsub>
 8003fc8:	a367      	add	r3, pc, #412	; (adr r3, 8004168 <_dtoa_r+0x2d0>)
 8003fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fce:	f7fc fb13 	bl	80005f8 <__aeabi_dmul>
 8003fd2:	a367      	add	r3, pc, #412	; (adr r3, 8004170 <_dtoa_r+0x2d8>)
 8003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd8:	f7fc f958 	bl	800028c <__adddf3>
 8003fdc:	4606      	mov	r6, r0
 8003fde:	4628      	mov	r0, r5
 8003fe0:	460f      	mov	r7, r1
 8003fe2:	f7fc fa9f 	bl	8000524 <__aeabi_i2d>
 8003fe6:	a364      	add	r3, pc, #400	; (adr r3, 8004178 <_dtoa_r+0x2e0>)
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	f7fc fb04 	bl	80005f8 <__aeabi_dmul>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	4639      	mov	r1, r7
 8003ff8:	f7fc f948 	bl	800028c <__adddf3>
 8003ffc:	4606      	mov	r6, r0
 8003ffe:	460f      	mov	r7, r1
 8004000:	f7fc fdaa 	bl	8000b58 <__aeabi_d2iz>
 8004004:	2200      	movs	r2, #0
 8004006:	4683      	mov	fp, r0
 8004008:	2300      	movs	r3, #0
 800400a:	4630      	mov	r0, r6
 800400c:	4639      	mov	r1, r7
 800400e:	f7fc fd65 	bl	8000adc <__aeabi_dcmplt>
 8004012:	b148      	cbz	r0, 8004028 <_dtoa_r+0x190>
 8004014:	4658      	mov	r0, fp
 8004016:	f7fc fa85 	bl	8000524 <__aeabi_i2d>
 800401a:	4632      	mov	r2, r6
 800401c:	463b      	mov	r3, r7
 800401e:	f7fc fd53 	bl	8000ac8 <__aeabi_dcmpeq>
 8004022:	b908      	cbnz	r0, 8004028 <_dtoa_r+0x190>
 8004024:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004028:	f1bb 0f16 	cmp.w	fp, #22
 800402c:	d857      	bhi.n	80040de <_dtoa_r+0x246>
 800402e:	4b5b      	ldr	r3, [pc, #364]	; (800419c <_dtoa_r+0x304>)
 8004030:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004038:	ec51 0b18 	vmov	r0, r1, d8
 800403c:	f7fc fd4e 	bl	8000adc <__aeabi_dcmplt>
 8004040:	2800      	cmp	r0, #0
 8004042:	d04e      	beq.n	80040e2 <_dtoa_r+0x24a>
 8004044:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004048:	2300      	movs	r3, #0
 800404a:	930c      	str	r3, [sp, #48]	; 0x30
 800404c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800404e:	1b5b      	subs	r3, r3, r5
 8004050:	1e5a      	subs	r2, r3, #1
 8004052:	bf45      	ittet	mi
 8004054:	f1c3 0301 	rsbmi	r3, r3, #1
 8004058:	9305      	strmi	r3, [sp, #20]
 800405a:	2300      	movpl	r3, #0
 800405c:	2300      	movmi	r3, #0
 800405e:	9206      	str	r2, [sp, #24]
 8004060:	bf54      	ite	pl
 8004062:	9305      	strpl	r3, [sp, #20]
 8004064:	9306      	strmi	r3, [sp, #24]
 8004066:	f1bb 0f00 	cmp.w	fp, #0
 800406a:	db3c      	blt.n	80040e6 <_dtoa_r+0x24e>
 800406c:	9b06      	ldr	r3, [sp, #24]
 800406e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004072:	445b      	add	r3, fp
 8004074:	9306      	str	r3, [sp, #24]
 8004076:	2300      	movs	r3, #0
 8004078:	9308      	str	r3, [sp, #32]
 800407a:	9b07      	ldr	r3, [sp, #28]
 800407c:	2b09      	cmp	r3, #9
 800407e:	d868      	bhi.n	8004152 <_dtoa_r+0x2ba>
 8004080:	2b05      	cmp	r3, #5
 8004082:	bfc4      	itt	gt
 8004084:	3b04      	subgt	r3, #4
 8004086:	9307      	strgt	r3, [sp, #28]
 8004088:	9b07      	ldr	r3, [sp, #28]
 800408a:	f1a3 0302 	sub.w	r3, r3, #2
 800408e:	bfcc      	ite	gt
 8004090:	2500      	movgt	r5, #0
 8004092:	2501      	movle	r5, #1
 8004094:	2b03      	cmp	r3, #3
 8004096:	f200 8085 	bhi.w	80041a4 <_dtoa_r+0x30c>
 800409a:	e8df f003 	tbb	[pc, r3]
 800409e:	3b2e      	.short	0x3b2e
 80040a0:	5839      	.short	0x5839
 80040a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80040a6:	441d      	add	r5, r3
 80040a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	bfc1      	itttt	gt
 80040b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80040b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80040b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80040bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80040c0:	bfd6      	itet	le
 80040c2:	f1c3 0320 	rsble	r3, r3, #32
 80040c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80040ca:	fa06 f003 	lslle.w	r0, r6, r3
 80040ce:	f7fc fa19 	bl	8000504 <__aeabi_ui2d>
 80040d2:	2201      	movs	r2, #1
 80040d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80040d8:	3d01      	subs	r5, #1
 80040da:	920e      	str	r2, [sp, #56]	; 0x38
 80040dc:	e76f      	b.n	8003fbe <_dtoa_r+0x126>
 80040de:	2301      	movs	r3, #1
 80040e0:	e7b3      	b.n	800404a <_dtoa_r+0x1b2>
 80040e2:	900c      	str	r0, [sp, #48]	; 0x30
 80040e4:	e7b2      	b.n	800404c <_dtoa_r+0x1b4>
 80040e6:	9b05      	ldr	r3, [sp, #20]
 80040e8:	eba3 030b 	sub.w	r3, r3, fp
 80040ec:	9305      	str	r3, [sp, #20]
 80040ee:	f1cb 0300 	rsb	r3, fp, #0
 80040f2:	9308      	str	r3, [sp, #32]
 80040f4:	2300      	movs	r3, #0
 80040f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80040f8:	e7bf      	b.n	800407a <_dtoa_r+0x1e2>
 80040fa:	2300      	movs	r3, #0
 80040fc:	9309      	str	r3, [sp, #36]	; 0x24
 80040fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004100:	2b00      	cmp	r3, #0
 8004102:	dc52      	bgt.n	80041aa <_dtoa_r+0x312>
 8004104:	2301      	movs	r3, #1
 8004106:	9301      	str	r3, [sp, #4]
 8004108:	9304      	str	r3, [sp, #16]
 800410a:	461a      	mov	r2, r3
 800410c:	920a      	str	r2, [sp, #40]	; 0x28
 800410e:	e00b      	b.n	8004128 <_dtoa_r+0x290>
 8004110:	2301      	movs	r3, #1
 8004112:	e7f3      	b.n	80040fc <_dtoa_r+0x264>
 8004114:	2300      	movs	r3, #0
 8004116:	9309      	str	r3, [sp, #36]	; 0x24
 8004118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800411a:	445b      	add	r3, fp
 800411c:	9301      	str	r3, [sp, #4]
 800411e:	3301      	adds	r3, #1
 8004120:	2b01      	cmp	r3, #1
 8004122:	9304      	str	r3, [sp, #16]
 8004124:	bfb8      	it	lt
 8004126:	2301      	movlt	r3, #1
 8004128:	69e0      	ldr	r0, [r4, #28]
 800412a:	2100      	movs	r1, #0
 800412c:	2204      	movs	r2, #4
 800412e:	f102 0614 	add.w	r6, r2, #20
 8004132:	429e      	cmp	r6, r3
 8004134:	d93d      	bls.n	80041b2 <_dtoa_r+0x31a>
 8004136:	6041      	str	r1, [r0, #4]
 8004138:	4620      	mov	r0, r4
 800413a:	f000 fd9f 	bl	8004c7c <_Balloc>
 800413e:	9000      	str	r0, [sp, #0]
 8004140:	2800      	cmp	r0, #0
 8004142:	d139      	bne.n	80041b8 <_dtoa_r+0x320>
 8004144:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <_dtoa_r+0x308>)
 8004146:	4602      	mov	r2, r0
 8004148:	f240 11af 	movw	r1, #431	; 0x1af
 800414c:	e6bd      	b.n	8003eca <_dtoa_r+0x32>
 800414e:	2301      	movs	r3, #1
 8004150:	e7e1      	b.n	8004116 <_dtoa_r+0x27e>
 8004152:	2501      	movs	r5, #1
 8004154:	2300      	movs	r3, #0
 8004156:	9307      	str	r3, [sp, #28]
 8004158:	9509      	str	r5, [sp, #36]	; 0x24
 800415a:	f04f 33ff 	mov.w	r3, #4294967295
 800415e:	9301      	str	r3, [sp, #4]
 8004160:	9304      	str	r3, [sp, #16]
 8004162:	2200      	movs	r2, #0
 8004164:	2312      	movs	r3, #18
 8004166:	e7d1      	b.n	800410c <_dtoa_r+0x274>
 8004168:	636f4361 	.word	0x636f4361
 800416c:	3fd287a7 	.word	0x3fd287a7
 8004170:	8b60c8b3 	.word	0x8b60c8b3
 8004174:	3fc68a28 	.word	0x3fc68a28
 8004178:	509f79fb 	.word	0x509f79fb
 800417c:	3fd34413 	.word	0x3fd34413
 8004180:	08005f68 	.word	0x08005f68
 8004184:	08005f7f 	.word	0x08005f7f
 8004188:	7ff00000 	.word	0x7ff00000
 800418c:	08005f64 	.word	0x08005f64
 8004190:	08005f5b 	.word	0x08005f5b
 8004194:	08005f38 	.word	0x08005f38
 8004198:	3ff80000 	.word	0x3ff80000
 800419c:	08006070 	.word	0x08006070
 80041a0:	08005fd7 	.word	0x08005fd7
 80041a4:	2301      	movs	r3, #1
 80041a6:	9309      	str	r3, [sp, #36]	; 0x24
 80041a8:	e7d7      	b.n	800415a <_dtoa_r+0x2c2>
 80041aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	9304      	str	r3, [sp, #16]
 80041b0:	e7ba      	b.n	8004128 <_dtoa_r+0x290>
 80041b2:	3101      	adds	r1, #1
 80041b4:	0052      	lsls	r2, r2, #1
 80041b6:	e7ba      	b.n	800412e <_dtoa_r+0x296>
 80041b8:	69e3      	ldr	r3, [r4, #28]
 80041ba:	9a00      	ldr	r2, [sp, #0]
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	9b04      	ldr	r3, [sp, #16]
 80041c0:	2b0e      	cmp	r3, #14
 80041c2:	f200 80a8 	bhi.w	8004316 <_dtoa_r+0x47e>
 80041c6:	2d00      	cmp	r5, #0
 80041c8:	f000 80a5 	beq.w	8004316 <_dtoa_r+0x47e>
 80041cc:	f1bb 0f00 	cmp.w	fp, #0
 80041d0:	dd38      	ble.n	8004244 <_dtoa_r+0x3ac>
 80041d2:	4bc0      	ldr	r3, [pc, #768]	; (80044d4 <_dtoa_r+0x63c>)
 80041d4:	f00b 020f 	and.w	r2, fp, #15
 80041d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80041dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80041e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80041e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80041e8:	d019      	beq.n	800421e <_dtoa_r+0x386>
 80041ea:	4bbb      	ldr	r3, [pc, #748]	; (80044d8 <_dtoa_r+0x640>)
 80041ec:	ec51 0b18 	vmov	r0, r1, d8
 80041f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80041f4:	f7fc fb2a 	bl	800084c <__aeabi_ddiv>
 80041f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041fc:	f008 080f 	and.w	r8, r8, #15
 8004200:	2503      	movs	r5, #3
 8004202:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80044d8 <_dtoa_r+0x640>
 8004206:	f1b8 0f00 	cmp.w	r8, #0
 800420a:	d10a      	bne.n	8004222 <_dtoa_r+0x38a>
 800420c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004210:	4632      	mov	r2, r6
 8004212:	463b      	mov	r3, r7
 8004214:	f7fc fb1a 	bl	800084c <__aeabi_ddiv>
 8004218:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800421c:	e02b      	b.n	8004276 <_dtoa_r+0x3de>
 800421e:	2502      	movs	r5, #2
 8004220:	e7ef      	b.n	8004202 <_dtoa_r+0x36a>
 8004222:	f018 0f01 	tst.w	r8, #1
 8004226:	d008      	beq.n	800423a <_dtoa_r+0x3a2>
 8004228:	4630      	mov	r0, r6
 800422a:	4639      	mov	r1, r7
 800422c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004230:	f7fc f9e2 	bl	80005f8 <__aeabi_dmul>
 8004234:	3501      	adds	r5, #1
 8004236:	4606      	mov	r6, r0
 8004238:	460f      	mov	r7, r1
 800423a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800423e:	f109 0908 	add.w	r9, r9, #8
 8004242:	e7e0      	b.n	8004206 <_dtoa_r+0x36e>
 8004244:	f000 809f 	beq.w	8004386 <_dtoa_r+0x4ee>
 8004248:	f1cb 0600 	rsb	r6, fp, #0
 800424c:	4ba1      	ldr	r3, [pc, #644]	; (80044d4 <_dtoa_r+0x63c>)
 800424e:	4fa2      	ldr	r7, [pc, #648]	; (80044d8 <_dtoa_r+0x640>)
 8004250:	f006 020f 	and.w	r2, r6, #15
 8004254:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425c:	ec51 0b18 	vmov	r0, r1, d8
 8004260:	f7fc f9ca 	bl	80005f8 <__aeabi_dmul>
 8004264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004268:	1136      	asrs	r6, r6, #4
 800426a:	2300      	movs	r3, #0
 800426c:	2502      	movs	r5, #2
 800426e:	2e00      	cmp	r6, #0
 8004270:	d17e      	bne.n	8004370 <_dtoa_r+0x4d8>
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1d0      	bne.n	8004218 <_dtoa_r+0x380>
 8004276:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004278:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 8084 	beq.w	800438a <_dtoa_r+0x4f2>
 8004282:	4b96      	ldr	r3, [pc, #600]	; (80044dc <_dtoa_r+0x644>)
 8004284:	2200      	movs	r2, #0
 8004286:	4640      	mov	r0, r8
 8004288:	4649      	mov	r1, r9
 800428a:	f7fc fc27 	bl	8000adc <__aeabi_dcmplt>
 800428e:	2800      	cmp	r0, #0
 8004290:	d07b      	beq.n	800438a <_dtoa_r+0x4f2>
 8004292:	9b04      	ldr	r3, [sp, #16]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d078      	beq.n	800438a <_dtoa_r+0x4f2>
 8004298:	9b01      	ldr	r3, [sp, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	dd39      	ble.n	8004312 <_dtoa_r+0x47a>
 800429e:	4b90      	ldr	r3, [pc, #576]	; (80044e0 <_dtoa_r+0x648>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	4640      	mov	r0, r8
 80042a4:	4649      	mov	r1, r9
 80042a6:	f7fc f9a7 	bl	80005f8 <__aeabi_dmul>
 80042aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042ae:	9e01      	ldr	r6, [sp, #4]
 80042b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80042b4:	3501      	adds	r5, #1
 80042b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80042ba:	4628      	mov	r0, r5
 80042bc:	f7fc f932 	bl	8000524 <__aeabi_i2d>
 80042c0:	4642      	mov	r2, r8
 80042c2:	464b      	mov	r3, r9
 80042c4:	f7fc f998 	bl	80005f8 <__aeabi_dmul>
 80042c8:	4b86      	ldr	r3, [pc, #536]	; (80044e4 <_dtoa_r+0x64c>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	f7fb ffde 	bl	800028c <__adddf3>
 80042d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80042d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042d8:	9303      	str	r3, [sp, #12]
 80042da:	2e00      	cmp	r6, #0
 80042dc:	d158      	bne.n	8004390 <_dtoa_r+0x4f8>
 80042de:	4b82      	ldr	r3, [pc, #520]	; (80044e8 <_dtoa_r+0x650>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	4640      	mov	r0, r8
 80042e4:	4649      	mov	r1, r9
 80042e6:	f7fb ffcf 	bl	8000288 <__aeabi_dsub>
 80042ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042ee:	4680      	mov	r8, r0
 80042f0:	4689      	mov	r9, r1
 80042f2:	f7fc fc11 	bl	8000b18 <__aeabi_dcmpgt>
 80042f6:	2800      	cmp	r0, #0
 80042f8:	f040 8296 	bne.w	8004828 <_dtoa_r+0x990>
 80042fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004300:	4640      	mov	r0, r8
 8004302:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004306:	4649      	mov	r1, r9
 8004308:	f7fc fbe8 	bl	8000adc <__aeabi_dcmplt>
 800430c:	2800      	cmp	r0, #0
 800430e:	f040 8289 	bne.w	8004824 <_dtoa_r+0x98c>
 8004312:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004316:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004318:	2b00      	cmp	r3, #0
 800431a:	f2c0 814e 	blt.w	80045ba <_dtoa_r+0x722>
 800431e:	f1bb 0f0e 	cmp.w	fp, #14
 8004322:	f300 814a 	bgt.w	80045ba <_dtoa_r+0x722>
 8004326:	4b6b      	ldr	r3, [pc, #428]	; (80044d4 <_dtoa_r+0x63c>)
 8004328:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800432c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004332:	2b00      	cmp	r3, #0
 8004334:	f280 80dc 	bge.w	80044f0 <_dtoa_r+0x658>
 8004338:	9b04      	ldr	r3, [sp, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	f300 80d8 	bgt.w	80044f0 <_dtoa_r+0x658>
 8004340:	f040 826f 	bne.w	8004822 <_dtoa_r+0x98a>
 8004344:	4b68      	ldr	r3, [pc, #416]	; (80044e8 <_dtoa_r+0x650>)
 8004346:	2200      	movs	r2, #0
 8004348:	4640      	mov	r0, r8
 800434a:	4649      	mov	r1, r9
 800434c:	f7fc f954 	bl	80005f8 <__aeabi_dmul>
 8004350:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004354:	f7fc fbd6 	bl	8000b04 <__aeabi_dcmpge>
 8004358:	9e04      	ldr	r6, [sp, #16]
 800435a:	4637      	mov	r7, r6
 800435c:	2800      	cmp	r0, #0
 800435e:	f040 8245 	bne.w	80047ec <_dtoa_r+0x954>
 8004362:	9d00      	ldr	r5, [sp, #0]
 8004364:	2331      	movs	r3, #49	; 0x31
 8004366:	f805 3b01 	strb.w	r3, [r5], #1
 800436a:	f10b 0b01 	add.w	fp, fp, #1
 800436e:	e241      	b.n	80047f4 <_dtoa_r+0x95c>
 8004370:	07f2      	lsls	r2, r6, #31
 8004372:	d505      	bpl.n	8004380 <_dtoa_r+0x4e8>
 8004374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004378:	f7fc f93e 	bl	80005f8 <__aeabi_dmul>
 800437c:	3501      	adds	r5, #1
 800437e:	2301      	movs	r3, #1
 8004380:	1076      	asrs	r6, r6, #1
 8004382:	3708      	adds	r7, #8
 8004384:	e773      	b.n	800426e <_dtoa_r+0x3d6>
 8004386:	2502      	movs	r5, #2
 8004388:	e775      	b.n	8004276 <_dtoa_r+0x3de>
 800438a:	9e04      	ldr	r6, [sp, #16]
 800438c:	465f      	mov	r7, fp
 800438e:	e792      	b.n	80042b6 <_dtoa_r+0x41e>
 8004390:	9900      	ldr	r1, [sp, #0]
 8004392:	4b50      	ldr	r3, [pc, #320]	; (80044d4 <_dtoa_r+0x63c>)
 8004394:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004398:	4431      	add	r1, r6
 800439a:	9102      	str	r1, [sp, #8]
 800439c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800439e:	eeb0 9a47 	vmov.f32	s18, s14
 80043a2:	eef0 9a67 	vmov.f32	s19, s15
 80043a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80043aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80043ae:	2900      	cmp	r1, #0
 80043b0:	d044      	beq.n	800443c <_dtoa_r+0x5a4>
 80043b2:	494e      	ldr	r1, [pc, #312]	; (80044ec <_dtoa_r+0x654>)
 80043b4:	2000      	movs	r0, #0
 80043b6:	f7fc fa49 	bl	800084c <__aeabi_ddiv>
 80043ba:	ec53 2b19 	vmov	r2, r3, d9
 80043be:	f7fb ff63 	bl	8000288 <__aeabi_dsub>
 80043c2:	9d00      	ldr	r5, [sp, #0]
 80043c4:	ec41 0b19 	vmov	d9, r0, r1
 80043c8:	4649      	mov	r1, r9
 80043ca:	4640      	mov	r0, r8
 80043cc:	f7fc fbc4 	bl	8000b58 <__aeabi_d2iz>
 80043d0:	4606      	mov	r6, r0
 80043d2:	f7fc f8a7 	bl	8000524 <__aeabi_i2d>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4640      	mov	r0, r8
 80043dc:	4649      	mov	r1, r9
 80043de:	f7fb ff53 	bl	8000288 <__aeabi_dsub>
 80043e2:	3630      	adds	r6, #48	; 0x30
 80043e4:	f805 6b01 	strb.w	r6, [r5], #1
 80043e8:	ec53 2b19 	vmov	r2, r3, d9
 80043ec:	4680      	mov	r8, r0
 80043ee:	4689      	mov	r9, r1
 80043f0:	f7fc fb74 	bl	8000adc <__aeabi_dcmplt>
 80043f4:	2800      	cmp	r0, #0
 80043f6:	d164      	bne.n	80044c2 <_dtoa_r+0x62a>
 80043f8:	4642      	mov	r2, r8
 80043fa:	464b      	mov	r3, r9
 80043fc:	4937      	ldr	r1, [pc, #220]	; (80044dc <_dtoa_r+0x644>)
 80043fe:	2000      	movs	r0, #0
 8004400:	f7fb ff42 	bl	8000288 <__aeabi_dsub>
 8004404:	ec53 2b19 	vmov	r2, r3, d9
 8004408:	f7fc fb68 	bl	8000adc <__aeabi_dcmplt>
 800440c:	2800      	cmp	r0, #0
 800440e:	f040 80b6 	bne.w	800457e <_dtoa_r+0x6e6>
 8004412:	9b02      	ldr	r3, [sp, #8]
 8004414:	429d      	cmp	r5, r3
 8004416:	f43f af7c 	beq.w	8004312 <_dtoa_r+0x47a>
 800441a:	4b31      	ldr	r3, [pc, #196]	; (80044e0 <_dtoa_r+0x648>)
 800441c:	ec51 0b19 	vmov	r0, r1, d9
 8004420:	2200      	movs	r2, #0
 8004422:	f7fc f8e9 	bl	80005f8 <__aeabi_dmul>
 8004426:	4b2e      	ldr	r3, [pc, #184]	; (80044e0 <_dtoa_r+0x648>)
 8004428:	ec41 0b19 	vmov	d9, r0, r1
 800442c:	2200      	movs	r2, #0
 800442e:	4640      	mov	r0, r8
 8004430:	4649      	mov	r1, r9
 8004432:	f7fc f8e1 	bl	80005f8 <__aeabi_dmul>
 8004436:	4680      	mov	r8, r0
 8004438:	4689      	mov	r9, r1
 800443a:	e7c5      	b.n	80043c8 <_dtoa_r+0x530>
 800443c:	ec51 0b17 	vmov	r0, r1, d7
 8004440:	f7fc f8da 	bl	80005f8 <__aeabi_dmul>
 8004444:	9b02      	ldr	r3, [sp, #8]
 8004446:	9d00      	ldr	r5, [sp, #0]
 8004448:	930f      	str	r3, [sp, #60]	; 0x3c
 800444a:	ec41 0b19 	vmov	d9, r0, r1
 800444e:	4649      	mov	r1, r9
 8004450:	4640      	mov	r0, r8
 8004452:	f7fc fb81 	bl	8000b58 <__aeabi_d2iz>
 8004456:	4606      	mov	r6, r0
 8004458:	f7fc f864 	bl	8000524 <__aeabi_i2d>
 800445c:	3630      	adds	r6, #48	; 0x30
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	4640      	mov	r0, r8
 8004464:	4649      	mov	r1, r9
 8004466:	f7fb ff0f 	bl	8000288 <__aeabi_dsub>
 800446a:	f805 6b01 	strb.w	r6, [r5], #1
 800446e:	9b02      	ldr	r3, [sp, #8]
 8004470:	429d      	cmp	r5, r3
 8004472:	4680      	mov	r8, r0
 8004474:	4689      	mov	r9, r1
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	d124      	bne.n	80044c6 <_dtoa_r+0x62e>
 800447c:	4b1b      	ldr	r3, [pc, #108]	; (80044ec <_dtoa_r+0x654>)
 800447e:	ec51 0b19 	vmov	r0, r1, d9
 8004482:	f7fb ff03 	bl	800028c <__adddf3>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	4640      	mov	r0, r8
 800448c:	4649      	mov	r1, r9
 800448e:	f7fc fb43 	bl	8000b18 <__aeabi_dcmpgt>
 8004492:	2800      	cmp	r0, #0
 8004494:	d173      	bne.n	800457e <_dtoa_r+0x6e6>
 8004496:	ec53 2b19 	vmov	r2, r3, d9
 800449a:	4914      	ldr	r1, [pc, #80]	; (80044ec <_dtoa_r+0x654>)
 800449c:	2000      	movs	r0, #0
 800449e:	f7fb fef3 	bl	8000288 <__aeabi_dsub>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4640      	mov	r0, r8
 80044a8:	4649      	mov	r1, r9
 80044aa:	f7fc fb17 	bl	8000adc <__aeabi_dcmplt>
 80044ae:	2800      	cmp	r0, #0
 80044b0:	f43f af2f 	beq.w	8004312 <_dtoa_r+0x47a>
 80044b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80044b6:	1e6b      	subs	r3, r5, #1
 80044b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80044ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80044be:	2b30      	cmp	r3, #48	; 0x30
 80044c0:	d0f8      	beq.n	80044b4 <_dtoa_r+0x61c>
 80044c2:	46bb      	mov	fp, r7
 80044c4:	e04a      	b.n	800455c <_dtoa_r+0x6c4>
 80044c6:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <_dtoa_r+0x648>)
 80044c8:	f7fc f896 	bl	80005f8 <__aeabi_dmul>
 80044cc:	4680      	mov	r8, r0
 80044ce:	4689      	mov	r9, r1
 80044d0:	e7bd      	b.n	800444e <_dtoa_r+0x5b6>
 80044d2:	bf00      	nop
 80044d4:	08006070 	.word	0x08006070
 80044d8:	08006048 	.word	0x08006048
 80044dc:	3ff00000 	.word	0x3ff00000
 80044e0:	40240000 	.word	0x40240000
 80044e4:	401c0000 	.word	0x401c0000
 80044e8:	40140000 	.word	0x40140000
 80044ec:	3fe00000 	.word	0x3fe00000
 80044f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80044f4:	9d00      	ldr	r5, [sp, #0]
 80044f6:	4642      	mov	r2, r8
 80044f8:	464b      	mov	r3, r9
 80044fa:	4630      	mov	r0, r6
 80044fc:	4639      	mov	r1, r7
 80044fe:	f7fc f9a5 	bl	800084c <__aeabi_ddiv>
 8004502:	f7fc fb29 	bl	8000b58 <__aeabi_d2iz>
 8004506:	9001      	str	r0, [sp, #4]
 8004508:	f7fc f80c 	bl	8000524 <__aeabi_i2d>
 800450c:	4642      	mov	r2, r8
 800450e:	464b      	mov	r3, r9
 8004510:	f7fc f872 	bl	80005f8 <__aeabi_dmul>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4630      	mov	r0, r6
 800451a:	4639      	mov	r1, r7
 800451c:	f7fb feb4 	bl	8000288 <__aeabi_dsub>
 8004520:	9e01      	ldr	r6, [sp, #4]
 8004522:	9f04      	ldr	r7, [sp, #16]
 8004524:	3630      	adds	r6, #48	; 0x30
 8004526:	f805 6b01 	strb.w	r6, [r5], #1
 800452a:	9e00      	ldr	r6, [sp, #0]
 800452c:	1bae      	subs	r6, r5, r6
 800452e:	42b7      	cmp	r7, r6
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	d134      	bne.n	80045a0 <_dtoa_r+0x708>
 8004536:	f7fb fea9 	bl	800028c <__adddf3>
 800453a:	4642      	mov	r2, r8
 800453c:	464b      	mov	r3, r9
 800453e:	4606      	mov	r6, r0
 8004540:	460f      	mov	r7, r1
 8004542:	f7fc fae9 	bl	8000b18 <__aeabi_dcmpgt>
 8004546:	b9c8      	cbnz	r0, 800457c <_dtoa_r+0x6e4>
 8004548:	4642      	mov	r2, r8
 800454a:	464b      	mov	r3, r9
 800454c:	4630      	mov	r0, r6
 800454e:	4639      	mov	r1, r7
 8004550:	f7fc faba 	bl	8000ac8 <__aeabi_dcmpeq>
 8004554:	b110      	cbz	r0, 800455c <_dtoa_r+0x6c4>
 8004556:	9b01      	ldr	r3, [sp, #4]
 8004558:	07db      	lsls	r3, r3, #31
 800455a:	d40f      	bmi.n	800457c <_dtoa_r+0x6e4>
 800455c:	4651      	mov	r1, sl
 800455e:	4620      	mov	r0, r4
 8004560:	f000 fbcc 	bl	8004cfc <_Bfree>
 8004564:	2300      	movs	r3, #0
 8004566:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004568:	702b      	strb	r3, [r5, #0]
 800456a:	f10b 0301 	add.w	r3, fp, #1
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004572:	2b00      	cmp	r3, #0
 8004574:	f43f ace2 	beq.w	8003f3c <_dtoa_r+0xa4>
 8004578:	601d      	str	r5, [r3, #0]
 800457a:	e4df      	b.n	8003f3c <_dtoa_r+0xa4>
 800457c:	465f      	mov	r7, fp
 800457e:	462b      	mov	r3, r5
 8004580:	461d      	mov	r5, r3
 8004582:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004586:	2a39      	cmp	r2, #57	; 0x39
 8004588:	d106      	bne.n	8004598 <_dtoa_r+0x700>
 800458a:	9a00      	ldr	r2, [sp, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d1f7      	bne.n	8004580 <_dtoa_r+0x6e8>
 8004590:	9900      	ldr	r1, [sp, #0]
 8004592:	2230      	movs	r2, #48	; 0x30
 8004594:	3701      	adds	r7, #1
 8004596:	700a      	strb	r2, [r1, #0]
 8004598:	781a      	ldrb	r2, [r3, #0]
 800459a:	3201      	adds	r2, #1
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	e790      	b.n	80044c2 <_dtoa_r+0x62a>
 80045a0:	4ba3      	ldr	r3, [pc, #652]	; (8004830 <_dtoa_r+0x998>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	f7fc f828 	bl	80005f8 <__aeabi_dmul>
 80045a8:	2200      	movs	r2, #0
 80045aa:	2300      	movs	r3, #0
 80045ac:	4606      	mov	r6, r0
 80045ae:	460f      	mov	r7, r1
 80045b0:	f7fc fa8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d09e      	beq.n	80044f6 <_dtoa_r+0x65e>
 80045b8:	e7d0      	b.n	800455c <_dtoa_r+0x6c4>
 80045ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045bc:	2a00      	cmp	r2, #0
 80045be:	f000 80ca 	beq.w	8004756 <_dtoa_r+0x8be>
 80045c2:	9a07      	ldr	r2, [sp, #28]
 80045c4:	2a01      	cmp	r2, #1
 80045c6:	f300 80ad 	bgt.w	8004724 <_dtoa_r+0x88c>
 80045ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045cc:	2a00      	cmp	r2, #0
 80045ce:	f000 80a5 	beq.w	800471c <_dtoa_r+0x884>
 80045d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80045d6:	9e08      	ldr	r6, [sp, #32]
 80045d8:	9d05      	ldr	r5, [sp, #20]
 80045da:	9a05      	ldr	r2, [sp, #20]
 80045dc:	441a      	add	r2, r3
 80045de:	9205      	str	r2, [sp, #20]
 80045e0:	9a06      	ldr	r2, [sp, #24]
 80045e2:	2101      	movs	r1, #1
 80045e4:	441a      	add	r2, r3
 80045e6:	4620      	mov	r0, r4
 80045e8:	9206      	str	r2, [sp, #24]
 80045ea:	f000 fc3d 	bl	8004e68 <__i2b>
 80045ee:	4607      	mov	r7, r0
 80045f0:	b165      	cbz	r5, 800460c <_dtoa_r+0x774>
 80045f2:	9b06      	ldr	r3, [sp, #24]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	dd09      	ble.n	800460c <_dtoa_r+0x774>
 80045f8:	42ab      	cmp	r3, r5
 80045fa:	9a05      	ldr	r2, [sp, #20]
 80045fc:	bfa8      	it	ge
 80045fe:	462b      	movge	r3, r5
 8004600:	1ad2      	subs	r2, r2, r3
 8004602:	9205      	str	r2, [sp, #20]
 8004604:	9a06      	ldr	r2, [sp, #24]
 8004606:	1aed      	subs	r5, r5, r3
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	9306      	str	r3, [sp, #24]
 800460c:	9b08      	ldr	r3, [sp, #32]
 800460e:	b1f3      	cbz	r3, 800464e <_dtoa_r+0x7b6>
 8004610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 80a3 	beq.w	800475e <_dtoa_r+0x8c6>
 8004618:	2e00      	cmp	r6, #0
 800461a:	dd10      	ble.n	800463e <_dtoa_r+0x7a6>
 800461c:	4639      	mov	r1, r7
 800461e:	4632      	mov	r2, r6
 8004620:	4620      	mov	r0, r4
 8004622:	f000 fce1 	bl	8004fe8 <__pow5mult>
 8004626:	4652      	mov	r2, sl
 8004628:	4601      	mov	r1, r0
 800462a:	4607      	mov	r7, r0
 800462c:	4620      	mov	r0, r4
 800462e:	f000 fc31 	bl	8004e94 <__multiply>
 8004632:	4651      	mov	r1, sl
 8004634:	4680      	mov	r8, r0
 8004636:	4620      	mov	r0, r4
 8004638:	f000 fb60 	bl	8004cfc <_Bfree>
 800463c:	46c2      	mov	sl, r8
 800463e:	9b08      	ldr	r3, [sp, #32]
 8004640:	1b9a      	subs	r2, r3, r6
 8004642:	d004      	beq.n	800464e <_dtoa_r+0x7b6>
 8004644:	4651      	mov	r1, sl
 8004646:	4620      	mov	r0, r4
 8004648:	f000 fcce 	bl	8004fe8 <__pow5mult>
 800464c:	4682      	mov	sl, r0
 800464e:	2101      	movs	r1, #1
 8004650:	4620      	mov	r0, r4
 8004652:	f000 fc09 	bl	8004e68 <__i2b>
 8004656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004658:	2b00      	cmp	r3, #0
 800465a:	4606      	mov	r6, r0
 800465c:	f340 8081 	ble.w	8004762 <_dtoa_r+0x8ca>
 8004660:	461a      	mov	r2, r3
 8004662:	4601      	mov	r1, r0
 8004664:	4620      	mov	r0, r4
 8004666:	f000 fcbf 	bl	8004fe8 <__pow5mult>
 800466a:	9b07      	ldr	r3, [sp, #28]
 800466c:	2b01      	cmp	r3, #1
 800466e:	4606      	mov	r6, r0
 8004670:	dd7a      	ble.n	8004768 <_dtoa_r+0x8d0>
 8004672:	f04f 0800 	mov.w	r8, #0
 8004676:	6933      	ldr	r3, [r6, #16]
 8004678:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800467c:	6918      	ldr	r0, [r3, #16]
 800467e:	f000 fba5 	bl	8004dcc <__hi0bits>
 8004682:	f1c0 0020 	rsb	r0, r0, #32
 8004686:	9b06      	ldr	r3, [sp, #24]
 8004688:	4418      	add	r0, r3
 800468a:	f010 001f 	ands.w	r0, r0, #31
 800468e:	f000 8094 	beq.w	80047ba <_dtoa_r+0x922>
 8004692:	f1c0 0320 	rsb	r3, r0, #32
 8004696:	2b04      	cmp	r3, #4
 8004698:	f340 8085 	ble.w	80047a6 <_dtoa_r+0x90e>
 800469c:	9b05      	ldr	r3, [sp, #20]
 800469e:	f1c0 001c 	rsb	r0, r0, #28
 80046a2:	4403      	add	r3, r0
 80046a4:	9305      	str	r3, [sp, #20]
 80046a6:	9b06      	ldr	r3, [sp, #24]
 80046a8:	4403      	add	r3, r0
 80046aa:	4405      	add	r5, r0
 80046ac:	9306      	str	r3, [sp, #24]
 80046ae:	9b05      	ldr	r3, [sp, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	dd05      	ble.n	80046c0 <_dtoa_r+0x828>
 80046b4:	4651      	mov	r1, sl
 80046b6:	461a      	mov	r2, r3
 80046b8:	4620      	mov	r0, r4
 80046ba:	f000 fcef 	bl	800509c <__lshift>
 80046be:	4682      	mov	sl, r0
 80046c0:	9b06      	ldr	r3, [sp, #24]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	dd05      	ble.n	80046d2 <_dtoa_r+0x83a>
 80046c6:	4631      	mov	r1, r6
 80046c8:	461a      	mov	r2, r3
 80046ca:	4620      	mov	r0, r4
 80046cc:	f000 fce6 	bl	800509c <__lshift>
 80046d0:	4606      	mov	r6, r0
 80046d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d072      	beq.n	80047be <_dtoa_r+0x926>
 80046d8:	4631      	mov	r1, r6
 80046da:	4650      	mov	r0, sl
 80046dc:	f000 fd4a 	bl	8005174 <__mcmp>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	da6c      	bge.n	80047be <_dtoa_r+0x926>
 80046e4:	2300      	movs	r3, #0
 80046e6:	4651      	mov	r1, sl
 80046e8:	220a      	movs	r2, #10
 80046ea:	4620      	mov	r0, r4
 80046ec:	f000 fb28 	bl	8004d40 <__multadd>
 80046f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80046f6:	4682      	mov	sl, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 81b0 	beq.w	8004a5e <_dtoa_r+0xbc6>
 80046fe:	2300      	movs	r3, #0
 8004700:	4639      	mov	r1, r7
 8004702:	220a      	movs	r2, #10
 8004704:	4620      	mov	r0, r4
 8004706:	f000 fb1b 	bl	8004d40 <__multadd>
 800470a:	9b01      	ldr	r3, [sp, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	4607      	mov	r7, r0
 8004710:	f300 8096 	bgt.w	8004840 <_dtoa_r+0x9a8>
 8004714:	9b07      	ldr	r3, [sp, #28]
 8004716:	2b02      	cmp	r3, #2
 8004718:	dc59      	bgt.n	80047ce <_dtoa_r+0x936>
 800471a:	e091      	b.n	8004840 <_dtoa_r+0x9a8>
 800471c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800471e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004722:	e758      	b.n	80045d6 <_dtoa_r+0x73e>
 8004724:	9b04      	ldr	r3, [sp, #16]
 8004726:	1e5e      	subs	r6, r3, #1
 8004728:	9b08      	ldr	r3, [sp, #32]
 800472a:	42b3      	cmp	r3, r6
 800472c:	bfbf      	itttt	lt
 800472e:	9b08      	ldrlt	r3, [sp, #32]
 8004730:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004732:	9608      	strlt	r6, [sp, #32]
 8004734:	1af3      	sublt	r3, r6, r3
 8004736:	bfb4      	ite	lt
 8004738:	18d2      	addlt	r2, r2, r3
 800473a:	1b9e      	subge	r6, r3, r6
 800473c:	9b04      	ldr	r3, [sp, #16]
 800473e:	bfbc      	itt	lt
 8004740:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004742:	2600      	movlt	r6, #0
 8004744:	2b00      	cmp	r3, #0
 8004746:	bfb7      	itett	lt
 8004748:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800474c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004750:	1a9d      	sublt	r5, r3, r2
 8004752:	2300      	movlt	r3, #0
 8004754:	e741      	b.n	80045da <_dtoa_r+0x742>
 8004756:	9e08      	ldr	r6, [sp, #32]
 8004758:	9d05      	ldr	r5, [sp, #20]
 800475a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800475c:	e748      	b.n	80045f0 <_dtoa_r+0x758>
 800475e:	9a08      	ldr	r2, [sp, #32]
 8004760:	e770      	b.n	8004644 <_dtoa_r+0x7ac>
 8004762:	9b07      	ldr	r3, [sp, #28]
 8004764:	2b01      	cmp	r3, #1
 8004766:	dc19      	bgt.n	800479c <_dtoa_r+0x904>
 8004768:	9b02      	ldr	r3, [sp, #8]
 800476a:	b9bb      	cbnz	r3, 800479c <_dtoa_r+0x904>
 800476c:	9b03      	ldr	r3, [sp, #12]
 800476e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004772:	b99b      	cbnz	r3, 800479c <_dtoa_r+0x904>
 8004774:	9b03      	ldr	r3, [sp, #12]
 8004776:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800477a:	0d1b      	lsrs	r3, r3, #20
 800477c:	051b      	lsls	r3, r3, #20
 800477e:	b183      	cbz	r3, 80047a2 <_dtoa_r+0x90a>
 8004780:	9b05      	ldr	r3, [sp, #20]
 8004782:	3301      	adds	r3, #1
 8004784:	9305      	str	r3, [sp, #20]
 8004786:	9b06      	ldr	r3, [sp, #24]
 8004788:	3301      	adds	r3, #1
 800478a:	9306      	str	r3, [sp, #24]
 800478c:	f04f 0801 	mov.w	r8, #1
 8004790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004792:	2b00      	cmp	r3, #0
 8004794:	f47f af6f 	bne.w	8004676 <_dtoa_r+0x7de>
 8004798:	2001      	movs	r0, #1
 800479a:	e774      	b.n	8004686 <_dtoa_r+0x7ee>
 800479c:	f04f 0800 	mov.w	r8, #0
 80047a0:	e7f6      	b.n	8004790 <_dtoa_r+0x8f8>
 80047a2:	4698      	mov	r8, r3
 80047a4:	e7f4      	b.n	8004790 <_dtoa_r+0x8f8>
 80047a6:	d082      	beq.n	80046ae <_dtoa_r+0x816>
 80047a8:	9a05      	ldr	r2, [sp, #20]
 80047aa:	331c      	adds	r3, #28
 80047ac:	441a      	add	r2, r3
 80047ae:	9205      	str	r2, [sp, #20]
 80047b0:	9a06      	ldr	r2, [sp, #24]
 80047b2:	441a      	add	r2, r3
 80047b4:	441d      	add	r5, r3
 80047b6:	9206      	str	r2, [sp, #24]
 80047b8:	e779      	b.n	80046ae <_dtoa_r+0x816>
 80047ba:	4603      	mov	r3, r0
 80047bc:	e7f4      	b.n	80047a8 <_dtoa_r+0x910>
 80047be:	9b04      	ldr	r3, [sp, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	dc37      	bgt.n	8004834 <_dtoa_r+0x99c>
 80047c4:	9b07      	ldr	r3, [sp, #28]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	dd34      	ble.n	8004834 <_dtoa_r+0x99c>
 80047ca:	9b04      	ldr	r3, [sp, #16]
 80047cc:	9301      	str	r3, [sp, #4]
 80047ce:	9b01      	ldr	r3, [sp, #4]
 80047d0:	b963      	cbnz	r3, 80047ec <_dtoa_r+0x954>
 80047d2:	4631      	mov	r1, r6
 80047d4:	2205      	movs	r2, #5
 80047d6:	4620      	mov	r0, r4
 80047d8:	f000 fab2 	bl	8004d40 <__multadd>
 80047dc:	4601      	mov	r1, r0
 80047de:	4606      	mov	r6, r0
 80047e0:	4650      	mov	r0, sl
 80047e2:	f000 fcc7 	bl	8005174 <__mcmp>
 80047e6:	2800      	cmp	r0, #0
 80047e8:	f73f adbb 	bgt.w	8004362 <_dtoa_r+0x4ca>
 80047ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047ee:	9d00      	ldr	r5, [sp, #0]
 80047f0:	ea6f 0b03 	mvn.w	fp, r3
 80047f4:	f04f 0800 	mov.w	r8, #0
 80047f8:	4631      	mov	r1, r6
 80047fa:	4620      	mov	r0, r4
 80047fc:	f000 fa7e 	bl	8004cfc <_Bfree>
 8004800:	2f00      	cmp	r7, #0
 8004802:	f43f aeab 	beq.w	800455c <_dtoa_r+0x6c4>
 8004806:	f1b8 0f00 	cmp.w	r8, #0
 800480a:	d005      	beq.n	8004818 <_dtoa_r+0x980>
 800480c:	45b8      	cmp	r8, r7
 800480e:	d003      	beq.n	8004818 <_dtoa_r+0x980>
 8004810:	4641      	mov	r1, r8
 8004812:	4620      	mov	r0, r4
 8004814:	f000 fa72 	bl	8004cfc <_Bfree>
 8004818:	4639      	mov	r1, r7
 800481a:	4620      	mov	r0, r4
 800481c:	f000 fa6e 	bl	8004cfc <_Bfree>
 8004820:	e69c      	b.n	800455c <_dtoa_r+0x6c4>
 8004822:	2600      	movs	r6, #0
 8004824:	4637      	mov	r7, r6
 8004826:	e7e1      	b.n	80047ec <_dtoa_r+0x954>
 8004828:	46bb      	mov	fp, r7
 800482a:	4637      	mov	r7, r6
 800482c:	e599      	b.n	8004362 <_dtoa_r+0x4ca>
 800482e:	bf00      	nop
 8004830:	40240000 	.word	0x40240000
 8004834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 80c8 	beq.w	80049cc <_dtoa_r+0xb34>
 800483c:	9b04      	ldr	r3, [sp, #16]
 800483e:	9301      	str	r3, [sp, #4]
 8004840:	2d00      	cmp	r5, #0
 8004842:	dd05      	ble.n	8004850 <_dtoa_r+0x9b8>
 8004844:	4639      	mov	r1, r7
 8004846:	462a      	mov	r2, r5
 8004848:	4620      	mov	r0, r4
 800484a:	f000 fc27 	bl	800509c <__lshift>
 800484e:	4607      	mov	r7, r0
 8004850:	f1b8 0f00 	cmp.w	r8, #0
 8004854:	d05b      	beq.n	800490e <_dtoa_r+0xa76>
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	4620      	mov	r0, r4
 800485a:	f000 fa0f 	bl	8004c7c <_Balloc>
 800485e:	4605      	mov	r5, r0
 8004860:	b928      	cbnz	r0, 800486e <_dtoa_r+0x9d6>
 8004862:	4b83      	ldr	r3, [pc, #524]	; (8004a70 <_dtoa_r+0xbd8>)
 8004864:	4602      	mov	r2, r0
 8004866:	f240 21ef 	movw	r1, #751	; 0x2ef
 800486a:	f7ff bb2e 	b.w	8003eca <_dtoa_r+0x32>
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	3202      	adds	r2, #2
 8004872:	0092      	lsls	r2, r2, #2
 8004874:	f107 010c 	add.w	r1, r7, #12
 8004878:	300c      	adds	r0, #12
 800487a:	f000 ffab 	bl	80057d4 <memcpy>
 800487e:	2201      	movs	r2, #1
 8004880:	4629      	mov	r1, r5
 8004882:	4620      	mov	r0, r4
 8004884:	f000 fc0a 	bl	800509c <__lshift>
 8004888:	9b00      	ldr	r3, [sp, #0]
 800488a:	3301      	adds	r3, #1
 800488c:	9304      	str	r3, [sp, #16]
 800488e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004892:	4413      	add	r3, r2
 8004894:	9308      	str	r3, [sp, #32]
 8004896:	9b02      	ldr	r3, [sp, #8]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	46b8      	mov	r8, r7
 800489e:	9306      	str	r3, [sp, #24]
 80048a0:	4607      	mov	r7, r0
 80048a2:	9b04      	ldr	r3, [sp, #16]
 80048a4:	4631      	mov	r1, r6
 80048a6:	3b01      	subs	r3, #1
 80048a8:	4650      	mov	r0, sl
 80048aa:	9301      	str	r3, [sp, #4]
 80048ac:	f7ff fa6b 	bl	8003d86 <quorem>
 80048b0:	4641      	mov	r1, r8
 80048b2:	9002      	str	r0, [sp, #8]
 80048b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80048b8:	4650      	mov	r0, sl
 80048ba:	f000 fc5b 	bl	8005174 <__mcmp>
 80048be:	463a      	mov	r2, r7
 80048c0:	9005      	str	r0, [sp, #20]
 80048c2:	4631      	mov	r1, r6
 80048c4:	4620      	mov	r0, r4
 80048c6:	f000 fc71 	bl	80051ac <__mdiff>
 80048ca:	68c2      	ldr	r2, [r0, #12]
 80048cc:	4605      	mov	r5, r0
 80048ce:	bb02      	cbnz	r2, 8004912 <_dtoa_r+0xa7a>
 80048d0:	4601      	mov	r1, r0
 80048d2:	4650      	mov	r0, sl
 80048d4:	f000 fc4e 	bl	8005174 <__mcmp>
 80048d8:	4602      	mov	r2, r0
 80048da:	4629      	mov	r1, r5
 80048dc:	4620      	mov	r0, r4
 80048de:	9209      	str	r2, [sp, #36]	; 0x24
 80048e0:	f000 fa0c 	bl	8004cfc <_Bfree>
 80048e4:	9b07      	ldr	r3, [sp, #28]
 80048e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048e8:	9d04      	ldr	r5, [sp, #16]
 80048ea:	ea43 0102 	orr.w	r1, r3, r2
 80048ee:	9b06      	ldr	r3, [sp, #24]
 80048f0:	4319      	orrs	r1, r3
 80048f2:	d110      	bne.n	8004916 <_dtoa_r+0xa7e>
 80048f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80048f8:	d029      	beq.n	800494e <_dtoa_r+0xab6>
 80048fa:	9b05      	ldr	r3, [sp, #20]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	dd02      	ble.n	8004906 <_dtoa_r+0xa6e>
 8004900:	9b02      	ldr	r3, [sp, #8]
 8004902:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004906:	9b01      	ldr	r3, [sp, #4]
 8004908:	f883 9000 	strb.w	r9, [r3]
 800490c:	e774      	b.n	80047f8 <_dtoa_r+0x960>
 800490e:	4638      	mov	r0, r7
 8004910:	e7ba      	b.n	8004888 <_dtoa_r+0x9f0>
 8004912:	2201      	movs	r2, #1
 8004914:	e7e1      	b.n	80048da <_dtoa_r+0xa42>
 8004916:	9b05      	ldr	r3, [sp, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	db04      	blt.n	8004926 <_dtoa_r+0xa8e>
 800491c:	9907      	ldr	r1, [sp, #28]
 800491e:	430b      	orrs	r3, r1
 8004920:	9906      	ldr	r1, [sp, #24]
 8004922:	430b      	orrs	r3, r1
 8004924:	d120      	bne.n	8004968 <_dtoa_r+0xad0>
 8004926:	2a00      	cmp	r2, #0
 8004928:	dded      	ble.n	8004906 <_dtoa_r+0xa6e>
 800492a:	4651      	mov	r1, sl
 800492c:	2201      	movs	r2, #1
 800492e:	4620      	mov	r0, r4
 8004930:	f000 fbb4 	bl	800509c <__lshift>
 8004934:	4631      	mov	r1, r6
 8004936:	4682      	mov	sl, r0
 8004938:	f000 fc1c 	bl	8005174 <__mcmp>
 800493c:	2800      	cmp	r0, #0
 800493e:	dc03      	bgt.n	8004948 <_dtoa_r+0xab0>
 8004940:	d1e1      	bne.n	8004906 <_dtoa_r+0xa6e>
 8004942:	f019 0f01 	tst.w	r9, #1
 8004946:	d0de      	beq.n	8004906 <_dtoa_r+0xa6e>
 8004948:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800494c:	d1d8      	bne.n	8004900 <_dtoa_r+0xa68>
 800494e:	9a01      	ldr	r2, [sp, #4]
 8004950:	2339      	movs	r3, #57	; 0x39
 8004952:	7013      	strb	r3, [r2, #0]
 8004954:	462b      	mov	r3, r5
 8004956:	461d      	mov	r5, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800495e:	2a39      	cmp	r2, #57	; 0x39
 8004960:	d06c      	beq.n	8004a3c <_dtoa_r+0xba4>
 8004962:	3201      	adds	r2, #1
 8004964:	701a      	strb	r2, [r3, #0]
 8004966:	e747      	b.n	80047f8 <_dtoa_r+0x960>
 8004968:	2a00      	cmp	r2, #0
 800496a:	dd07      	ble.n	800497c <_dtoa_r+0xae4>
 800496c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004970:	d0ed      	beq.n	800494e <_dtoa_r+0xab6>
 8004972:	9a01      	ldr	r2, [sp, #4]
 8004974:	f109 0301 	add.w	r3, r9, #1
 8004978:	7013      	strb	r3, [r2, #0]
 800497a:	e73d      	b.n	80047f8 <_dtoa_r+0x960>
 800497c:	9b04      	ldr	r3, [sp, #16]
 800497e:	9a08      	ldr	r2, [sp, #32]
 8004980:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004984:	4293      	cmp	r3, r2
 8004986:	d043      	beq.n	8004a10 <_dtoa_r+0xb78>
 8004988:	4651      	mov	r1, sl
 800498a:	2300      	movs	r3, #0
 800498c:	220a      	movs	r2, #10
 800498e:	4620      	mov	r0, r4
 8004990:	f000 f9d6 	bl	8004d40 <__multadd>
 8004994:	45b8      	cmp	r8, r7
 8004996:	4682      	mov	sl, r0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	f04f 020a 	mov.w	r2, #10
 80049a0:	4641      	mov	r1, r8
 80049a2:	4620      	mov	r0, r4
 80049a4:	d107      	bne.n	80049b6 <_dtoa_r+0xb1e>
 80049a6:	f000 f9cb 	bl	8004d40 <__multadd>
 80049aa:	4680      	mov	r8, r0
 80049ac:	4607      	mov	r7, r0
 80049ae:	9b04      	ldr	r3, [sp, #16]
 80049b0:	3301      	adds	r3, #1
 80049b2:	9304      	str	r3, [sp, #16]
 80049b4:	e775      	b.n	80048a2 <_dtoa_r+0xa0a>
 80049b6:	f000 f9c3 	bl	8004d40 <__multadd>
 80049ba:	4639      	mov	r1, r7
 80049bc:	4680      	mov	r8, r0
 80049be:	2300      	movs	r3, #0
 80049c0:	220a      	movs	r2, #10
 80049c2:	4620      	mov	r0, r4
 80049c4:	f000 f9bc 	bl	8004d40 <__multadd>
 80049c8:	4607      	mov	r7, r0
 80049ca:	e7f0      	b.n	80049ae <_dtoa_r+0xb16>
 80049cc:	9b04      	ldr	r3, [sp, #16]
 80049ce:	9301      	str	r3, [sp, #4]
 80049d0:	9d00      	ldr	r5, [sp, #0]
 80049d2:	4631      	mov	r1, r6
 80049d4:	4650      	mov	r0, sl
 80049d6:	f7ff f9d6 	bl	8003d86 <quorem>
 80049da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80049de:	9b00      	ldr	r3, [sp, #0]
 80049e0:	f805 9b01 	strb.w	r9, [r5], #1
 80049e4:	1aea      	subs	r2, r5, r3
 80049e6:	9b01      	ldr	r3, [sp, #4]
 80049e8:	4293      	cmp	r3, r2
 80049ea:	dd07      	ble.n	80049fc <_dtoa_r+0xb64>
 80049ec:	4651      	mov	r1, sl
 80049ee:	2300      	movs	r3, #0
 80049f0:	220a      	movs	r2, #10
 80049f2:	4620      	mov	r0, r4
 80049f4:	f000 f9a4 	bl	8004d40 <__multadd>
 80049f8:	4682      	mov	sl, r0
 80049fa:	e7ea      	b.n	80049d2 <_dtoa_r+0xb3a>
 80049fc:	9b01      	ldr	r3, [sp, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bfc8      	it	gt
 8004a02:	461d      	movgt	r5, r3
 8004a04:	9b00      	ldr	r3, [sp, #0]
 8004a06:	bfd8      	it	le
 8004a08:	2501      	movle	r5, #1
 8004a0a:	441d      	add	r5, r3
 8004a0c:	f04f 0800 	mov.w	r8, #0
 8004a10:	4651      	mov	r1, sl
 8004a12:	2201      	movs	r2, #1
 8004a14:	4620      	mov	r0, r4
 8004a16:	f000 fb41 	bl	800509c <__lshift>
 8004a1a:	4631      	mov	r1, r6
 8004a1c:	4682      	mov	sl, r0
 8004a1e:	f000 fba9 	bl	8005174 <__mcmp>
 8004a22:	2800      	cmp	r0, #0
 8004a24:	dc96      	bgt.n	8004954 <_dtoa_r+0xabc>
 8004a26:	d102      	bne.n	8004a2e <_dtoa_r+0xb96>
 8004a28:	f019 0f01 	tst.w	r9, #1
 8004a2c:	d192      	bne.n	8004954 <_dtoa_r+0xabc>
 8004a2e:	462b      	mov	r3, r5
 8004a30:	461d      	mov	r5, r3
 8004a32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a36:	2a30      	cmp	r2, #48	; 0x30
 8004a38:	d0fa      	beq.n	8004a30 <_dtoa_r+0xb98>
 8004a3a:	e6dd      	b.n	80047f8 <_dtoa_r+0x960>
 8004a3c:	9a00      	ldr	r2, [sp, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d189      	bne.n	8004956 <_dtoa_r+0xabe>
 8004a42:	f10b 0b01 	add.w	fp, fp, #1
 8004a46:	2331      	movs	r3, #49	; 0x31
 8004a48:	e796      	b.n	8004978 <_dtoa_r+0xae0>
 8004a4a:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <_dtoa_r+0xbdc>)
 8004a4c:	f7ff ba99 	b.w	8003f82 <_dtoa_r+0xea>
 8004a50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f47f aa6d 	bne.w	8003f32 <_dtoa_r+0x9a>
 8004a58:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <_dtoa_r+0xbe0>)
 8004a5a:	f7ff ba92 	b.w	8003f82 <_dtoa_r+0xea>
 8004a5e:	9b01      	ldr	r3, [sp, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	dcb5      	bgt.n	80049d0 <_dtoa_r+0xb38>
 8004a64:	9b07      	ldr	r3, [sp, #28]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	f73f aeb1 	bgt.w	80047ce <_dtoa_r+0x936>
 8004a6c:	e7b0      	b.n	80049d0 <_dtoa_r+0xb38>
 8004a6e:	bf00      	nop
 8004a70:	08005fd7 	.word	0x08005fd7
 8004a74:	08005f37 	.word	0x08005f37
 8004a78:	08005f5b 	.word	0x08005f5b

08004a7c <_free_r>:
 8004a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a7e:	2900      	cmp	r1, #0
 8004a80:	d044      	beq.n	8004b0c <_free_r+0x90>
 8004a82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a86:	9001      	str	r0, [sp, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f1a1 0404 	sub.w	r4, r1, #4
 8004a8e:	bfb8      	it	lt
 8004a90:	18e4      	addlt	r4, r4, r3
 8004a92:	f000 f8e7 	bl	8004c64 <__malloc_lock>
 8004a96:	4a1e      	ldr	r2, [pc, #120]	; (8004b10 <_free_r+0x94>)
 8004a98:	9801      	ldr	r0, [sp, #4]
 8004a9a:	6813      	ldr	r3, [r2, #0]
 8004a9c:	b933      	cbnz	r3, 8004aac <_free_r+0x30>
 8004a9e:	6063      	str	r3, [r4, #4]
 8004aa0:	6014      	str	r4, [r2, #0]
 8004aa2:	b003      	add	sp, #12
 8004aa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004aa8:	f000 b8e2 	b.w	8004c70 <__malloc_unlock>
 8004aac:	42a3      	cmp	r3, r4
 8004aae:	d908      	bls.n	8004ac2 <_free_r+0x46>
 8004ab0:	6825      	ldr	r5, [r4, #0]
 8004ab2:	1961      	adds	r1, r4, r5
 8004ab4:	428b      	cmp	r3, r1
 8004ab6:	bf01      	itttt	eq
 8004ab8:	6819      	ldreq	r1, [r3, #0]
 8004aba:	685b      	ldreq	r3, [r3, #4]
 8004abc:	1949      	addeq	r1, r1, r5
 8004abe:	6021      	streq	r1, [r4, #0]
 8004ac0:	e7ed      	b.n	8004a9e <_free_r+0x22>
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	b10b      	cbz	r3, 8004acc <_free_r+0x50>
 8004ac8:	42a3      	cmp	r3, r4
 8004aca:	d9fa      	bls.n	8004ac2 <_free_r+0x46>
 8004acc:	6811      	ldr	r1, [r2, #0]
 8004ace:	1855      	adds	r5, r2, r1
 8004ad0:	42a5      	cmp	r5, r4
 8004ad2:	d10b      	bne.n	8004aec <_free_r+0x70>
 8004ad4:	6824      	ldr	r4, [r4, #0]
 8004ad6:	4421      	add	r1, r4
 8004ad8:	1854      	adds	r4, r2, r1
 8004ada:	42a3      	cmp	r3, r4
 8004adc:	6011      	str	r1, [r2, #0]
 8004ade:	d1e0      	bne.n	8004aa2 <_free_r+0x26>
 8004ae0:	681c      	ldr	r4, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	6053      	str	r3, [r2, #4]
 8004ae6:	440c      	add	r4, r1
 8004ae8:	6014      	str	r4, [r2, #0]
 8004aea:	e7da      	b.n	8004aa2 <_free_r+0x26>
 8004aec:	d902      	bls.n	8004af4 <_free_r+0x78>
 8004aee:	230c      	movs	r3, #12
 8004af0:	6003      	str	r3, [r0, #0]
 8004af2:	e7d6      	b.n	8004aa2 <_free_r+0x26>
 8004af4:	6825      	ldr	r5, [r4, #0]
 8004af6:	1961      	adds	r1, r4, r5
 8004af8:	428b      	cmp	r3, r1
 8004afa:	bf04      	itt	eq
 8004afc:	6819      	ldreq	r1, [r3, #0]
 8004afe:	685b      	ldreq	r3, [r3, #4]
 8004b00:	6063      	str	r3, [r4, #4]
 8004b02:	bf04      	itt	eq
 8004b04:	1949      	addeq	r1, r1, r5
 8004b06:	6021      	streq	r1, [r4, #0]
 8004b08:	6054      	str	r4, [r2, #4]
 8004b0a:	e7ca      	b.n	8004aa2 <_free_r+0x26>
 8004b0c:	b003      	add	sp, #12
 8004b0e:	bd30      	pop	{r4, r5, pc}
 8004b10:	200005b8 	.word	0x200005b8

08004b14 <malloc>:
 8004b14:	4b02      	ldr	r3, [pc, #8]	; (8004b20 <malloc+0xc>)
 8004b16:	4601      	mov	r1, r0
 8004b18:	6818      	ldr	r0, [r3, #0]
 8004b1a:	f000 b823 	b.w	8004b64 <_malloc_r>
 8004b1e:	bf00      	nop
 8004b20:	2000005c 	.word	0x2000005c

08004b24 <sbrk_aligned>:
 8004b24:	b570      	push	{r4, r5, r6, lr}
 8004b26:	4e0e      	ldr	r6, [pc, #56]	; (8004b60 <sbrk_aligned+0x3c>)
 8004b28:	460c      	mov	r4, r1
 8004b2a:	6831      	ldr	r1, [r6, #0]
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	b911      	cbnz	r1, 8004b36 <sbrk_aligned+0x12>
 8004b30:	f000 fe40 	bl	80057b4 <_sbrk_r>
 8004b34:	6030      	str	r0, [r6, #0]
 8004b36:	4621      	mov	r1, r4
 8004b38:	4628      	mov	r0, r5
 8004b3a:	f000 fe3b 	bl	80057b4 <_sbrk_r>
 8004b3e:	1c43      	adds	r3, r0, #1
 8004b40:	d00a      	beq.n	8004b58 <sbrk_aligned+0x34>
 8004b42:	1cc4      	adds	r4, r0, #3
 8004b44:	f024 0403 	bic.w	r4, r4, #3
 8004b48:	42a0      	cmp	r0, r4
 8004b4a:	d007      	beq.n	8004b5c <sbrk_aligned+0x38>
 8004b4c:	1a21      	subs	r1, r4, r0
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f000 fe30 	bl	80057b4 <_sbrk_r>
 8004b54:	3001      	adds	r0, #1
 8004b56:	d101      	bne.n	8004b5c <sbrk_aligned+0x38>
 8004b58:	f04f 34ff 	mov.w	r4, #4294967295
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}
 8004b60:	200005bc 	.word	0x200005bc

08004b64 <_malloc_r>:
 8004b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b68:	1ccd      	adds	r5, r1, #3
 8004b6a:	f025 0503 	bic.w	r5, r5, #3
 8004b6e:	3508      	adds	r5, #8
 8004b70:	2d0c      	cmp	r5, #12
 8004b72:	bf38      	it	cc
 8004b74:	250c      	movcc	r5, #12
 8004b76:	2d00      	cmp	r5, #0
 8004b78:	4607      	mov	r7, r0
 8004b7a:	db01      	blt.n	8004b80 <_malloc_r+0x1c>
 8004b7c:	42a9      	cmp	r1, r5
 8004b7e:	d905      	bls.n	8004b8c <_malloc_r+0x28>
 8004b80:	230c      	movs	r3, #12
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	2600      	movs	r6, #0
 8004b86:	4630      	mov	r0, r6
 8004b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004c60 <_malloc_r+0xfc>
 8004b90:	f000 f868 	bl	8004c64 <__malloc_lock>
 8004b94:	f8d8 3000 	ldr.w	r3, [r8]
 8004b98:	461c      	mov	r4, r3
 8004b9a:	bb5c      	cbnz	r4, 8004bf4 <_malloc_r+0x90>
 8004b9c:	4629      	mov	r1, r5
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	f7ff ffc0 	bl	8004b24 <sbrk_aligned>
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	d155      	bne.n	8004c56 <_malloc_r+0xf2>
 8004baa:	f8d8 4000 	ldr.w	r4, [r8]
 8004bae:	4626      	mov	r6, r4
 8004bb0:	2e00      	cmp	r6, #0
 8004bb2:	d145      	bne.n	8004c40 <_malloc_r+0xdc>
 8004bb4:	2c00      	cmp	r4, #0
 8004bb6:	d048      	beq.n	8004c4a <_malloc_r+0xe6>
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	4631      	mov	r1, r6
 8004bbc:	4638      	mov	r0, r7
 8004bbe:	eb04 0903 	add.w	r9, r4, r3
 8004bc2:	f000 fdf7 	bl	80057b4 <_sbrk_r>
 8004bc6:	4581      	cmp	r9, r0
 8004bc8:	d13f      	bne.n	8004c4a <_malloc_r+0xe6>
 8004bca:	6821      	ldr	r1, [r4, #0]
 8004bcc:	1a6d      	subs	r5, r5, r1
 8004bce:	4629      	mov	r1, r5
 8004bd0:	4638      	mov	r0, r7
 8004bd2:	f7ff ffa7 	bl	8004b24 <sbrk_aligned>
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d037      	beq.n	8004c4a <_malloc_r+0xe6>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	442b      	add	r3, r5
 8004bde:	6023      	str	r3, [r4, #0]
 8004be0:	f8d8 3000 	ldr.w	r3, [r8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d038      	beq.n	8004c5a <_malloc_r+0xf6>
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	42a2      	cmp	r2, r4
 8004bec:	d12b      	bne.n	8004c46 <_malloc_r+0xe2>
 8004bee:	2200      	movs	r2, #0
 8004bf0:	605a      	str	r2, [r3, #4]
 8004bf2:	e00f      	b.n	8004c14 <_malloc_r+0xb0>
 8004bf4:	6822      	ldr	r2, [r4, #0]
 8004bf6:	1b52      	subs	r2, r2, r5
 8004bf8:	d41f      	bmi.n	8004c3a <_malloc_r+0xd6>
 8004bfa:	2a0b      	cmp	r2, #11
 8004bfc:	d917      	bls.n	8004c2e <_malloc_r+0xca>
 8004bfe:	1961      	adds	r1, r4, r5
 8004c00:	42a3      	cmp	r3, r4
 8004c02:	6025      	str	r5, [r4, #0]
 8004c04:	bf18      	it	ne
 8004c06:	6059      	strne	r1, [r3, #4]
 8004c08:	6863      	ldr	r3, [r4, #4]
 8004c0a:	bf08      	it	eq
 8004c0c:	f8c8 1000 	streq.w	r1, [r8]
 8004c10:	5162      	str	r2, [r4, r5]
 8004c12:	604b      	str	r3, [r1, #4]
 8004c14:	4638      	mov	r0, r7
 8004c16:	f104 060b 	add.w	r6, r4, #11
 8004c1a:	f000 f829 	bl	8004c70 <__malloc_unlock>
 8004c1e:	f026 0607 	bic.w	r6, r6, #7
 8004c22:	1d23      	adds	r3, r4, #4
 8004c24:	1af2      	subs	r2, r6, r3
 8004c26:	d0ae      	beq.n	8004b86 <_malloc_r+0x22>
 8004c28:	1b9b      	subs	r3, r3, r6
 8004c2a:	50a3      	str	r3, [r4, r2]
 8004c2c:	e7ab      	b.n	8004b86 <_malloc_r+0x22>
 8004c2e:	42a3      	cmp	r3, r4
 8004c30:	6862      	ldr	r2, [r4, #4]
 8004c32:	d1dd      	bne.n	8004bf0 <_malloc_r+0x8c>
 8004c34:	f8c8 2000 	str.w	r2, [r8]
 8004c38:	e7ec      	b.n	8004c14 <_malloc_r+0xb0>
 8004c3a:	4623      	mov	r3, r4
 8004c3c:	6864      	ldr	r4, [r4, #4]
 8004c3e:	e7ac      	b.n	8004b9a <_malloc_r+0x36>
 8004c40:	4634      	mov	r4, r6
 8004c42:	6876      	ldr	r6, [r6, #4]
 8004c44:	e7b4      	b.n	8004bb0 <_malloc_r+0x4c>
 8004c46:	4613      	mov	r3, r2
 8004c48:	e7cc      	b.n	8004be4 <_malloc_r+0x80>
 8004c4a:	230c      	movs	r3, #12
 8004c4c:	603b      	str	r3, [r7, #0]
 8004c4e:	4638      	mov	r0, r7
 8004c50:	f000 f80e 	bl	8004c70 <__malloc_unlock>
 8004c54:	e797      	b.n	8004b86 <_malloc_r+0x22>
 8004c56:	6025      	str	r5, [r4, #0]
 8004c58:	e7dc      	b.n	8004c14 <_malloc_r+0xb0>
 8004c5a:	605b      	str	r3, [r3, #4]
 8004c5c:	deff      	udf	#255	; 0xff
 8004c5e:	bf00      	nop
 8004c60:	200005b8 	.word	0x200005b8

08004c64 <__malloc_lock>:
 8004c64:	4801      	ldr	r0, [pc, #4]	; (8004c6c <__malloc_lock+0x8>)
 8004c66:	f7ff b88c 	b.w	8003d82 <__retarget_lock_acquire_recursive>
 8004c6a:	bf00      	nop
 8004c6c:	200005b4 	.word	0x200005b4

08004c70 <__malloc_unlock>:
 8004c70:	4801      	ldr	r0, [pc, #4]	; (8004c78 <__malloc_unlock+0x8>)
 8004c72:	f7ff b887 	b.w	8003d84 <__retarget_lock_release_recursive>
 8004c76:	bf00      	nop
 8004c78:	200005b4 	.word	0x200005b4

08004c7c <_Balloc>:
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	69c6      	ldr	r6, [r0, #28]
 8004c80:	4604      	mov	r4, r0
 8004c82:	460d      	mov	r5, r1
 8004c84:	b976      	cbnz	r6, 8004ca4 <_Balloc+0x28>
 8004c86:	2010      	movs	r0, #16
 8004c88:	f7ff ff44 	bl	8004b14 <malloc>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	61e0      	str	r0, [r4, #28]
 8004c90:	b920      	cbnz	r0, 8004c9c <_Balloc+0x20>
 8004c92:	4b18      	ldr	r3, [pc, #96]	; (8004cf4 <_Balloc+0x78>)
 8004c94:	4818      	ldr	r0, [pc, #96]	; (8004cf8 <_Balloc+0x7c>)
 8004c96:	216b      	movs	r1, #107	; 0x6b
 8004c98:	f000 fdaa 	bl	80057f0 <__assert_func>
 8004c9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ca0:	6006      	str	r6, [r0, #0]
 8004ca2:	60c6      	str	r6, [r0, #12]
 8004ca4:	69e6      	ldr	r6, [r4, #28]
 8004ca6:	68f3      	ldr	r3, [r6, #12]
 8004ca8:	b183      	cbz	r3, 8004ccc <_Balloc+0x50>
 8004caa:	69e3      	ldr	r3, [r4, #28]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004cb2:	b9b8      	cbnz	r0, 8004ce4 <_Balloc+0x68>
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	fa01 f605 	lsl.w	r6, r1, r5
 8004cba:	1d72      	adds	r2, r6, #5
 8004cbc:	0092      	lsls	r2, r2, #2
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f000 fdb4 	bl	800582c <_calloc_r>
 8004cc4:	b160      	cbz	r0, 8004ce0 <_Balloc+0x64>
 8004cc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004cca:	e00e      	b.n	8004cea <_Balloc+0x6e>
 8004ccc:	2221      	movs	r2, #33	; 0x21
 8004cce:	2104      	movs	r1, #4
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f000 fdab 	bl	800582c <_calloc_r>
 8004cd6:	69e3      	ldr	r3, [r4, #28]
 8004cd8:	60f0      	str	r0, [r6, #12]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e4      	bne.n	8004caa <_Balloc+0x2e>
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	bd70      	pop	{r4, r5, r6, pc}
 8004ce4:	6802      	ldr	r2, [r0, #0]
 8004ce6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004cea:	2300      	movs	r3, #0
 8004cec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004cf0:	e7f7      	b.n	8004ce2 <_Balloc+0x66>
 8004cf2:	bf00      	nop
 8004cf4:	08005f68 	.word	0x08005f68
 8004cf8:	08005fe8 	.word	0x08005fe8

08004cfc <_Bfree>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	69c6      	ldr	r6, [r0, #28]
 8004d00:	4605      	mov	r5, r0
 8004d02:	460c      	mov	r4, r1
 8004d04:	b976      	cbnz	r6, 8004d24 <_Bfree+0x28>
 8004d06:	2010      	movs	r0, #16
 8004d08:	f7ff ff04 	bl	8004b14 <malloc>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	61e8      	str	r0, [r5, #28]
 8004d10:	b920      	cbnz	r0, 8004d1c <_Bfree+0x20>
 8004d12:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <_Bfree+0x3c>)
 8004d14:	4809      	ldr	r0, [pc, #36]	; (8004d3c <_Bfree+0x40>)
 8004d16:	218f      	movs	r1, #143	; 0x8f
 8004d18:	f000 fd6a 	bl	80057f0 <__assert_func>
 8004d1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d20:	6006      	str	r6, [r0, #0]
 8004d22:	60c6      	str	r6, [r0, #12]
 8004d24:	b13c      	cbz	r4, 8004d36 <_Bfree+0x3a>
 8004d26:	69eb      	ldr	r3, [r5, #28]
 8004d28:	6862      	ldr	r2, [r4, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d30:	6021      	str	r1, [r4, #0]
 8004d32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004d36:	bd70      	pop	{r4, r5, r6, pc}
 8004d38:	08005f68 	.word	0x08005f68
 8004d3c:	08005fe8 	.word	0x08005fe8

08004d40 <__multadd>:
 8004d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d44:	690d      	ldr	r5, [r1, #16]
 8004d46:	4607      	mov	r7, r0
 8004d48:	460c      	mov	r4, r1
 8004d4a:	461e      	mov	r6, r3
 8004d4c:	f101 0c14 	add.w	ip, r1, #20
 8004d50:	2000      	movs	r0, #0
 8004d52:	f8dc 3000 	ldr.w	r3, [ip]
 8004d56:	b299      	uxth	r1, r3
 8004d58:	fb02 6101 	mla	r1, r2, r1, r6
 8004d5c:	0c1e      	lsrs	r6, r3, #16
 8004d5e:	0c0b      	lsrs	r3, r1, #16
 8004d60:	fb02 3306 	mla	r3, r2, r6, r3
 8004d64:	b289      	uxth	r1, r1
 8004d66:	3001      	adds	r0, #1
 8004d68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004d6c:	4285      	cmp	r5, r0
 8004d6e:	f84c 1b04 	str.w	r1, [ip], #4
 8004d72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004d76:	dcec      	bgt.n	8004d52 <__multadd+0x12>
 8004d78:	b30e      	cbz	r6, 8004dbe <__multadd+0x7e>
 8004d7a:	68a3      	ldr	r3, [r4, #8]
 8004d7c:	42ab      	cmp	r3, r5
 8004d7e:	dc19      	bgt.n	8004db4 <__multadd+0x74>
 8004d80:	6861      	ldr	r1, [r4, #4]
 8004d82:	4638      	mov	r0, r7
 8004d84:	3101      	adds	r1, #1
 8004d86:	f7ff ff79 	bl	8004c7c <_Balloc>
 8004d8a:	4680      	mov	r8, r0
 8004d8c:	b928      	cbnz	r0, 8004d9a <__multadd+0x5a>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <__multadd+0x84>)
 8004d92:	480d      	ldr	r0, [pc, #52]	; (8004dc8 <__multadd+0x88>)
 8004d94:	21ba      	movs	r1, #186	; 0xba
 8004d96:	f000 fd2b 	bl	80057f0 <__assert_func>
 8004d9a:	6922      	ldr	r2, [r4, #16]
 8004d9c:	3202      	adds	r2, #2
 8004d9e:	f104 010c 	add.w	r1, r4, #12
 8004da2:	0092      	lsls	r2, r2, #2
 8004da4:	300c      	adds	r0, #12
 8004da6:	f000 fd15 	bl	80057d4 <memcpy>
 8004daa:	4621      	mov	r1, r4
 8004dac:	4638      	mov	r0, r7
 8004dae:	f7ff ffa5 	bl	8004cfc <_Bfree>
 8004db2:	4644      	mov	r4, r8
 8004db4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004db8:	3501      	adds	r5, #1
 8004dba:	615e      	str	r6, [r3, #20]
 8004dbc:	6125      	str	r5, [r4, #16]
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc4:	08005fd7 	.word	0x08005fd7
 8004dc8:	08005fe8 	.word	0x08005fe8

08004dcc <__hi0bits>:
 8004dcc:	0c03      	lsrs	r3, r0, #16
 8004dce:	041b      	lsls	r3, r3, #16
 8004dd0:	b9d3      	cbnz	r3, 8004e08 <__hi0bits+0x3c>
 8004dd2:	0400      	lsls	r0, r0, #16
 8004dd4:	2310      	movs	r3, #16
 8004dd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004dda:	bf04      	itt	eq
 8004ddc:	0200      	lsleq	r0, r0, #8
 8004dde:	3308      	addeq	r3, #8
 8004de0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004de4:	bf04      	itt	eq
 8004de6:	0100      	lsleq	r0, r0, #4
 8004de8:	3304      	addeq	r3, #4
 8004dea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004dee:	bf04      	itt	eq
 8004df0:	0080      	lsleq	r0, r0, #2
 8004df2:	3302      	addeq	r3, #2
 8004df4:	2800      	cmp	r0, #0
 8004df6:	db05      	blt.n	8004e04 <__hi0bits+0x38>
 8004df8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004dfc:	f103 0301 	add.w	r3, r3, #1
 8004e00:	bf08      	it	eq
 8004e02:	2320      	moveq	r3, #32
 8004e04:	4618      	mov	r0, r3
 8004e06:	4770      	bx	lr
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e7e4      	b.n	8004dd6 <__hi0bits+0xa>

08004e0c <__lo0bits>:
 8004e0c:	6803      	ldr	r3, [r0, #0]
 8004e0e:	f013 0207 	ands.w	r2, r3, #7
 8004e12:	d00c      	beq.n	8004e2e <__lo0bits+0x22>
 8004e14:	07d9      	lsls	r1, r3, #31
 8004e16:	d422      	bmi.n	8004e5e <__lo0bits+0x52>
 8004e18:	079a      	lsls	r2, r3, #30
 8004e1a:	bf49      	itett	mi
 8004e1c:	085b      	lsrmi	r3, r3, #1
 8004e1e:	089b      	lsrpl	r3, r3, #2
 8004e20:	6003      	strmi	r3, [r0, #0]
 8004e22:	2201      	movmi	r2, #1
 8004e24:	bf5c      	itt	pl
 8004e26:	6003      	strpl	r3, [r0, #0]
 8004e28:	2202      	movpl	r2, #2
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	4770      	bx	lr
 8004e2e:	b299      	uxth	r1, r3
 8004e30:	b909      	cbnz	r1, 8004e36 <__lo0bits+0x2a>
 8004e32:	0c1b      	lsrs	r3, r3, #16
 8004e34:	2210      	movs	r2, #16
 8004e36:	b2d9      	uxtb	r1, r3
 8004e38:	b909      	cbnz	r1, 8004e3e <__lo0bits+0x32>
 8004e3a:	3208      	adds	r2, #8
 8004e3c:	0a1b      	lsrs	r3, r3, #8
 8004e3e:	0719      	lsls	r1, r3, #28
 8004e40:	bf04      	itt	eq
 8004e42:	091b      	lsreq	r3, r3, #4
 8004e44:	3204      	addeq	r2, #4
 8004e46:	0799      	lsls	r1, r3, #30
 8004e48:	bf04      	itt	eq
 8004e4a:	089b      	lsreq	r3, r3, #2
 8004e4c:	3202      	addeq	r2, #2
 8004e4e:	07d9      	lsls	r1, r3, #31
 8004e50:	d403      	bmi.n	8004e5a <__lo0bits+0x4e>
 8004e52:	085b      	lsrs	r3, r3, #1
 8004e54:	f102 0201 	add.w	r2, r2, #1
 8004e58:	d003      	beq.n	8004e62 <__lo0bits+0x56>
 8004e5a:	6003      	str	r3, [r0, #0]
 8004e5c:	e7e5      	b.n	8004e2a <__lo0bits+0x1e>
 8004e5e:	2200      	movs	r2, #0
 8004e60:	e7e3      	b.n	8004e2a <__lo0bits+0x1e>
 8004e62:	2220      	movs	r2, #32
 8004e64:	e7e1      	b.n	8004e2a <__lo0bits+0x1e>
	...

08004e68 <__i2b>:
 8004e68:	b510      	push	{r4, lr}
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	f7ff ff05 	bl	8004c7c <_Balloc>
 8004e72:	4602      	mov	r2, r0
 8004e74:	b928      	cbnz	r0, 8004e82 <__i2b+0x1a>
 8004e76:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <__i2b+0x24>)
 8004e78:	4805      	ldr	r0, [pc, #20]	; (8004e90 <__i2b+0x28>)
 8004e7a:	f240 1145 	movw	r1, #325	; 0x145
 8004e7e:	f000 fcb7 	bl	80057f0 <__assert_func>
 8004e82:	2301      	movs	r3, #1
 8004e84:	6144      	str	r4, [r0, #20]
 8004e86:	6103      	str	r3, [r0, #16]
 8004e88:	bd10      	pop	{r4, pc}
 8004e8a:	bf00      	nop
 8004e8c:	08005fd7 	.word	0x08005fd7
 8004e90:	08005fe8 	.word	0x08005fe8

08004e94 <__multiply>:
 8004e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e98:	4691      	mov	r9, r2
 8004e9a:	690a      	ldr	r2, [r1, #16]
 8004e9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	bfb8      	it	lt
 8004ea4:	460b      	movlt	r3, r1
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	bfbc      	itt	lt
 8004eaa:	464c      	movlt	r4, r9
 8004eac:	4699      	movlt	r9, r3
 8004eae:	6927      	ldr	r7, [r4, #16]
 8004eb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004eb4:	68a3      	ldr	r3, [r4, #8]
 8004eb6:	6861      	ldr	r1, [r4, #4]
 8004eb8:	eb07 060a 	add.w	r6, r7, sl
 8004ebc:	42b3      	cmp	r3, r6
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	bfb8      	it	lt
 8004ec2:	3101      	addlt	r1, #1
 8004ec4:	f7ff feda 	bl	8004c7c <_Balloc>
 8004ec8:	b930      	cbnz	r0, 8004ed8 <__multiply+0x44>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	4b44      	ldr	r3, [pc, #272]	; (8004fe0 <__multiply+0x14c>)
 8004ece:	4845      	ldr	r0, [pc, #276]	; (8004fe4 <__multiply+0x150>)
 8004ed0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004ed4:	f000 fc8c 	bl	80057f0 <__assert_func>
 8004ed8:	f100 0514 	add.w	r5, r0, #20
 8004edc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004ee0:	462b      	mov	r3, r5
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	4543      	cmp	r3, r8
 8004ee6:	d321      	bcc.n	8004f2c <__multiply+0x98>
 8004ee8:	f104 0314 	add.w	r3, r4, #20
 8004eec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004ef0:	f109 0314 	add.w	r3, r9, #20
 8004ef4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004ef8:	9202      	str	r2, [sp, #8]
 8004efa:	1b3a      	subs	r2, r7, r4
 8004efc:	3a15      	subs	r2, #21
 8004efe:	f022 0203 	bic.w	r2, r2, #3
 8004f02:	3204      	adds	r2, #4
 8004f04:	f104 0115 	add.w	r1, r4, #21
 8004f08:	428f      	cmp	r7, r1
 8004f0a:	bf38      	it	cc
 8004f0c:	2204      	movcc	r2, #4
 8004f0e:	9201      	str	r2, [sp, #4]
 8004f10:	9a02      	ldr	r2, [sp, #8]
 8004f12:	9303      	str	r3, [sp, #12]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d80c      	bhi.n	8004f32 <__multiply+0x9e>
 8004f18:	2e00      	cmp	r6, #0
 8004f1a:	dd03      	ble.n	8004f24 <__multiply+0x90>
 8004f1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d05b      	beq.n	8004fdc <__multiply+0x148>
 8004f24:	6106      	str	r6, [r0, #16]
 8004f26:	b005      	add	sp, #20
 8004f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2c:	f843 2b04 	str.w	r2, [r3], #4
 8004f30:	e7d8      	b.n	8004ee4 <__multiply+0x50>
 8004f32:	f8b3 a000 	ldrh.w	sl, [r3]
 8004f36:	f1ba 0f00 	cmp.w	sl, #0
 8004f3a:	d024      	beq.n	8004f86 <__multiply+0xf2>
 8004f3c:	f104 0e14 	add.w	lr, r4, #20
 8004f40:	46a9      	mov	r9, r5
 8004f42:	f04f 0c00 	mov.w	ip, #0
 8004f46:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004f4a:	f8d9 1000 	ldr.w	r1, [r9]
 8004f4e:	fa1f fb82 	uxth.w	fp, r2
 8004f52:	b289      	uxth	r1, r1
 8004f54:	fb0a 110b 	mla	r1, sl, fp, r1
 8004f58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004f5c:	f8d9 2000 	ldr.w	r2, [r9]
 8004f60:	4461      	add	r1, ip
 8004f62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004f66:	fb0a c20b 	mla	r2, sl, fp, ip
 8004f6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004f6e:	b289      	uxth	r1, r1
 8004f70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004f74:	4577      	cmp	r7, lr
 8004f76:	f849 1b04 	str.w	r1, [r9], #4
 8004f7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004f7e:	d8e2      	bhi.n	8004f46 <__multiply+0xb2>
 8004f80:	9a01      	ldr	r2, [sp, #4]
 8004f82:	f845 c002 	str.w	ip, [r5, r2]
 8004f86:	9a03      	ldr	r2, [sp, #12]
 8004f88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	f1b9 0f00 	cmp.w	r9, #0
 8004f92:	d021      	beq.n	8004fd8 <__multiply+0x144>
 8004f94:	6829      	ldr	r1, [r5, #0]
 8004f96:	f104 0c14 	add.w	ip, r4, #20
 8004f9a:	46ae      	mov	lr, r5
 8004f9c:	f04f 0a00 	mov.w	sl, #0
 8004fa0:	f8bc b000 	ldrh.w	fp, [ip]
 8004fa4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004fa8:	fb09 220b 	mla	r2, r9, fp, r2
 8004fac:	4452      	add	r2, sl
 8004fae:	b289      	uxth	r1, r1
 8004fb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004fb4:	f84e 1b04 	str.w	r1, [lr], #4
 8004fb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004fbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004fc0:	f8be 1000 	ldrh.w	r1, [lr]
 8004fc4:	fb09 110a 	mla	r1, r9, sl, r1
 8004fc8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004fcc:	4567      	cmp	r7, ip
 8004fce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004fd2:	d8e5      	bhi.n	8004fa0 <__multiply+0x10c>
 8004fd4:	9a01      	ldr	r2, [sp, #4]
 8004fd6:	50a9      	str	r1, [r5, r2]
 8004fd8:	3504      	adds	r5, #4
 8004fda:	e799      	b.n	8004f10 <__multiply+0x7c>
 8004fdc:	3e01      	subs	r6, #1
 8004fde:	e79b      	b.n	8004f18 <__multiply+0x84>
 8004fe0:	08005fd7 	.word	0x08005fd7
 8004fe4:	08005fe8 	.word	0x08005fe8

08004fe8 <__pow5mult>:
 8004fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fec:	4615      	mov	r5, r2
 8004fee:	f012 0203 	ands.w	r2, r2, #3
 8004ff2:	4606      	mov	r6, r0
 8004ff4:	460f      	mov	r7, r1
 8004ff6:	d007      	beq.n	8005008 <__pow5mult+0x20>
 8004ff8:	4c25      	ldr	r4, [pc, #148]	; (8005090 <__pow5mult+0xa8>)
 8004ffa:	3a01      	subs	r2, #1
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005002:	f7ff fe9d 	bl	8004d40 <__multadd>
 8005006:	4607      	mov	r7, r0
 8005008:	10ad      	asrs	r5, r5, #2
 800500a:	d03d      	beq.n	8005088 <__pow5mult+0xa0>
 800500c:	69f4      	ldr	r4, [r6, #28]
 800500e:	b97c      	cbnz	r4, 8005030 <__pow5mult+0x48>
 8005010:	2010      	movs	r0, #16
 8005012:	f7ff fd7f 	bl	8004b14 <malloc>
 8005016:	4602      	mov	r2, r0
 8005018:	61f0      	str	r0, [r6, #28]
 800501a:	b928      	cbnz	r0, 8005028 <__pow5mult+0x40>
 800501c:	4b1d      	ldr	r3, [pc, #116]	; (8005094 <__pow5mult+0xac>)
 800501e:	481e      	ldr	r0, [pc, #120]	; (8005098 <__pow5mult+0xb0>)
 8005020:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005024:	f000 fbe4 	bl	80057f0 <__assert_func>
 8005028:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800502c:	6004      	str	r4, [r0, #0]
 800502e:	60c4      	str	r4, [r0, #12]
 8005030:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005034:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005038:	b94c      	cbnz	r4, 800504e <__pow5mult+0x66>
 800503a:	f240 2171 	movw	r1, #625	; 0x271
 800503e:	4630      	mov	r0, r6
 8005040:	f7ff ff12 	bl	8004e68 <__i2b>
 8005044:	2300      	movs	r3, #0
 8005046:	f8c8 0008 	str.w	r0, [r8, #8]
 800504a:	4604      	mov	r4, r0
 800504c:	6003      	str	r3, [r0, #0]
 800504e:	f04f 0900 	mov.w	r9, #0
 8005052:	07eb      	lsls	r3, r5, #31
 8005054:	d50a      	bpl.n	800506c <__pow5mult+0x84>
 8005056:	4639      	mov	r1, r7
 8005058:	4622      	mov	r2, r4
 800505a:	4630      	mov	r0, r6
 800505c:	f7ff ff1a 	bl	8004e94 <__multiply>
 8005060:	4639      	mov	r1, r7
 8005062:	4680      	mov	r8, r0
 8005064:	4630      	mov	r0, r6
 8005066:	f7ff fe49 	bl	8004cfc <_Bfree>
 800506a:	4647      	mov	r7, r8
 800506c:	106d      	asrs	r5, r5, #1
 800506e:	d00b      	beq.n	8005088 <__pow5mult+0xa0>
 8005070:	6820      	ldr	r0, [r4, #0]
 8005072:	b938      	cbnz	r0, 8005084 <__pow5mult+0x9c>
 8005074:	4622      	mov	r2, r4
 8005076:	4621      	mov	r1, r4
 8005078:	4630      	mov	r0, r6
 800507a:	f7ff ff0b 	bl	8004e94 <__multiply>
 800507e:	6020      	str	r0, [r4, #0]
 8005080:	f8c0 9000 	str.w	r9, [r0]
 8005084:	4604      	mov	r4, r0
 8005086:	e7e4      	b.n	8005052 <__pow5mult+0x6a>
 8005088:	4638      	mov	r0, r7
 800508a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800508e:	bf00      	nop
 8005090:	08006138 	.word	0x08006138
 8005094:	08005f68 	.word	0x08005f68
 8005098:	08005fe8 	.word	0x08005fe8

0800509c <__lshift>:
 800509c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a0:	460c      	mov	r4, r1
 80050a2:	6849      	ldr	r1, [r1, #4]
 80050a4:	6923      	ldr	r3, [r4, #16]
 80050a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80050aa:	68a3      	ldr	r3, [r4, #8]
 80050ac:	4607      	mov	r7, r0
 80050ae:	4691      	mov	r9, r2
 80050b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80050b4:	f108 0601 	add.w	r6, r8, #1
 80050b8:	42b3      	cmp	r3, r6
 80050ba:	db0b      	blt.n	80050d4 <__lshift+0x38>
 80050bc:	4638      	mov	r0, r7
 80050be:	f7ff fddd 	bl	8004c7c <_Balloc>
 80050c2:	4605      	mov	r5, r0
 80050c4:	b948      	cbnz	r0, 80050da <__lshift+0x3e>
 80050c6:	4602      	mov	r2, r0
 80050c8:	4b28      	ldr	r3, [pc, #160]	; (800516c <__lshift+0xd0>)
 80050ca:	4829      	ldr	r0, [pc, #164]	; (8005170 <__lshift+0xd4>)
 80050cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80050d0:	f000 fb8e 	bl	80057f0 <__assert_func>
 80050d4:	3101      	adds	r1, #1
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	e7ee      	b.n	80050b8 <__lshift+0x1c>
 80050da:	2300      	movs	r3, #0
 80050dc:	f100 0114 	add.w	r1, r0, #20
 80050e0:	f100 0210 	add.w	r2, r0, #16
 80050e4:	4618      	mov	r0, r3
 80050e6:	4553      	cmp	r3, sl
 80050e8:	db33      	blt.n	8005152 <__lshift+0xb6>
 80050ea:	6920      	ldr	r0, [r4, #16]
 80050ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80050f0:	f104 0314 	add.w	r3, r4, #20
 80050f4:	f019 091f 	ands.w	r9, r9, #31
 80050f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80050fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005100:	d02b      	beq.n	800515a <__lshift+0xbe>
 8005102:	f1c9 0e20 	rsb	lr, r9, #32
 8005106:	468a      	mov	sl, r1
 8005108:	2200      	movs	r2, #0
 800510a:	6818      	ldr	r0, [r3, #0]
 800510c:	fa00 f009 	lsl.w	r0, r0, r9
 8005110:	4310      	orrs	r0, r2
 8005112:	f84a 0b04 	str.w	r0, [sl], #4
 8005116:	f853 2b04 	ldr.w	r2, [r3], #4
 800511a:	459c      	cmp	ip, r3
 800511c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005120:	d8f3      	bhi.n	800510a <__lshift+0x6e>
 8005122:	ebac 0304 	sub.w	r3, ip, r4
 8005126:	3b15      	subs	r3, #21
 8005128:	f023 0303 	bic.w	r3, r3, #3
 800512c:	3304      	adds	r3, #4
 800512e:	f104 0015 	add.w	r0, r4, #21
 8005132:	4584      	cmp	ip, r0
 8005134:	bf38      	it	cc
 8005136:	2304      	movcc	r3, #4
 8005138:	50ca      	str	r2, [r1, r3]
 800513a:	b10a      	cbz	r2, 8005140 <__lshift+0xa4>
 800513c:	f108 0602 	add.w	r6, r8, #2
 8005140:	3e01      	subs	r6, #1
 8005142:	4638      	mov	r0, r7
 8005144:	612e      	str	r6, [r5, #16]
 8005146:	4621      	mov	r1, r4
 8005148:	f7ff fdd8 	bl	8004cfc <_Bfree>
 800514c:	4628      	mov	r0, r5
 800514e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005152:	f842 0f04 	str.w	r0, [r2, #4]!
 8005156:	3301      	adds	r3, #1
 8005158:	e7c5      	b.n	80050e6 <__lshift+0x4a>
 800515a:	3904      	subs	r1, #4
 800515c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005160:	f841 2f04 	str.w	r2, [r1, #4]!
 8005164:	459c      	cmp	ip, r3
 8005166:	d8f9      	bhi.n	800515c <__lshift+0xc0>
 8005168:	e7ea      	b.n	8005140 <__lshift+0xa4>
 800516a:	bf00      	nop
 800516c:	08005fd7 	.word	0x08005fd7
 8005170:	08005fe8 	.word	0x08005fe8

08005174 <__mcmp>:
 8005174:	b530      	push	{r4, r5, lr}
 8005176:	6902      	ldr	r2, [r0, #16]
 8005178:	690c      	ldr	r4, [r1, #16]
 800517a:	1b12      	subs	r2, r2, r4
 800517c:	d10e      	bne.n	800519c <__mcmp+0x28>
 800517e:	f100 0314 	add.w	r3, r0, #20
 8005182:	3114      	adds	r1, #20
 8005184:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005188:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800518c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005190:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005194:	42a5      	cmp	r5, r4
 8005196:	d003      	beq.n	80051a0 <__mcmp+0x2c>
 8005198:	d305      	bcc.n	80051a6 <__mcmp+0x32>
 800519a:	2201      	movs	r2, #1
 800519c:	4610      	mov	r0, r2
 800519e:	bd30      	pop	{r4, r5, pc}
 80051a0:	4283      	cmp	r3, r0
 80051a2:	d3f3      	bcc.n	800518c <__mcmp+0x18>
 80051a4:	e7fa      	b.n	800519c <__mcmp+0x28>
 80051a6:	f04f 32ff 	mov.w	r2, #4294967295
 80051aa:	e7f7      	b.n	800519c <__mcmp+0x28>

080051ac <__mdiff>:
 80051ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b0:	460c      	mov	r4, r1
 80051b2:	4606      	mov	r6, r0
 80051b4:	4611      	mov	r1, r2
 80051b6:	4620      	mov	r0, r4
 80051b8:	4690      	mov	r8, r2
 80051ba:	f7ff ffdb 	bl	8005174 <__mcmp>
 80051be:	1e05      	subs	r5, r0, #0
 80051c0:	d110      	bne.n	80051e4 <__mdiff+0x38>
 80051c2:	4629      	mov	r1, r5
 80051c4:	4630      	mov	r0, r6
 80051c6:	f7ff fd59 	bl	8004c7c <_Balloc>
 80051ca:	b930      	cbnz	r0, 80051da <__mdiff+0x2e>
 80051cc:	4b3a      	ldr	r3, [pc, #232]	; (80052b8 <__mdiff+0x10c>)
 80051ce:	4602      	mov	r2, r0
 80051d0:	f240 2137 	movw	r1, #567	; 0x237
 80051d4:	4839      	ldr	r0, [pc, #228]	; (80052bc <__mdiff+0x110>)
 80051d6:	f000 fb0b 	bl	80057f0 <__assert_func>
 80051da:	2301      	movs	r3, #1
 80051dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80051e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e4:	bfa4      	itt	ge
 80051e6:	4643      	movge	r3, r8
 80051e8:	46a0      	movge	r8, r4
 80051ea:	4630      	mov	r0, r6
 80051ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80051f0:	bfa6      	itte	ge
 80051f2:	461c      	movge	r4, r3
 80051f4:	2500      	movge	r5, #0
 80051f6:	2501      	movlt	r5, #1
 80051f8:	f7ff fd40 	bl	8004c7c <_Balloc>
 80051fc:	b920      	cbnz	r0, 8005208 <__mdiff+0x5c>
 80051fe:	4b2e      	ldr	r3, [pc, #184]	; (80052b8 <__mdiff+0x10c>)
 8005200:	4602      	mov	r2, r0
 8005202:	f240 2145 	movw	r1, #581	; 0x245
 8005206:	e7e5      	b.n	80051d4 <__mdiff+0x28>
 8005208:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800520c:	6926      	ldr	r6, [r4, #16]
 800520e:	60c5      	str	r5, [r0, #12]
 8005210:	f104 0914 	add.w	r9, r4, #20
 8005214:	f108 0514 	add.w	r5, r8, #20
 8005218:	f100 0e14 	add.w	lr, r0, #20
 800521c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005220:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005224:	f108 0210 	add.w	r2, r8, #16
 8005228:	46f2      	mov	sl, lr
 800522a:	2100      	movs	r1, #0
 800522c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005230:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005234:	fa11 f88b 	uxtah	r8, r1, fp
 8005238:	b299      	uxth	r1, r3
 800523a:	0c1b      	lsrs	r3, r3, #16
 800523c:	eba8 0801 	sub.w	r8, r8, r1
 8005240:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005244:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005248:	fa1f f888 	uxth.w	r8, r8
 800524c:	1419      	asrs	r1, r3, #16
 800524e:	454e      	cmp	r6, r9
 8005250:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005254:	f84a 3b04 	str.w	r3, [sl], #4
 8005258:	d8e8      	bhi.n	800522c <__mdiff+0x80>
 800525a:	1b33      	subs	r3, r6, r4
 800525c:	3b15      	subs	r3, #21
 800525e:	f023 0303 	bic.w	r3, r3, #3
 8005262:	3304      	adds	r3, #4
 8005264:	3415      	adds	r4, #21
 8005266:	42a6      	cmp	r6, r4
 8005268:	bf38      	it	cc
 800526a:	2304      	movcc	r3, #4
 800526c:	441d      	add	r5, r3
 800526e:	4473      	add	r3, lr
 8005270:	469e      	mov	lr, r3
 8005272:	462e      	mov	r6, r5
 8005274:	4566      	cmp	r6, ip
 8005276:	d30e      	bcc.n	8005296 <__mdiff+0xea>
 8005278:	f10c 0203 	add.w	r2, ip, #3
 800527c:	1b52      	subs	r2, r2, r5
 800527e:	f022 0203 	bic.w	r2, r2, #3
 8005282:	3d03      	subs	r5, #3
 8005284:	45ac      	cmp	ip, r5
 8005286:	bf38      	it	cc
 8005288:	2200      	movcc	r2, #0
 800528a:	4413      	add	r3, r2
 800528c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005290:	b17a      	cbz	r2, 80052b2 <__mdiff+0x106>
 8005292:	6107      	str	r7, [r0, #16]
 8005294:	e7a4      	b.n	80051e0 <__mdiff+0x34>
 8005296:	f856 8b04 	ldr.w	r8, [r6], #4
 800529a:	fa11 f288 	uxtah	r2, r1, r8
 800529e:	1414      	asrs	r4, r2, #16
 80052a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80052a4:	b292      	uxth	r2, r2
 80052a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80052aa:	f84e 2b04 	str.w	r2, [lr], #4
 80052ae:	1421      	asrs	r1, r4, #16
 80052b0:	e7e0      	b.n	8005274 <__mdiff+0xc8>
 80052b2:	3f01      	subs	r7, #1
 80052b4:	e7ea      	b.n	800528c <__mdiff+0xe0>
 80052b6:	bf00      	nop
 80052b8:	08005fd7 	.word	0x08005fd7
 80052bc:	08005fe8 	.word	0x08005fe8

080052c0 <__d2b>:
 80052c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80052c4:	460f      	mov	r7, r1
 80052c6:	2101      	movs	r1, #1
 80052c8:	ec59 8b10 	vmov	r8, r9, d0
 80052cc:	4616      	mov	r6, r2
 80052ce:	f7ff fcd5 	bl	8004c7c <_Balloc>
 80052d2:	4604      	mov	r4, r0
 80052d4:	b930      	cbnz	r0, 80052e4 <__d2b+0x24>
 80052d6:	4602      	mov	r2, r0
 80052d8:	4b24      	ldr	r3, [pc, #144]	; (800536c <__d2b+0xac>)
 80052da:	4825      	ldr	r0, [pc, #148]	; (8005370 <__d2b+0xb0>)
 80052dc:	f240 310f 	movw	r1, #783	; 0x30f
 80052e0:	f000 fa86 	bl	80057f0 <__assert_func>
 80052e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80052e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80052ec:	bb2d      	cbnz	r5, 800533a <__d2b+0x7a>
 80052ee:	9301      	str	r3, [sp, #4]
 80052f0:	f1b8 0300 	subs.w	r3, r8, #0
 80052f4:	d026      	beq.n	8005344 <__d2b+0x84>
 80052f6:	4668      	mov	r0, sp
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	f7ff fd87 	bl	8004e0c <__lo0bits>
 80052fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005302:	b1e8      	cbz	r0, 8005340 <__d2b+0x80>
 8005304:	f1c0 0320 	rsb	r3, r0, #32
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	430b      	orrs	r3, r1
 800530e:	40c2      	lsrs	r2, r0
 8005310:	6163      	str	r3, [r4, #20]
 8005312:	9201      	str	r2, [sp, #4]
 8005314:	9b01      	ldr	r3, [sp, #4]
 8005316:	61a3      	str	r3, [r4, #24]
 8005318:	2b00      	cmp	r3, #0
 800531a:	bf14      	ite	ne
 800531c:	2202      	movne	r2, #2
 800531e:	2201      	moveq	r2, #1
 8005320:	6122      	str	r2, [r4, #16]
 8005322:	b1bd      	cbz	r5, 8005354 <__d2b+0x94>
 8005324:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005328:	4405      	add	r5, r0
 800532a:	603d      	str	r5, [r7, #0]
 800532c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005330:	6030      	str	r0, [r6, #0]
 8005332:	4620      	mov	r0, r4
 8005334:	b003      	add	sp, #12
 8005336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800533a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800533e:	e7d6      	b.n	80052ee <__d2b+0x2e>
 8005340:	6161      	str	r1, [r4, #20]
 8005342:	e7e7      	b.n	8005314 <__d2b+0x54>
 8005344:	a801      	add	r0, sp, #4
 8005346:	f7ff fd61 	bl	8004e0c <__lo0bits>
 800534a:	9b01      	ldr	r3, [sp, #4]
 800534c:	6163      	str	r3, [r4, #20]
 800534e:	3020      	adds	r0, #32
 8005350:	2201      	movs	r2, #1
 8005352:	e7e5      	b.n	8005320 <__d2b+0x60>
 8005354:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005358:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800535c:	6038      	str	r0, [r7, #0]
 800535e:	6918      	ldr	r0, [r3, #16]
 8005360:	f7ff fd34 	bl	8004dcc <__hi0bits>
 8005364:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005368:	e7e2      	b.n	8005330 <__d2b+0x70>
 800536a:	bf00      	nop
 800536c:	08005fd7 	.word	0x08005fd7
 8005370:	08005fe8 	.word	0x08005fe8

08005374 <__ssputs_r>:
 8005374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005378:	688e      	ldr	r6, [r1, #8]
 800537a:	461f      	mov	r7, r3
 800537c:	42be      	cmp	r6, r7
 800537e:	680b      	ldr	r3, [r1, #0]
 8005380:	4682      	mov	sl, r0
 8005382:	460c      	mov	r4, r1
 8005384:	4690      	mov	r8, r2
 8005386:	d82c      	bhi.n	80053e2 <__ssputs_r+0x6e>
 8005388:	898a      	ldrh	r2, [r1, #12]
 800538a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800538e:	d026      	beq.n	80053de <__ssputs_r+0x6a>
 8005390:	6965      	ldr	r5, [r4, #20]
 8005392:	6909      	ldr	r1, [r1, #16]
 8005394:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005398:	eba3 0901 	sub.w	r9, r3, r1
 800539c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053a0:	1c7b      	adds	r3, r7, #1
 80053a2:	444b      	add	r3, r9
 80053a4:	106d      	asrs	r5, r5, #1
 80053a6:	429d      	cmp	r5, r3
 80053a8:	bf38      	it	cc
 80053aa:	461d      	movcc	r5, r3
 80053ac:	0553      	lsls	r3, r2, #21
 80053ae:	d527      	bpl.n	8005400 <__ssputs_r+0x8c>
 80053b0:	4629      	mov	r1, r5
 80053b2:	f7ff fbd7 	bl	8004b64 <_malloc_r>
 80053b6:	4606      	mov	r6, r0
 80053b8:	b360      	cbz	r0, 8005414 <__ssputs_r+0xa0>
 80053ba:	6921      	ldr	r1, [r4, #16]
 80053bc:	464a      	mov	r2, r9
 80053be:	f000 fa09 	bl	80057d4 <memcpy>
 80053c2:	89a3      	ldrh	r3, [r4, #12]
 80053c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053cc:	81a3      	strh	r3, [r4, #12]
 80053ce:	6126      	str	r6, [r4, #16]
 80053d0:	6165      	str	r5, [r4, #20]
 80053d2:	444e      	add	r6, r9
 80053d4:	eba5 0509 	sub.w	r5, r5, r9
 80053d8:	6026      	str	r6, [r4, #0]
 80053da:	60a5      	str	r5, [r4, #8]
 80053dc:	463e      	mov	r6, r7
 80053de:	42be      	cmp	r6, r7
 80053e0:	d900      	bls.n	80053e4 <__ssputs_r+0x70>
 80053e2:	463e      	mov	r6, r7
 80053e4:	6820      	ldr	r0, [r4, #0]
 80053e6:	4632      	mov	r2, r6
 80053e8:	4641      	mov	r1, r8
 80053ea:	f000 f9c9 	bl	8005780 <memmove>
 80053ee:	68a3      	ldr	r3, [r4, #8]
 80053f0:	1b9b      	subs	r3, r3, r6
 80053f2:	60a3      	str	r3, [r4, #8]
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	4433      	add	r3, r6
 80053f8:	6023      	str	r3, [r4, #0]
 80053fa:	2000      	movs	r0, #0
 80053fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005400:	462a      	mov	r2, r5
 8005402:	f000 fa3b 	bl	800587c <_realloc_r>
 8005406:	4606      	mov	r6, r0
 8005408:	2800      	cmp	r0, #0
 800540a:	d1e0      	bne.n	80053ce <__ssputs_r+0x5a>
 800540c:	6921      	ldr	r1, [r4, #16]
 800540e:	4650      	mov	r0, sl
 8005410:	f7ff fb34 	bl	8004a7c <_free_r>
 8005414:	230c      	movs	r3, #12
 8005416:	f8ca 3000 	str.w	r3, [sl]
 800541a:	89a3      	ldrh	r3, [r4, #12]
 800541c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005420:	81a3      	strh	r3, [r4, #12]
 8005422:	f04f 30ff 	mov.w	r0, #4294967295
 8005426:	e7e9      	b.n	80053fc <__ssputs_r+0x88>

08005428 <_svfiprintf_r>:
 8005428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542c:	4698      	mov	r8, r3
 800542e:	898b      	ldrh	r3, [r1, #12]
 8005430:	061b      	lsls	r3, r3, #24
 8005432:	b09d      	sub	sp, #116	; 0x74
 8005434:	4607      	mov	r7, r0
 8005436:	460d      	mov	r5, r1
 8005438:	4614      	mov	r4, r2
 800543a:	d50e      	bpl.n	800545a <_svfiprintf_r+0x32>
 800543c:	690b      	ldr	r3, [r1, #16]
 800543e:	b963      	cbnz	r3, 800545a <_svfiprintf_r+0x32>
 8005440:	2140      	movs	r1, #64	; 0x40
 8005442:	f7ff fb8f 	bl	8004b64 <_malloc_r>
 8005446:	6028      	str	r0, [r5, #0]
 8005448:	6128      	str	r0, [r5, #16]
 800544a:	b920      	cbnz	r0, 8005456 <_svfiprintf_r+0x2e>
 800544c:	230c      	movs	r3, #12
 800544e:	603b      	str	r3, [r7, #0]
 8005450:	f04f 30ff 	mov.w	r0, #4294967295
 8005454:	e0d0      	b.n	80055f8 <_svfiprintf_r+0x1d0>
 8005456:	2340      	movs	r3, #64	; 0x40
 8005458:	616b      	str	r3, [r5, #20]
 800545a:	2300      	movs	r3, #0
 800545c:	9309      	str	r3, [sp, #36]	; 0x24
 800545e:	2320      	movs	r3, #32
 8005460:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005464:	f8cd 800c 	str.w	r8, [sp, #12]
 8005468:	2330      	movs	r3, #48	; 0x30
 800546a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005610 <_svfiprintf_r+0x1e8>
 800546e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005472:	f04f 0901 	mov.w	r9, #1
 8005476:	4623      	mov	r3, r4
 8005478:	469a      	mov	sl, r3
 800547a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800547e:	b10a      	cbz	r2, 8005484 <_svfiprintf_r+0x5c>
 8005480:	2a25      	cmp	r2, #37	; 0x25
 8005482:	d1f9      	bne.n	8005478 <_svfiprintf_r+0x50>
 8005484:	ebba 0b04 	subs.w	fp, sl, r4
 8005488:	d00b      	beq.n	80054a2 <_svfiprintf_r+0x7a>
 800548a:	465b      	mov	r3, fp
 800548c:	4622      	mov	r2, r4
 800548e:	4629      	mov	r1, r5
 8005490:	4638      	mov	r0, r7
 8005492:	f7ff ff6f 	bl	8005374 <__ssputs_r>
 8005496:	3001      	adds	r0, #1
 8005498:	f000 80a9 	beq.w	80055ee <_svfiprintf_r+0x1c6>
 800549c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800549e:	445a      	add	r2, fp
 80054a0:	9209      	str	r2, [sp, #36]	; 0x24
 80054a2:	f89a 3000 	ldrb.w	r3, [sl]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 80a1 	beq.w	80055ee <_svfiprintf_r+0x1c6>
 80054ac:	2300      	movs	r3, #0
 80054ae:	f04f 32ff 	mov.w	r2, #4294967295
 80054b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054b6:	f10a 0a01 	add.w	sl, sl, #1
 80054ba:	9304      	str	r3, [sp, #16]
 80054bc:	9307      	str	r3, [sp, #28]
 80054be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054c2:	931a      	str	r3, [sp, #104]	; 0x68
 80054c4:	4654      	mov	r4, sl
 80054c6:	2205      	movs	r2, #5
 80054c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054cc:	4850      	ldr	r0, [pc, #320]	; (8005610 <_svfiprintf_r+0x1e8>)
 80054ce:	f7fa fe7f 	bl	80001d0 <memchr>
 80054d2:	9a04      	ldr	r2, [sp, #16]
 80054d4:	b9d8      	cbnz	r0, 800550e <_svfiprintf_r+0xe6>
 80054d6:	06d0      	lsls	r0, r2, #27
 80054d8:	bf44      	itt	mi
 80054da:	2320      	movmi	r3, #32
 80054dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054e0:	0711      	lsls	r1, r2, #28
 80054e2:	bf44      	itt	mi
 80054e4:	232b      	movmi	r3, #43	; 0x2b
 80054e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054ea:	f89a 3000 	ldrb.w	r3, [sl]
 80054ee:	2b2a      	cmp	r3, #42	; 0x2a
 80054f0:	d015      	beq.n	800551e <_svfiprintf_r+0xf6>
 80054f2:	9a07      	ldr	r2, [sp, #28]
 80054f4:	4654      	mov	r4, sl
 80054f6:	2000      	movs	r0, #0
 80054f8:	f04f 0c0a 	mov.w	ip, #10
 80054fc:	4621      	mov	r1, r4
 80054fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005502:	3b30      	subs	r3, #48	; 0x30
 8005504:	2b09      	cmp	r3, #9
 8005506:	d94d      	bls.n	80055a4 <_svfiprintf_r+0x17c>
 8005508:	b1b0      	cbz	r0, 8005538 <_svfiprintf_r+0x110>
 800550a:	9207      	str	r2, [sp, #28]
 800550c:	e014      	b.n	8005538 <_svfiprintf_r+0x110>
 800550e:	eba0 0308 	sub.w	r3, r0, r8
 8005512:	fa09 f303 	lsl.w	r3, r9, r3
 8005516:	4313      	orrs	r3, r2
 8005518:	9304      	str	r3, [sp, #16]
 800551a:	46a2      	mov	sl, r4
 800551c:	e7d2      	b.n	80054c4 <_svfiprintf_r+0x9c>
 800551e:	9b03      	ldr	r3, [sp, #12]
 8005520:	1d19      	adds	r1, r3, #4
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	9103      	str	r1, [sp, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	bfbb      	ittet	lt
 800552a:	425b      	neglt	r3, r3
 800552c:	f042 0202 	orrlt.w	r2, r2, #2
 8005530:	9307      	strge	r3, [sp, #28]
 8005532:	9307      	strlt	r3, [sp, #28]
 8005534:	bfb8      	it	lt
 8005536:	9204      	strlt	r2, [sp, #16]
 8005538:	7823      	ldrb	r3, [r4, #0]
 800553a:	2b2e      	cmp	r3, #46	; 0x2e
 800553c:	d10c      	bne.n	8005558 <_svfiprintf_r+0x130>
 800553e:	7863      	ldrb	r3, [r4, #1]
 8005540:	2b2a      	cmp	r3, #42	; 0x2a
 8005542:	d134      	bne.n	80055ae <_svfiprintf_r+0x186>
 8005544:	9b03      	ldr	r3, [sp, #12]
 8005546:	1d1a      	adds	r2, r3, #4
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	9203      	str	r2, [sp, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	bfb8      	it	lt
 8005550:	f04f 33ff 	movlt.w	r3, #4294967295
 8005554:	3402      	adds	r4, #2
 8005556:	9305      	str	r3, [sp, #20]
 8005558:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005620 <_svfiprintf_r+0x1f8>
 800555c:	7821      	ldrb	r1, [r4, #0]
 800555e:	2203      	movs	r2, #3
 8005560:	4650      	mov	r0, sl
 8005562:	f7fa fe35 	bl	80001d0 <memchr>
 8005566:	b138      	cbz	r0, 8005578 <_svfiprintf_r+0x150>
 8005568:	9b04      	ldr	r3, [sp, #16]
 800556a:	eba0 000a 	sub.w	r0, r0, sl
 800556e:	2240      	movs	r2, #64	; 0x40
 8005570:	4082      	lsls	r2, r0
 8005572:	4313      	orrs	r3, r2
 8005574:	3401      	adds	r4, #1
 8005576:	9304      	str	r3, [sp, #16]
 8005578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800557c:	4825      	ldr	r0, [pc, #148]	; (8005614 <_svfiprintf_r+0x1ec>)
 800557e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005582:	2206      	movs	r2, #6
 8005584:	f7fa fe24 	bl	80001d0 <memchr>
 8005588:	2800      	cmp	r0, #0
 800558a:	d038      	beq.n	80055fe <_svfiprintf_r+0x1d6>
 800558c:	4b22      	ldr	r3, [pc, #136]	; (8005618 <_svfiprintf_r+0x1f0>)
 800558e:	bb1b      	cbnz	r3, 80055d8 <_svfiprintf_r+0x1b0>
 8005590:	9b03      	ldr	r3, [sp, #12]
 8005592:	3307      	adds	r3, #7
 8005594:	f023 0307 	bic.w	r3, r3, #7
 8005598:	3308      	adds	r3, #8
 800559a:	9303      	str	r3, [sp, #12]
 800559c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800559e:	4433      	add	r3, r6
 80055a0:	9309      	str	r3, [sp, #36]	; 0x24
 80055a2:	e768      	b.n	8005476 <_svfiprintf_r+0x4e>
 80055a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80055a8:	460c      	mov	r4, r1
 80055aa:	2001      	movs	r0, #1
 80055ac:	e7a6      	b.n	80054fc <_svfiprintf_r+0xd4>
 80055ae:	2300      	movs	r3, #0
 80055b0:	3401      	adds	r4, #1
 80055b2:	9305      	str	r3, [sp, #20]
 80055b4:	4619      	mov	r1, r3
 80055b6:	f04f 0c0a 	mov.w	ip, #10
 80055ba:	4620      	mov	r0, r4
 80055bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055c0:	3a30      	subs	r2, #48	; 0x30
 80055c2:	2a09      	cmp	r2, #9
 80055c4:	d903      	bls.n	80055ce <_svfiprintf_r+0x1a6>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0c6      	beq.n	8005558 <_svfiprintf_r+0x130>
 80055ca:	9105      	str	r1, [sp, #20]
 80055cc:	e7c4      	b.n	8005558 <_svfiprintf_r+0x130>
 80055ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80055d2:	4604      	mov	r4, r0
 80055d4:	2301      	movs	r3, #1
 80055d6:	e7f0      	b.n	80055ba <_svfiprintf_r+0x192>
 80055d8:	ab03      	add	r3, sp, #12
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	462a      	mov	r2, r5
 80055de:	4b0f      	ldr	r3, [pc, #60]	; (800561c <_svfiprintf_r+0x1f4>)
 80055e0:	a904      	add	r1, sp, #16
 80055e2:	4638      	mov	r0, r7
 80055e4:	f7fd fe64 	bl	80032b0 <_printf_float>
 80055e8:	1c42      	adds	r2, r0, #1
 80055ea:	4606      	mov	r6, r0
 80055ec:	d1d6      	bne.n	800559c <_svfiprintf_r+0x174>
 80055ee:	89ab      	ldrh	r3, [r5, #12]
 80055f0:	065b      	lsls	r3, r3, #25
 80055f2:	f53f af2d 	bmi.w	8005450 <_svfiprintf_r+0x28>
 80055f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055f8:	b01d      	add	sp, #116	; 0x74
 80055fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055fe:	ab03      	add	r3, sp, #12
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	462a      	mov	r2, r5
 8005604:	4b05      	ldr	r3, [pc, #20]	; (800561c <_svfiprintf_r+0x1f4>)
 8005606:	a904      	add	r1, sp, #16
 8005608:	4638      	mov	r0, r7
 800560a:	f7fe f8f5 	bl	80037f8 <_printf_i>
 800560e:	e7eb      	b.n	80055e8 <_svfiprintf_r+0x1c0>
 8005610:	08006144 	.word	0x08006144
 8005614:	0800614e 	.word	0x0800614e
 8005618:	080032b1 	.word	0x080032b1
 800561c:	08005375 	.word	0x08005375
 8005620:	0800614a 	.word	0x0800614a

08005624 <__sflush_r>:
 8005624:	898a      	ldrh	r2, [r1, #12]
 8005626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800562a:	4605      	mov	r5, r0
 800562c:	0710      	lsls	r0, r2, #28
 800562e:	460c      	mov	r4, r1
 8005630:	d458      	bmi.n	80056e4 <__sflush_r+0xc0>
 8005632:	684b      	ldr	r3, [r1, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	dc05      	bgt.n	8005644 <__sflush_r+0x20>
 8005638:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	dc02      	bgt.n	8005644 <__sflush_r+0x20>
 800563e:	2000      	movs	r0, #0
 8005640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005644:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005646:	2e00      	cmp	r6, #0
 8005648:	d0f9      	beq.n	800563e <__sflush_r+0x1a>
 800564a:	2300      	movs	r3, #0
 800564c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005650:	682f      	ldr	r7, [r5, #0]
 8005652:	6a21      	ldr	r1, [r4, #32]
 8005654:	602b      	str	r3, [r5, #0]
 8005656:	d032      	beq.n	80056be <__sflush_r+0x9a>
 8005658:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800565a:	89a3      	ldrh	r3, [r4, #12]
 800565c:	075a      	lsls	r2, r3, #29
 800565e:	d505      	bpl.n	800566c <__sflush_r+0x48>
 8005660:	6863      	ldr	r3, [r4, #4]
 8005662:	1ac0      	subs	r0, r0, r3
 8005664:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005666:	b10b      	cbz	r3, 800566c <__sflush_r+0x48>
 8005668:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800566a:	1ac0      	subs	r0, r0, r3
 800566c:	2300      	movs	r3, #0
 800566e:	4602      	mov	r2, r0
 8005670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005672:	6a21      	ldr	r1, [r4, #32]
 8005674:	4628      	mov	r0, r5
 8005676:	47b0      	blx	r6
 8005678:	1c43      	adds	r3, r0, #1
 800567a:	89a3      	ldrh	r3, [r4, #12]
 800567c:	d106      	bne.n	800568c <__sflush_r+0x68>
 800567e:	6829      	ldr	r1, [r5, #0]
 8005680:	291d      	cmp	r1, #29
 8005682:	d82b      	bhi.n	80056dc <__sflush_r+0xb8>
 8005684:	4a29      	ldr	r2, [pc, #164]	; (800572c <__sflush_r+0x108>)
 8005686:	410a      	asrs	r2, r1
 8005688:	07d6      	lsls	r6, r2, #31
 800568a:	d427      	bmi.n	80056dc <__sflush_r+0xb8>
 800568c:	2200      	movs	r2, #0
 800568e:	6062      	str	r2, [r4, #4]
 8005690:	04d9      	lsls	r1, r3, #19
 8005692:	6922      	ldr	r2, [r4, #16]
 8005694:	6022      	str	r2, [r4, #0]
 8005696:	d504      	bpl.n	80056a2 <__sflush_r+0x7e>
 8005698:	1c42      	adds	r2, r0, #1
 800569a:	d101      	bne.n	80056a0 <__sflush_r+0x7c>
 800569c:	682b      	ldr	r3, [r5, #0]
 800569e:	b903      	cbnz	r3, 80056a2 <__sflush_r+0x7e>
 80056a0:	6560      	str	r0, [r4, #84]	; 0x54
 80056a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056a4:	602f      	str	r7, [r5, #0]
 80056a6:	2900      	cmp	r1, #0
 80056a8:	d0c9      	beq.n	800563e <__sflush_r+0x1a>
 80056aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056ae:	4299      	cmp	r1, r3
 80056b0:	d002      	beq.n	80056b8 <__sflush_r+0x94>
 80056b2:	4628      	mov	r0, r5
 80056b4:	f7ff f9e2 	bl	8004a7c <_free_r>
 80056b8:	2000      	movs	r0, #0
 80056ba:	6360      	str	r0, [r4, #52]	; 0x34
 80056bc:	e7c0      	b.n	8005640 <__sflush_r+0x1c>
 80056be:	2301      	movs	r3, #1
 80056c0:	4628      	mov	r0, r5
 80056c2:	47b0      	blx	r6
 80056c4:	1c41      	adds	r1, r0, #1
 80056c6:	d1c8      	bne.n	800565a <__sflush_r+0x36>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0c5      	beq.n	800565a <__sflush_r+0x36>
 80056ce:	2b1d      	cmp	r3, #29
 80056d0:	d001      	beq.n	80056d6 <__sflush_r+0xb2>
 80056d2:	2b16      	cmp	r3, #22
 80056d4:	d101      	bne.n	80056da <__sflush_r+0xb6>
 80056d6:	602f      	str	r7, [r5, #0]
 80056d8:	e7b1      	b.n	800563e <__sflush_r+0x1a>
 80056da:	89a3      	ldrh	r3, [r4, #12]
 80056dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056e0:	81a3      	strh	r3, [r4, #12]
 80056e2:	e7ad      	b.n	8005640 <__sflush_r+0x1c>
 80056e4:	690f      	ldr	r7, [r1, #16]
 80056e6:	2f00      	cmp	r7, #0
 80056e8:	d0a9      	beq.n	800563e <__sflush_r+0x1a>
 80056ea:	0793      	lsls	r3, r2, #30
 80056ec:	680e      	ldr	r6, [r1, #0]
 80056ee:	bf08      	it	eq
 80056f0:	694b      	ldreq	r3, [r1, #20]
 80056f2:	600f      	str	r7, [r1, #0]
 80056f4:	bf18      	it	ne
 80056f6:	2300      	movne	r3, #0
 80056f8:	eba6 0807 	sub.w	r8, r6, r7
 80056fc:	608b      	str	r3, [r1, #8]
 80056fe:	f1b8 0f00 	cmp.w	r8, #0
 8005702:	dd9c      	ble.n	800563e <__sflush_r+0x1a>
 8005704:	6a21      	ldr	r1, [r4, #32]
 8005706:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005708:	4643      	mov	r3, r8
 800570a:	463a      	mov	r2, r7
 800570c:	4628      	mov	r0, r5
 800570e:	47b0      	blx	r6
 8005710:	2800      	cmp	r0, #0
 8005712:	dc06      	bgt.n	8005722 <__sflush_r+0xfe>
 8005714:	89a3      	ldrh	r3, [r4, #12]
 8005716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800571a:	81a3      	strh	r3, [r4, #12]
 800571c:	f04f 30ff 	mov.w	r0, #4294967295
 8005720:	e78e      	b.n	8005640 <__sflush_r+0x1c>
 8005722:	4407      	add	r7, r0
 8005724:	eba8 0800 	sub.w	r8, r8, r0
 8005728:	e7e9      	b.n	80056fe <__sflush_r+0xda>
 800572a:	bf00      	nop
 800572c:	dfbffffe 	.word	0xdfbffffe

08005730 <_fflush_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	690b      	ldr	r3, [r1, #16]
 8005734:	4605      	mov	r5, r0
 8005736:	460c      	mov	r4, r1
 8005738:	b913      	cbnz	r3, 8005740 <_fflush_r+0x10>
 800573a:	2500      	movs	r5, #0
 800573c:	4628      	mov	r0, r5
 800573e:	bd38      	pop	{r3, r4, r5, pc}
 8005740:	b118      	cbz	r0, 800574a <_fflush_r+0x1a>
 8005742:	6a03      	ldr	r3, [r0, #32]
 8005744:	b90b      	cbnz	r3, 800574a <_fflush_r+0x1a>
 8005746:	f7fe fa05 	bl	8003b54 <__sinit>
 800574a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0f3      	beq.n	800573a <_fflush_r+0xa>
 8005752:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005754:	07d0      	lsls	r0, r2, #31
 8005756:	d404      	bmi.n	8005762 <_fflush_r+0x32>
 8005758:	0599      	lsls	r1, r3, #22
 800575a:	d402      	bmi.n	8005762 <_fflush_r+0x32>
 800575c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800575e:	f7fe fb10 	bl	8003d82 <__retarget_lock_acquire_recursive>
 8005762:	4628      	mov	r0, r5
 8005764:	4621      	mov	r1, r4
 8005766:	f7ff ff5d 	bl	8005624 <__sflush_r>
 800576a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800576c:	07da      	lsls	r2, r3, #31
 800576e:	4605      	mov	r5, r0
 8005770:	d4e4      	bmi.n	800573c <_fflush_r+0xc>
 8005772:	89a3      	ldrh	r3, [r4, #12]
 8005774:	059b      	lsls	r3, r3, #22
 8005776:	d4e1      	bmi.n	800573c <_fflush_r+0xc>
 8005778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800577a:	f7fe fb03 	bl	8003d84 <__retarget_lock_release_recursive>
 800577e:	e7dd      	b.n	800573c <_fflush_r+0xc>

08005780 <memmove>:
 8005780:	4288      	cmp	r0, r1
 8005782:	b510      	push	{r4, lr}
 8005784:	eb01 0402 	add.w	r4, r1, r2
 8005788:	d902      	bls.n	8005790 <memmove+0x10>
 800578a:	4284      	cmp	r4, r0
 800578c:	4623      	mov	r3, r4
 800578e:	d807      	bhi.n	80057a0 <memmove+0x20>
 8005790:	1e43      	subs	r3, r0, #1
 8005792:	42a1      	cmp	r1, r4
 8005794:	d008      	beq.n	80057a8 <memmove+0x28>
 8005796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800579a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800579e:	e7f8      	b.n	8005792 <memmove+0x12>
 80057a0:	4402      	add	r2, r0
 80057a2:	4601      	mov	r1, r0
 80057a4:	428a      	cmp	r2, r1
 80057a6:	d100      	bne.n	80057aa <memmove+0x2a>
 80057a8:	bd10      	pop	{r4, pc}
 80057aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057b2:	e7f7      	b.n	80057a4 <memmove+0x24>

080057b4 <_sbrk_r>:
 80057b4:	b538      	push	{r3, r4, r5, lr}
 80057b6:	4d06      	ldr	r5, [pc, #24]	; (80057d0 <_sbrk_r+0x1c>)
 80057b8:	2300      	movs	r3, #0
 80057ba:	4604      	mov	r4, r0
 80057bc:	4608      	mov	r0, r1
 80057be:	602b      	str	r3, [r5, #0]
 80057c0:	f7fc ff86 	bl	80026d0 <_sbrk>
 80057c4:	1c43      	adds	r3, r0, #1
 80057c6:	d102      	bne.n	80057ce <_sbrk_r+0x1a>
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	b103      	cbz	r3, 80057ce <_sbrk_r+0x1a>
 80057cc:	6023      	str	r3, [r4, #0]
 80057ce:	bd38      	pop	{r3, r4, r5, pc}
 80057d0:	200005b0 	.word	0x200005b0

080057d4 <memcpy>:
 80057d4:	440a      	add	r2, r1
 80057d6:	4291      	cmp	r1, r2
 80057d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80057dc:	d100      	bne.n	80057e0 <memcpy+0xc>
 80057de:	4770      	bx	lr
 80057e0:	b510      	push	{r4, lr}
 80057e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057ea:	4291      	cmp	r1, r2
 80057ec:	d1f9      	bne.n	80057e2 <memcpy+0xe>
 80057ee:	bd10      	pop	{r4, pc}

080057f0 <__assert_func>:
 80057f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057f2:	4614      	mov	r4, r2
 80057f4:	461a      	mov	r2, r3
 80057f6:	4b09      	ldr	r3, [pc, #36]	; (800581c <__assert_func+0x2c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4605      	mov	r5, r0
 80057fc:	68d8      	ldr	r0, [r3, #12]
 80057fe:	b14c      	cbz	r4, 8005814 <__assert_func+0x24>
 8005800:	4b07      	ldr	r3, [pc, #28]	; (8005820 <__assert_func+0x30>)
 8005802:	9100      	str	r1, [sp, #0]
 8005804:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005808:	4906      	ldr	r1, [pc, #24]	; (8005824 <__assert_func+0x34>)
 800580a:	462b      	mov	r3, r5
 800580c:	f000 f872 	bl	80058f4 <fiprintf>
 8005810:	f000 f882 	bl	8005918 <abort>
 8005814:	4b04      	ldr	r3, [pc, #16]	; (8005828 <__assert_func+0x38>)
 8005816:	461c      	mov	r4, r3
 8005818:	e7f3      	b.n	8005802 <__assert_func+0x12>
 800581a:	bf00      	nop
 800581c:	2000005c 	.word	0x2000005c
 8005820:	0800615f 	.word	0x0800615f
 8005824:	0800616c 	.word	0x0800616c
 8005828:	0800619a 	.word	0x0800619a

0800582c <_calloc_r>:
 800582c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800582e:	fba1 2402 	umull	r2, r4, r1, r2
 8005832:	b94c      	cbnz	r4, 8005848 <_calloc_r+0x1c>
 8005834:	4611      	mov	r1, r2
 8005836:	9201      	str	r2, [sp, #4]
 8005838:	f7ff f994 	bl	8004b64 <_malloc_r>
 800583c:	9a01      	ldr	r2, [sp, #4]
 800583e:	4605      	mov	r5, r0
 8005840:	b930      	cbnz	r0, 8005850 <_calloc_r+0x24>
 8005842:	4628      	mov	r0, r5
 8005844:	b003      	add	sp, #12
 8005846:	bd30      	pop	{r4, r5, pc}
 8005848:	220c      	movs	r2, #12
 800584a:	6002      	str	r2, [r0, #0]
 800584c:	2500      	movs	r5, #0
 800584e:	e7f8      	b.n	8005842 <_calloc_r+0x16>
 8005850:	4621      	mov	r1, r4
 8005852:	f7fe fa18 	bl	8003c86 <memset>
 8005856:	e7f4      	b.n	8005842 <_calloc_r+0x16>

08005858 <__ascii_mbtowc>:
 8005858:	b082      	sub	sp, #8
 800585a:	b901      	cbnz	r1, 800585e <__ascii_mbtowc+0x6>
 800585c:	a901      	add	r1, sp, #4
 800585e:	b142      	cbz	r2, 8005872 <__ascii_mbtowc+0x1a>
 8005860:	b14b      	cbz	r3, 8005876 <__ascii_mbtowc+0x1e>
 8005862:	7813      	ldrb	r3, [r2, #0]
 8005864:	600b      	str	r3, [r1, #0]
 8005866:	7812      	ldrb	r2, [r2, #0]
 8005868:	1e10      	subs	r0, r2, #0
 800586a:	bf18      	it	ne
 800586c:	2001      	movne	r0, #1
 800586e:	b002      	add	sp, #8
 8005870:	4770      	bx	lr
 8005872:	4610      	mov	r0, r2
 8005874:	e7fb      	b.n	800586e <__ascii_mbtowc+0x16>
 8005876:	f06f 0001 	mvn.w	r0, #1
 800587a:	e7f8      	b.n	800586e <__ascii_mbtowc+0x16>

0800587c <_realloc_r>:
 800587c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005880:	4680      	mov	r8, r0
 8005882:	4614      	mov	r4, r2
 8005884:	460e      	mov	r6, r1
 8005886:	b921      	cbnz	r1, 8005892 <_realloc_r+0x16>
 8005888:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800588c:	4611      	mov	r1, r2
 800588e:	f7ff b969 	b.w	8004b64 <_malloc_r>
 8005892:	b92a      	cbnz	r2, 80058a0 <_realloc_r+0x24>
 8005894:	f7ff f8f2 	bl	8004a7c <_free_r>
 8005898:	4625      	mov	r5, r4
 800589a:	4628      	mov	r0, r5
 800589c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058a0:	f000 f841 	bl	8005926 <_malloc_usable_size_r>
 80058a4:	4284      	cmp	r4, r0
 80058a6:	4607      	mov	r7, r0
 80058a8:	d802      	bhi.n	80058b0 <_realloc_r+0x34>
 80058aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058ae:	d812      	bhi.n	80058d6 <_realloc_r+0x5a>
 80058b0:	4621      	mov	r1, r4
 80058b2:	4640      	mov	r0, r8
 80058b4:	f7ff f956 	bl	8004b64 <_malloc_r>
 80058b8:	4605      	mov	r5, r0
 80058ba:	2800      	cmp	r0, #0
 80058bc:	d0ed      	beq.n	800589a <_realloc_r+0x1e>
 80058be:	42bc      	cmp	r4, r7
 80058c0:	4622      	mov	r2, r4
 80058c2:	4631      	mov	r1, r6
 80058c4:	bf28      	it	cs
 80058c6:	463a      	movcs	r2, r7
 80058c8:	f7ff ff84 	bl	80057d4 <memcpy>
 80058cc:	4631      	mov	r1, r6
 80058ce:	4640      	mov	r0, r8
 80058d0:	f7ff f8d4 	bl	8004a7c <_free_r>
 80058d4:	e7e1      	b.n	800589a <_realloc_r+0x1e>
 80058d6:	4635      	mov	r5, r6
 80058d8:	e7df      	b.n	800589a <_realloc_r+0x1e>

080058da <__ascii_wctomb>:
 80058da:	b149      	cbz	r1, 80058f0 <__ascii_wctomb+0x16>
 80058dc:	2aff      	cmp	r2, #255	; 0xff
 80058de:	bf85      	ittet	hi
 80058e0:	238a      	movhi	r3, #138	; 0x8a
 80058e2:	6003      	strhi	r3, [r0, #0]
 80058e4:	700a      	strbls	r2, [r1, #0]
 80058e6:	f04f 30ff 	movhi.w	r0, #4294967295
 80058ea:	bf98      	it	ls
 80058ec:	2001      	movls	r0, #1
 80058ee:	4770      	bx	lr
 80058f0:	4608      	mov	r0, r1
 80058f2:	4770      	bx	lr

080058f4 <fiprintf>:
 80058f4:	b40e      	push	{r1, r2, r3}
 80058f6:	b503      	push	{r0, r1, lr}
 80058f8:	4601      	mov	r1, r0
 80058fa:	ab03      	add	r3, sp, #12
 80058fc:	4805      	ldr	r0, [pc, #20]	; (8005914 <fiprintf+0x20>)
 80058fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005902:	6800      	ldr	r0, [r0, #0]
 8005904:	9301      	str	r3, [sp, #4]
 8005906:	f000 f83f 	bl	8005988 <_vfiprintf_r>
 800590a:	b002      	add	sp, #8
 800590c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005910:	b003      	add	sp, #12
 8005912:	4770      	bx	lr
 8005914:	2000005c 	.word	0x2000005c

08005918 <abort>:
 8005918:	b508      	push	{r3, lr}
 800591a:	2006      	movs	r0, #6
 800591c:	f000 fa0c 	bl	8005d38 <raise>
 8005920:	2001      	movs	r0, #1
 8005922:	f7fc fe5d 	bl	80025e0 <_exit>

08005926 <_malloc_usable_size_r>:
 8005926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800592a:	1f18      	subs	r0, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	bfbc      	itt	lt
 8005930:	580b      	ldrlt	r3, [r1, r0]
 8005932:	18c0      	addlt	r0, r0, r3
 8005934:	4770      	bx	lr

08005936 <__sfputc_r>:
 8005936:	6893      	ldr	r3, [r2, #8]
 8005938:	3b01      	subs	r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	b410      	push	{r4}
 800593e:	6093      	str	r3, [r2, #8]
 8005940:	da08      	bge.n	8005954 <__sfputc_r+0x1e>
 8005942:	6994      	ldr	r4, [r2, #24]
 8005944:	42a3      	cmp	r3, r4
 8005946:	db01      	blt.n	800594c <__sfputc_r+0x16>
 8005948:	290a      	cmp	r1, #10
 800594a:	d103      	bne.n	8005954 <__sfputc_r+0x1e>
 800594c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005950:	f000 b934 	b.w	8005bbc <__swbuf_r>
 8005954:	6813      	ldr	r3, [r2, #0]
 8005956:	1c58      	adds	r0, r3, #1
 8005958:	6010      	str	r0, [r2, #0]
 800595a:	7019      	strb	r1, [r3, #0]
 800595c:	4608      	mov	r0, r1
 800595e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005962:	4770      	bx	lr

08005964 <__sfputs_r>:
 8005964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005966:	4606      	mov	r6, r0
 8005968:	460f      	mov	r7, r1
 800596a:	4614      	mov	r4, r2
 800596c:	18d5      	adds	r5, r2, r3
 800596e:	42ac      	cmp	r4, r5
 8005970:	d101      	bne.n	8005976 <__sfputs_r+0x12>
 8005972:	2000      	movs	r0, #0
 8005974:	e007      	b.n	8005986 <__sfputs_r+0x22>
 8005976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800597a:	463a      	mov	r2, r7
 800597c:	4630      	mov	r0, r6
 800597e:	f7ff ffda 	bl	8005936 <__sfputc_r>
 8005982:	1c43      	adds	r3, r0, #1
 8005984:	d1f3      	bne.n	800596e <__sfputs_r+0xa>
 8005986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005988 <_vfiprintf_r>:
 8005988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598c:	460d      	mov	r5, r1
 800598e:	b09d      	sub	sp, #116	; 0x74
 8005990:	4614      	mov	r4, r2
 8005992:	4698      	mov	r8, r3
 8005994:	4606      	mov	r6, r0
 8005996:	b118      	cbz	r0, 80059a0 <_vfiprintf_r+0x18>
 8005998:	6a03      	ldr	r3, [r0, #32]
 800599a:	b90b      	cbnz	r3, 80059a0 <_vfiprintf_r+0x18>
 800599c:	f7fe f8da 	bl	8003b54 <__sinit>
 80059a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059a2:	07d9      	lsls	r1, r3, #31
 80059a4:	d405      	bmi.n	80059b2 <_vfiprintf_r+0x2a>
 80059a6:	89ab      	ldrh	r3, [r5, #12]
 80059a8:	059a      	lsls	r2, r3, #22
 80059aa:	d402      	bmi.n	80059b2 <_vfiprintf_r+0x2a>
 80059ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059ae:	f7fe f9e8 	bl	8003d82 <__retarget_lock_acquire_recursive>
 80059b2:	89ab      	ldrh	r3, [r5, #12]
 80059b4:	071b      	lsls	r3, r3, #28
 80059b6:	d501      	bpl.n	80059bc <_vfiprintf_r+0x34>
 80059b8:	692b      	ldr	r3, [r5, #16]
 80059ba:	b99b      	cbnz	r3, 80059e4 <_vfiprintf_r+0x5c>
 80059bc:	4629      	mov	r1, r5
 80059be:	4630      	mov	r0, r6
 80059c0:	f000 f93a 	bl	8005c38 <__swsetup_r>
 80059c4:	b170      	cbz	r0, 80059e4 <_vfiprintf_r+0x5c>
 80059c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059c8:	07dc      	lsls	r4, r3, #31
 80059ca:	d504      	bpl.n	80059d6 <_vfiprintf_r+0x4e>
 80059cc:	f04f 30ff 	mov.w	r0, #4294967295
 80059d0:	b01d      	add	sp, #116	; 0x74
 80059d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d6:	89ab      	ldrh	r3, [r5, #12]
 80059d8:	0598      	lsls	r0, r3, #22
 80059da:	d4f7      	bmi.n	80059cc <_vfiprintf_r+0x44>
 80059dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059de:	f7fe f9d1 	bl	8003d84 <__retarget_lock_release_recursive>
 80059e2:	e7f3      	b.n	80059cc <_vfiprintf_r+0x44>
 80059e4:	2300      	movs	r3, #0
 80059e6:	9309      	str	r3, [sp, #36]	; 0x24
 80059e8:	2320      	movs	r3, #32
 80059ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80059f2:	2330      	movs	r3, #48	; 0x30
 80059f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005ba8 <_vfiprintf_r+0x220>
 80059f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059fc:	f04f 0901 	mov.w	r9, #1
 8005a00:	4623      	mov	r3, r4
 8005a02:	469a      	mov	sl, r3
 8005a04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a08:	b10a      	cbz	r2, 8005a0e <_vfiprintf_r+0x86>
 8005a0a:	2a25      	cmp	r2, #37	; 0x25
 8005a0c:	d1f9      	bne.n	8005a02 <_vfiprintf_r+0x7a>
 8005a0e:	ebba 0b04 	subs.w	fp, sl, r4
 8005a12:	d00b      	beq.n	8005a2c <_vfiprintf_r+0xa4>
 8005a14:	465b      	mov	r3, fp
 8005a16:	4622      	mov	r2, r4
 8005a18:	4629      	mov	r1, r5
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	f7ff ffa2 	bl	8005964 <__sfputs_r>
 8005a20:	3001      	adds	r0, #1
 8005a22:	f000 80a9 	beq.w	8005b78 <_vfiprintf_r+0x1f0>
 8005a26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a28:	445a      	add	r2, fp
 8005a2a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80a1 	beq.w	8005b78 <_vfiprintf_r+0x1f0>
 8005a36:	2300      	movs	r3, #0
 8005a38:	f04f 32ff 	mov.w	r2, #4294967295
 8005a3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a40:	f10a 0a01 	add.w	sl, sl, #1
 8005a44:	9304      	str	r3, [sp, #16]
 8005a46:	9307      	str	r3, [sp, #28]
 8005a48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a4c:	931a      	str	r3, [sp, #104]	; 0x68
 8005a4e:	4654      	mov	r4, sl
 8005a50:	2205      	movs	r2, #5
 8005a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a56:	4854      	ldr	r0, [pc, #336]	; (8005ba8 <_vfiprintf_r+0x220>)
 8005a58:	f7fa fbba 	bl	80001d0 <memchr>
 8005a5c:	9a04      	ldr	r2, [sp, #16]
 8005a5e:	b9d8      	cbnz	r0, 8005a98 <_vfiprintf_r+0x110>
 8005a60:	06d1      	lsls	r1, r2, #27
 8005a62:	bf44      	itt	mi
 8005a64:	2320      	movmi	r3, #32
 8005a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a6a:	0713      	lsls	r3, r2, #28
 8005a6c:	bf44      	itt	mi
 8005a6e:	232b      	movmi	r3, #43	; 0x2b
 8005a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a74:	f89a 3000 	ldrb.w	r3, [sl]
 8005a78:	2b2a      	cmp	r3, #42	; 0x2a
 8005a7a:	d015      	beq.n	8005aa8 <_vfiprintf_r+0x120>
 8005a7c:	9a07      	ldr	r2, [sp, #28]
 8005a7e:	4654      	mov	r4, sl
 8005a80:	2000      	movs	r0, #0
 8005a82:	f04f 0c0a 	mov.w	ip, #10
 8005a86:	4621      	mov	r1, r4
 8005a88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a8c:	3b30      	subs	r3, #48	; 0x30
 8005a8e:	2b09      	cmp	r3, #9
 8005a90:	d94d      	bls.n	8005b2e <_vfiprintf_r+0x1a6>
 8005a92:	b1b0      	cbz	r0, 8005ac2 <_vfiprintf_r+0x13a>
 8005a94:	9207      	str	r2, [sp, #28]
 8005a96:	e014      	b.n	8005ac2 <_vfiprintf_r+0x13a>
 8005a98:	eba0 0308 	sub.w	r3, r0, r8
 8005a9c:	fa09 f303 	lsl.w	r3, r9, r3
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	9304      	str	r3, [sp, #16]
 8005aa4:	46a2      	mov	sl, r4
 8005aa6:	e7d2      	b.n	8005a4e <_vfiprintf_r+0xc6>
 8005aa8:	9b03      	ldr	r3, [sp, #12]
 8005aaa:	1d19      	adds	r1, r3, #4
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	9103      	str	r1, [sp, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	bfbb      	ittet	lt
 8005ab4:	425b      	neglt	r3, r3
 8005ab6:	f042 0202 	orrlt.w	r2, r2, #2
 8005aba:	9307      	strge	r3, [sp, #28]
 8005abc:	9307      	strlt	r3, [sp, #28]
 8005abe:	bfb8      	it	lt
 8005ac0:	9204      	strlt	r2, [sp, #16]
 8005ac2:	7823      	ldrb	r3, [r4, #0]
 8005ac4:	2b2e      	cmp	r3, #46	; 0x2e
 8005ac6:	d10c      	bne.n	8005ae2 <_vfiprintf_r+0x15a>
 8005ac8:	7863      	ldrb	r3, [r4, #1]
 8005aca:	2b2a      	cmp	r3, #42	; 0x2a
 8005acc:	d134      	bne.n	8005b38 <_vfiprintf_r+0x1b0>
 8005ace:	9b03      	ldr	r3, [sp, #12]
 8005ad0:	1d1a      	adds	r2, r3, #4
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	9203      	str	r2, [sp, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	bfb8      	it	lt
 8005ada:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ade:	3402      	adds	r4, #2
 8005ae0:	9305      	str	r3, [sp, #20]
 8005ae2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005bb8 <_vfiprintf_r+0x230>
 8005ae6:	7821      	ldrb	r1, [r4, #0]
 8005ae8:	2203      	movs	r2, #3
 8005aea:	4650      	mov	r0, sl
 8005aec:	f7fa fb70 	bl	80001d0 <memchr>
 8005af0:	b138      	cbz	r0, 8005b02 <_vfiprintf_r+0x17a>
 8005af2:	9b04      	ldr	r3, [sp, #16]
 8005af4:	eba0 000a 	sub.w	r0, r0, sl
 8005af8:	2240      	movs	r2, #64	; 0x40
 8005afa:	4082      	lsls	r2, r0
 8005afc:	4313      	orrs	r3, r2
 8005afe:	3401      	adds	r4, #1
 8005b00:	9304      	str	r3, [sp, #16]
 8005b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b06:	4829      	ldr	r0, [pc, #164]	; (8005bac <_vfiprintf_r+0x224>)
 8005b08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b0c:	2206      	movs	r2, #6
 8005b0e:	f7fa fb5f 	bl	80001d0 <memchr>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d03f      	beq.n	8005b96 <_vfiprintf_r+0x20e>
 8005b16:	4b26      	ldr	r3, [pc, #152]	; (8005bb0 <_vfiprintf_r+0x228>)
 8005b18:	bb1b      	cbnz	r3, 8005b62 <_vfiprintf_r+0x1da>
 8005b1a:	9b03      	ldr	r3, [sp, #12]
 8005b1c:	3307      	adds	r3, #7
 8005b1e:	f023 0307 	bic.w	r3, r3, #7
 8005b22:	3308      	adds	r3, #8
 8005b24:	9303      	str	r3, [sp, #12]
 8005b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b28:	443b      	add	r3, r7
 8005b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b2c:	e768      	b.n	8005a00 <_vfiprintf_r+0x78>
 8005b2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b32:	460c      	mov	r4, r1
 8005b34:	2001      	movs	r0, #1
 8005b36:	e7a6      	b.n	8005a86 <_vfiprintf_r+0xfe>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	3401      	adds	r4, #1
 8005b3c:	9305      	str	r3, [sp, #20]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	f04f 0c0a 	mov.w	ip, #10
 8005b44:	4620      	mov	r0, r4
 8005b46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b4a:	3a30      	subs	r2, #48	; 0x30
 8005b4c:	2a09      	cmp	r2, #9
 8005b4e:	d903      	bls.n	8005b58 <_vfiprintf_r+0x1d0>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d0c6      	beq.n	8005ae2 <_vfiprintf_r+0x15a>
 8005b54:	9105      	str	r1, [sp, #20]
 8005b56:	e7c4      	b.n	8005ae2 <_vfiprintf_r+0x15a>
 8005b58:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e7f0      	b.n	8005b44 <_vfiprintf_r+0x1bc>
 8005b62:	ab03      	add	r3, sp, #12
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	462a      	mov	r2, r5
 8005b68:	4b12      	ldr	r3, [pc, #72]	; (8005bb4 <_vfiprintf_r+0x22c>)
 8005b6a:	a904      	add	r1, sp, #16
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	f7fd fb9f 	bl	80032b0 <_printf_float>
 8005b72:	4607      	mov	r7, r0
 8005b74:	1c78      	adds	r0, r7, #1
 8005b76:	d1d6      	bne.n	8005b26 <_vfiprintf_r+0x19e>
 8005b78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b7a:	07d9      	lsls	r1, r3, #31
 8005b7c:	d405      	bmi.n	8005b8a <_vfiprintf_r+0x202>
 8005b7e:	89ab      	ldrh	r3, [r5, #12]
 8005b80:	059a      	lsls	r2, r3, #22
 8005b82:	d402      	bmi.n	8005b8a <_vfiprintf_r+0x202>
 8005b84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b86:	f7fe f8fd 	bl	8003d84 <__retarget_lock_release_recursive>
 8005b8a:	89ab      	ldrh	r3, [r5, #12]
 8005b8c:	065b      	lsls	r3, r3, #25
 8005b8e:	f53f af1d 	bmi.w	80059cc <_vfiprintf_r+0x44>
 8005b92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b94:	e71c      	b.n	80059d0 <_vfiprintf_r+0x48>
 8005b96:	ab03      	add	r3, sp, #12
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	462a      	mov	r2, r5
 8005b9c:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <_vfiprintf_r+0x22c>)
 8005b9e:	a904      	add	r1, sp, #16
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f7fd fe29 	bl	80037f8 <_printf_i>
 8005ba6:	e7e4      	b.n	8005b72 <_vfiprintf_r+0x1ea>
 8005ba8:	08006144 	.word	0x08006144
 8005bac:	0800614e 	.word	0x0800614e
 8005bb0:	080032b1 	.word	0x080032b1
 8005bb4:	08005965 	.word	0x08005965
 8005bb8:	0800614a 	.word	0x0800614a

08005bbc <__swbuf_r>:
 8005bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bbe:	460e      	mov	r6, r1
 8005bc0:	4614      	mov	r4, r2
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	b118      	cbz	r0, 8005bce <__swbuf_r+0x12>
 8005bc6:	6a03      	ldr	r3, [r0, #32]
 8005bc8:	b90b      	cbnz	r3, 8005bce <__swbuf_r+0x12>
 8005bca:	f7fd ffc3 	bl	8003b54 <__sinit>
 8005bce:	69a3      	ldr	r3, [r4, #24]
 8005bd0:	60a3      	str	r3, [r4, #8]
 8005bd2:	89a3      	ldrh	r3, [r4, #12]
 8005bd4:	071a      	lsls	r2, r3, #28
 8005bd6:	d525      	bpl.n	8005c24 <__swbuf_r+0x68>
 8005bd8:	6923      	ldr	r3, [r4, #16]
 8005bda:	b31b      	cbz	r3, 8005c24 <__swbuf_r+0x68>
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	6922      	ldr	r2, [r4, #16]
 8005be0:	1a98      	subs	r0, r3, r2
 8005be2:	6963      	ldr	r3, [r4, #20]
 8005be4:	b2f6      	uxtb	r6, r6
 8005be6:	4283      	cmp	r3, r0
 8005be8:	4637      	mov	r7, r6
 8005bea:	dc04      	bgt.n	8005bf6 <__swbuf_r+0x3a>
 8005bec:	4621      	mov	r1, r4
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f7ff fd9e 	bl	8005730 <_fflush_r>
 8005bf4:	b9e0      	cbnz	r0, 8005c30 <__swbuf_r+0x74>
 8005bf6:	68a3      	ldr	r3, [r4, #8]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	60a3      	str	r3, [r4, #8]
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	6022      	str	r2, [r4, #0]
 8005c02:	701e      	strb	r6, [r3, #0]
 8005c04:	6962      	ldr	r2, [r4, #20]
 8005c06:	1c43      	adds	r3, r0, #1
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d004      	beq.n	8005c16 <__swbuf_r+0x5a>
 8005c0c:	89a3      	ldrh	r3, [r4, #12]
 8005c0e:	07db      	lsls	r3, r3, #31
 8005c10:	d506      	bpl.n	8005c20 <__swbuf_r+0x64>
 8005c12:	2e0a      	cmp	r6, #10
 8005c14:	d104      	bne.n	8005c20 <__swbuf_r+0x64>
 8005c16:	4621      	mov	r1, r4
 8005c18:	4628      	mov	r0, r5
 8005c1a:	f7ff fd89 	bl	8005730 <_fflush_r>
 8005c1e:	b938      	cbnz	r0, 8005c30 <__swbuf_r+0x74>
 8005c20:	4638      	mov	r0, r7
 8005c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c24:	4621      	mov	r1, r4
 8005c26:	4628      	mov	r0, r5
 8005c28:	f000 f806 	bl	8005c38 <__swsetup_r>
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	d0d5      	beq.n	8005bdc <__swbuf_r+0x20>
 8005c30:	f04f 37ff 	mov.w	r7, #4294967295
 8005c34:	e7f4      	b.n	8005c20 <__swbuf_r+0x64>
	...

08005c38 <__swsetup_r>:
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	4b2a      	ldr	r3, [pc, #168]	; (8005ce4 <__swsetup_r+0xac>)
 8005c3c:	4605      	mov	r5, r0
 8005c3e:	6818      	ldr	r0, [r3, #0]
 8005c40:	460c      	mov	r4, r1
 8005c42:	b118      	cbz	r0, 8005c4c <__swsetup_r+0x14>
 8005c44:	6a03      	ldr	r3, [r0, #32]
 8005c46:	b90b      	cbnz	r3, 8005c4c <__swsetup_r+0x14>
 8005c48:	f7fd ff84 	bl	8003b54 <__sinit>
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c52:	0718      	lsls	r0, r3, #28
 8005c54:	d422      	bmi.n	8005c9c <__swsetup_r+0x64>
 8005c56:	06d9      	lsls	r1, r3, #27
 8005c58:	d407      	bmi.n	8005c6a <__swsetup_r+0x32>
 8005c5a:	2309      	movs	r3, #9
 8005c5c:	602b      	str	r3, [r5, #0]
 8005c5e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c62:	81a3      	strh	r3, [r4, #12]
 8005c64:	f04f 30ff 	mov.w	r0, #4294967295
 8005c68:	e034      	b.n	8005cd4 <__swsetup_r+0x9c>
 8005c6a:	0758      	lsls	r0, r3, #29
 8005c6c:	d512      	bpl.n	8005c94 <__swsetup_r+0x5c>
 8005c6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c70:	b141      	cbz	r1, 8005c84 <__swsetup_r+0x4c>
 8005c72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c76:	4299      	cmp	r1, r3
 8005c78:	d002      	beq.n	8005c80 <__swsetup_r+0x48>
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f7fe fefe 	bl	8004a7c <_free_r>
 8005c80:	2300      	movs	r3, #0
 8005c82:	6363      	str	r3, [r4, #52]	; 0x34
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c8a:	81a3      	strh	r3, [r4, #12]
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	6063      	str	r3, [r4, #4]
 8005c90:	6923      	ldr	r3, [r4, #16]
 8005c92:	6023      	str	r3, [r4, #0]
 8005c94:	89a3      	ldrh	r3, [r4, #12]
 8005c96:	f043 0308 	orr.w	r3, r3, #8
 8005c9a:	81a3      	strh	r3, [r4, #12]
 8005c9c:	6923      	ldr	r3, [r4, #16]
 8005c9e:	b94b      	cbnz	r3, 8005cb4 <__swsetup_r+0x7c>
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005caa:	d003      	beq.n	8005cb4 <__swsetup_r+0x7c>
 8005cac:	4621      	mov	r1, r4
 8005cae:	4628      	mov	r0, r5
 8005cb0:	f000 f884 	bl	8005dbc <__smakebuf_r>
 8005cb4:	89a0      	ldrh	r0, [r4, #12]
 8005cb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cba:	f010 0301 	ands.w	r3, r0, #1
 8005cbe:	d00a      	beq.n	8005cd6 <__swsetup_r+0x9e>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60a3      	str	r3, [r4, #8]
 8005cc4:	6963      	ldr	r3, [r4, #20]
 8005cc6:	425b      	negs	r3, r3
 8005cc8:	61a3      	str	r3, [r4, #24]
 8005cca:	6923      	ldr	r3, [r4, #16]
 8005ccc:	b943      	cbnz	r3, 8005ce0 <__swsetup_r+0xa8>
 8005cce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005cd2:	d1c4      	bne.n	8005c5e <__swsetup_r+0x26>
 8005cd4:	bd38      	pop	{r3, r4, r5, pc}
 8005cd6:	0781      	lsls	r1, r0, #30
 8005cd8:	bf58      	it	pl
 8005cda:	6963      	ldrpl	r3, [r4, #20]
 8005cdc:	60a3      	str	r3, [r4, #8]
 8005cde:	e7f4      	b.n	8005cca <__swsetup_r+0x92>
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	e7f7      	b.n	8005cd4 <__swsetup_r+0x9c>
 8005ce4:	2000005c 	.word	0x2000005c

08005ce8 <_raise_r>:
 8005ce8:	291f      	cmp	r1, #31
 8005cea:	b538      	push	{r3, r4, r5, lr}
 8005cec:	4604      	mov	r4, r0
 8005cee:	460d      	mov	r5, r1
 8005cf0:	d904      	bls.n	8005cfc <_raise_r+0x14>
 8005cf2:	2316      	movs	r3, #22
 8005cf4:	6003      	str	r3, [r0, #0]
 8005cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005cfe:	b112      	cbz	r2, 8005d06 <_raise_r+0x1e>
 8005d00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d04:	b94b      	cbnz	r3, 8005d1a <_raise_r+0x32>
 8005d06:	4620      	mov	r0, r4
 8005d08:	f000 f830 	bl	8005d6c <_getpid_r>
 8005d0c:	462a      	mov	r2, r5
 8005d0e:	4601      	mov	r1, r0
 8005d10:	4620      	mov	r0, r4
 8005d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d16:	f000 b817 	b.w	8005d48 <_kill_r>
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d00a      	beq.n	8005d34 <_raise_r+0x4c>
 8005d1e:	1c59      	adds	r1, r3, #1
 8005d20:	d103      	bne.n	8005d2a <_raise_r+0x42>
 8005d22:	2316      	movs	r3, #22
 8005d24:	6003      	str	r3, [r0, #0]
 8005d26:	2001      	movs	r0, #1
 8005d28:	e7e7      	b.n	8005cfa <_raise_r+0x12>
 8005d2a:	2400      	movs	r4, #0
 8005d2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d30:	4628      	mov	r0, r5
 8005d32:	4798      	blx	r3
 8005d34:	2000      	movs	r0, #0
 8005d36:	e7e0      	b.n	8005cfa <_raise_r+0x12>

08005d38 <raise>:
 8005d38:	4b02      	ldr	r3, [pc, #8]	; (8005d44 <raise+0xc>)
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	f7ff bfd3 	b.w	8005ce8 <_raise_r>
 8005d42:	bf00      	nop
 8005d44:	2000005c 	.word	0x2000005c

08005d48 <_kill_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	4d07      	ldr	r5, [pc, #28]	; (8005d68 <_kill_r+0x20>)
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	4604      	mov	r4, r0
 8005d50:	4608      	mov	r0, r1
 8005d52:	4611      	mov	r1, r2
 8005d54:	602b      	str	r3, [r5, #0]
 8005d56:	f7fc fc33 	bl	80025c0 <_kill>
 8005d5a:	1c43      	adds	r3, r0, #1
 8005d5c:	d102      	bne.n	8005d64 <_kill_r+0x1c>
 8005d5e:	682b      	ldr	r3, [r5, #0]
 8005d60:	b103      	cbz	r3, 8005d64 <_kill_r+0x1c>
 8005d62:	6023      	str	r3, [r4, #0]
 8005d64:	bd38      	pop	{r3, r4, r5, pc}
 8005d66:	bf00      	nop
 8005d68:	200005b0 	.word	0x200005b0

08005d6c <_getpid_r>:
 8005d6c:	f7fc bc20 	b.w	80025b0 <_getpid>

08005d70 <__swhatbuf_r>:
 8005d70:	b570      	push	{r4, r5, r6, lr}
 8005d72:	460c      	mov	r4, r1
 8005d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d78:	2900      	cmp	r1, #0
 8005d7a:	b096      	sub	sp, #88	; 0x58
 8005d7c:	4615      	mov	r5, r2
 8005d7e:	461e      	mov	r6, r3
 8005d80:	da0d      	bge.n	8005d9e <__swhatbuf_r+0x2e>
 8005d82:	89a3      	ldrh	r3, [r4, #12]
 8005d84:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d88:	f04f 0100 	mov.w	r1, #0
 8005d8c:	bf0c      	ite	eq
 8005d8e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005d92:	2340      	movne	r3, #64	; 0x40
 8005d94:	2000      	movs	r0, #0
 8005d96:	6031      	str	r1, [r6, #0]
 8005d98:	602b      	str	r3, [r5, #0]
 8005d9a:	b016      	add	sp, #88	; 0x58
 8005d9c:	bd70      	pop	{r4, r5, r6, pc}
 8005d9e:	466a      	mov	r2, sp
 8005da0:	f000 f848 	bl	8005e34 <_fstat_r>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	dbec      	blt.n	8005d82 <__swhatbuf_r+0x12>
 8005da8:	9901      	ldr	r1, [sp, #4]
 8005daa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005dae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005db2:	4259      	negs	r1, r3
 8005db4:	4159      	adcs	r1, r3
 8005db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dba:	e7eb      	b.n	8005d94 <__swhatbuf_r+0x24>

08005dbc <__smakebuf_r>:
 8005dbc:	898b      	ldrh	r3, [r1, #12]
 8005dbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005dc0:	079d      	lsls	r5, r3, #30
 8005dc2:	4606      	mov	r6, r0
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	d507      	bpl.n	8005dd8 <__smakebuf_r+0x1c>
 8005dc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	6123      	str	r3, [r4, #16]
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	6163      	str	r3, [r4, #20]
 8005dd4:	b002      	add	sp, #8
 8005dd6:	bd70      	pop	{r4, r5, r6, pc}
 8005dd8:	ab01      	add	r3, sp, #4
 8005dda:	466a      	mov	r2, sp
 8005ddc:	f7ff ffc8 	bl	8005d70 <__swhatbuf_r>
 8005de0:	9900      	ldr	r1, [sp, #0]
 8005de2:	4605      	mov	r5, r0
 8005de4:	4630      	mov	r0, r6
 8005de6:	f7fe febd 	bl	8004b64 <_malloc_r>
 8005dea:	b948      	cbnz	r0, 8005e00 <__smakebuf_r+0x44>
 8005dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005df0:	059a      	lsls	r2, r3, #22
 8005df2:	d4ef      	bmi.n	8005dd4 <__smakebuf_r+0x18>
 8005df4:	f023 0303 	bic.w	r3, r3, #3
 8005df8:	f043 0302 	orr.w	r3, r3, #2
 8005dfc:	81a3      	strh	r3, [r4, #12]
 8005dfe:	e7e3      	b.n	8005dc8 <__smakebuf_r+0xc>
 8005e00:	89a3      	ldrh	r3, [r4, #12]
 8005e02:	6020      	str	r0, [r4, #0]
 8005e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e08:	81a3      	strh	r3, [r4, #12]
 8005e0a:	9b00      	ldr	r3, [sp, #0]
 8005e0c:	6163      	str	r3, [r4, #20]
 8005e0e:	9b01      	ldr	r3, [sp, #4]
 8005e10:	6120      	str	r0, [r4, #16]
 8005e12:	b15b      	cbz	r3, 8005e2c <__smakebuf_r+0x70>
 8005e14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f000 f81d 	bl	8005e58 <_isatty_r>
 8005e1e:	b128      	cbz	r0, 8005e2c <__smakebuf_r+0x70>
 8005e20:	89a3      	ldrh	r3, [r4, #12]
 8005e22:	f023 0303 	bic.w	r3, r3, #3
 8005e26:	f043 0301 	orr.w	r3, r3, #1
 8005e2a:	81a3      	strh	r3, [r4, #12]
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	431d      	orrs	r5, r3
 8005e30:	81a5      	strh	r5, [r4, #12]
 8005e32:	e7cf      	b.n	8005dd4 <__smakebuf_r+0x18>

08005e34 <_fstat_r>:
 8005e34:	b538      	push	{r3, r4, r5, lr}
 8005e36:	4d07      	ldr	r5, [pc, #28]	; (8005e54 <_fstat_r+0x20>)
 8005e38:	2300      	movs	r3, #0
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	4608      	mov	r0, r1
 8005e3e:	4611      	mov	r1, r2
 8005e40:	602b      	str	r3, [r5, #0]
 8005e42:	f7fc fc1c 	bl	800267e <_fstat>
 8005e46:	1c43      	adds	r3, r0, #1
 8005e48:	d102      	bne.n	8005e50 <_fstat_r+0x1c>
 8005e4a:	682b      	ldr	r3, [r5, #0]
 8005e4c:	b103      	cbz	r3, 8005e50 <_fstat_r+0x1c>
 8005e4e:	6023      	str	r3, [r4, #0]
 8005e50:	bd38      	pop	{r3, r4, r5, pc}
 8005e52:	bf00      	nop
 8005e54:	200005b0 	.word	0x200005b0

08005e58 <_isatty_r>:
 8005e58:	b538      	push	{r3, r4, r5, lr}
 8005e5a:	4d06      	ldr	r5, [pc, #24]	; (8005e74 <_isatty_r+0x1c>)
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	4604      	mov	r4, r0
 8005e60:	4608      	mov	r0, r1
 8005e62:	602b      	str	r3, [r5, #0]
 8005e64:	f7fc fc1b 	bl	800269e <_isatty>
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	d102      	bne.n	8005e72 <_isatty_r+0x1a>
 8005e6c:	682b      	ldr	r3, [r5, #0]
 8005e6e:	b103      	cbz	r3, 8005e72 <_isatty_r+0x1a>
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
 8005e74:	200005b0 	.word	0x200005b0

08005e78 <_init>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	bf00      	nop
 8005e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7e:	bc08      	pop	{r3}
 8005e80:	469e      	mov	lr, r3
 8005e82:	4770      	bx	lr

08005e84 <_fini>:
 8005e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e86:	bf00      	nop
 8005e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8a:	bc08      	pop	{r3}
 8005e8c:	469e      	mov	lr, r3
 8005e8e:	4770      	bx	lr
