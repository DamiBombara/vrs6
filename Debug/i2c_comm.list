
i2c_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08006350  08006350  00016350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800675c  0800675c  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800675c  0800675c  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800675c  0800675c  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800675c  0800675c  0001675c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006760  08006760  00016760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08006764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  200001cc  08006930  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  08006930  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000661f  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001baa  00000000  00000000  0002685e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e0  00000000  00000000  00028408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000662  00000000  00000000  00028ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004403  00000000  00000000  0002934a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007e5d  00000000  00000000  0002d74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000756a0  00000000  00000000  000355aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000354c  00000000  00000000  000aac4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ae198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006334 	.word	0x08006334

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	08006334 	.word	0x08006334

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa93 f3a3 	rbit	r3, r3
 8000c62:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	fab3 f383 	clz	r3, r3
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	2103      	movs	r1, #3
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	401a      	ands	r2, r3
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	fa93 f3a3 	rbit	r3, r3
 8000c80:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	fab3 f383 	clz	r3, r3
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	431a      	orrs	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	601a      	str	r2, [r3, #0]
}
 8000c96:	bf00      	nop
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b085      	sub	sp, #20
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	fb01 f303 	mul.w	r3, r1, r3
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	605a      	str	r2, [r3, #4]
}
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b089      	sub	sp, #36	; 0x24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	fa93 f3a3 	rbit	r3, r3
 8000cec:	613b      	str	r3, [r7, #16]
  return(result);
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	fab3 f383 	clz	r3, r3
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2103      	movs	r1, #3
 8000cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	401a      	ands	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	fa93 f3a3 	rbit	r3, r3
 8000d0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	fab3 f383 	clz	r3, r3
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000d20:	bf00      	nop
 8000d22:	3724      	adds	r7, #36	; 0x24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa93 f3a3 	rbit	r3, r3
 8000d46:	613b      	str	r3, [r7, #16]
  return(result);
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	fab3 f383 	clz	r3, r3
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2103      	movs	r1, #3
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	401a      	ands	r2, r3
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	fa93 f3a3 	rbit	r3, r3
 8000d64:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	fab3 f383 	clz	r3, r3
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	431a      	orrs	r2, r3
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	60da      	str	r2, [r3, #12]
}
 8000d7a:	bf00      	nop
 8000d7c:	3724      	adds	r7, #36	; 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b089      	sub	sp, #36	; 0x24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	60f8      	str	r0, [r7, #12]
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	6a1a      	ldr	r2, [r3, #32]
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	fa93 f3a3 	rbit	r3, r3
 8000da0:	613b      	str	r3, [r7, #16]
  return(result);
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	fab3 f383 	clz	r3, r3
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	210f      	movs	r1, #15
 8000dac:	fa01 f303 	lsl.w	r3, r1, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	401a      	ands	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	fa93 f3a3 	rbit	r3, r3
 8000dbe:	61bb      	str	r3, [r7, #24]
  return(result);
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fab3 f383 	clz	r3, r3
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000dd4:	bf00      	nop
 8000dd6:	3724      	adds	r7, #36	; 0x24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	0a1b      	lsrs	r3, r3, #8
 8000df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	fa93 f3a3 	rbit	r3, r3
 8000dfc:	613b      	str	r3, [r7, #16]
  return(result);
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	fab3 f383 	clz	r3, r3
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	210f      	movs	r1, #15
 8000e08:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	401a      	ands	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	0a1b      	lsrs	r3, r3, #8
 8000e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa93 f3a3 	rbit	r3, r3
 8000e1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	fab3 f383 	clz	r3, r3
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000e32:	bf00      	nop
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b088      	sub	sp, #32
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	fa93 f3a3 	rbit	r3, r3
 8000e5c:	613b      	str	r3, [r7, #16]
  return(result);
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	fab3 f383 	clz	r3, r3
 8000e64:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000e66:	e048      	b.n	8000efa <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d03a      	beq.n	8000ef4 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	461a      	mov	r2, r3
 8000e84:	69b9      	ldr	r1, [r7, #24]
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff fede 	bl	8000c48 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d003      	beq.n	8000e9c <LL_GPIO_Init+0x5e>
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d106      	bne.n	8000eaa <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	69b9      	ldr	r1, [r7, #24]
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff14 	bl	8000cd2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	691b      	ldr	r3, [r3, #16]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	69b9      	ldr	r1, [r7, #24]
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ff3a 	bl	8000d2c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d119      	bne.n	8000ef4 <LL_GPIO_Init+0xb6>
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	fa93 f3a3 	rbit	r3, r3
 8000eca:	60bb      	str	r3, [r7, #8]
  return(result);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000ece:	fab3 f383 	clz	r3, r3
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	d807      	bhi.n	8000ee6 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	461a      	mov	r2, r3
 8000edc:	69b9      	ldr	r1, [r7, #24]
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ff51 	bl	8000d86 <LL_GPIO_SetAFPin_0_7>
 8000ee4:	e006      	b.n	8000ef4 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	461a      	mov	r2, r3
 8000eec:	69b9      	ldr	r1, [r7, #24]
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ff76 	bl	8000de0 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa22 f303 	lsr.w	r3, r2, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1af      	bne.n	8000e68 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d003      	beq.n	8000f18 <LL_GPIO_Init+0xda>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d107      	bne.n	8000f28 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	6819      	ldr	r1, [r3, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	461a      	mov	r2, r3
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff febd 	bl	8000ca2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f043 0201 	orr.w	r2, r3, #1
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	601a      	str	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f023 0201 	bic.w	r2, r3, #1
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	601a      	str	r2, [r3, #0]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b085      	sub	sp, #20
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	0219      	lsls	r1, r3, #8
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	601a      	str	r2, [r3, #0]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000fb4:	f023 0307 	bic.w	r3, r3, #7
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	609a      	str	r2, [r3, #8]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	609a      	str	r2, [r3, #8]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	611a      	str	r2, [r3, #16]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	431a      	orrs	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	601a      	str	r2, [r3, #0]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	605a      	str	r2, [r3, #4]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ff65 	bl	8000f52 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	6899      	ldr	r1, [r3, #8]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	461a      	mov	r2, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ff6d 	bl	8000f72 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4619      	mov	r1, r3
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffb6 	bl	8001010 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff44 	bl	8000f32 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffa0 	bl	8000ff0 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	6919      	ldr	r1, [r3, #16]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	461a      	mov	r2, r3
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff70 	bl	8000fa0 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff81 	bl	8000fd0 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4619      	mov	r1, r3
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ffa9 	bl	800102c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	4619      	mov	r1, r3
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ffb6 	bl	8001052 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <LL_RCC_HSI_IsReady+0x20>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	bf0c      	ite	eq
 8001100:	2301      	moveq	r3, #1
 8001102:	2300      	movne	r3, #0
 8001104:	b2db      	uxtb	r3, r3
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	40021000 	.word	0x40021000

08001114 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <LL_RCC_LSE_IsReady+0x20>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b02      	cmp	r3, #2
 8001122:	bf0c      	ite	eq
 8001124:	2301      	moveq	r3, #1
 8001126:	2300      	movne	r3, #0
 8001128:	b2db      	uxtb	r3, r3
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	40021000 	.word	0x40021000

08001138 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <LL_RCC_GetSysClkSource+0x18>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 030c 	and.w	r3, r3, #12
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000

08001154 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <LL_RCC_GetAHBPrescaler+0x18>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000

08001170 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000

0800118c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000

080011a8 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <LL_RCC_GetUSARTClockSource+0x28>)
 80011b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b4:	2103      	movs	r1, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	fa01 f303 	lsl.w	r3, r1, r3
 80011bc:	401a      	ands	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	061b      	lsls	r3, r3, #24
 80011c2:	4313      	orrs	r3, r2
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	40021000 	.word	0x40021000

080011d4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <LL_RCC_PLL_GetMainSource+0x18>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000

080011f0 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <LL_RCC_PLL_GetMultiplicator+0x18>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000

0800120c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <LL_RCC_PLL_GetPrediv+0x18>)
 8001212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001214:	f003 030f 	and.w	r3, r3, #15
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000

08001228 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001230:	f000 f862 	bl	80012f8 <RCC_GetSystemClockFreq>
 8001234:	4602      	mov	r2, r0
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f880 	bl	8001344 <RCC_GetHCLKClockFreq>
 8001244:	4602      	mov	r2, r0
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f88e 	bl	8001370 <RCC_GetPCLK1ClockFreq>
 8001254:	4602      	mov	r2, r0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f89a 	bl	8001398 <RCC_GetPCLK2ClockFreq>
 8001264:	4602      	mov	r2, r0
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	60da      	str	r2, [r3, #12]
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d130      	bne.n	80012e8 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ff8e 	bl	80011a8 <LL_RCC_GetUSARTClockSource>
 800128c:	4603      	mov	r3, r0
 800128e:	2b03      	cmp	r3, #3
 8001290:	d00a      	beq.n	80012a8 <LL_RCC_GetUSARTClockFreq+0x34>
 8001292:	2b03      	cmp	r3, #3
 8001294:	d819      	bhi.n	80012ca <LL_RCC_GetUSARTClockFreq+0x56>
 8001296:	2b01      	cmp	r3, #1
 8001298:	d002      	beq.n	80012a0 <LL_RCC_GetUSARTClockFreq+0x2c>
 800129a:	2b02      	cmp	r3, #2
 800129c:	d00c      	beq.n	80012b8 <LL_RCC_GetUSARTClockFreq+0x44>
 800129e:	e014      	b.n	80012ca <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80012a0:	f000 f82a 	bl	80012f8 <RCC_GetSystemClockFreq>
 80012a4:	60f8      	str	r0, [r7, #12]
        break;
 80012a6:	e01f      	b.n	80012e8 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80012a8:	f7ff ff22 	bl	80010f0 <LL_RCC_HSI_IsReady>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d017      	beq.n	80012e2 <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <LL_RCC_GetUSARTClockFreq+0x80>)
 80012b4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80012b6:	e014      	b.n	80012e2 <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80012b8:	f7ff ff2c 	bl	8001114 <LL_RCC_LSE_IsReady>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d011      	beq.n	80012e6 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 80012c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012c6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80012c8:	e00d      	b.n	80012e6 <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80012ca:	f000 f815 	bl	80012f8 <RCC_GetSystemClockFreq>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 f837 	bl	8001344 <RCC_GetHCLKClockFreq>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f849 	bl	8001370 <RCC_GetPCLK1ClockFreq>
 80012de:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80012e0:	e002      	b.n	80012e8 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 80012e2:	bf00      	nop
 80012e4:	e000      	b.n	80012e8 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 80012e6:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80012e8:	68fb      	ldr	r3, [r7, #12]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	007a1200 	.word	0x007a1200

080012f8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001302:	f7ff ff19 	bl	8001138 <LL_RCC_GetSysClkSource>
 8001306:	4603      	mov	r3, r0
 8001308:	2b08      	cmp	r3, #8
 800130a:	d00c      	beq.n	8001326 <RCC_GetSystemClockFreq+0x2e>
 800130c:	2b08      	cmp	r3, #8
 800130e:	d80e      	bhi.n	800132e <RCC_GetSystemClockFreq+0x36>
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <RCC_GetSystemClockFreq+0x22>
 8001314:	2b04      	cmp	r3, #4
 8001316:	d003      	beq.n	8001320 <RCC_GetSystemClockFreq+0x28>
 8001318:	e009      	b.n	800132e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <RCC_GetSystemClockFreq+0x48>)
 800131c:	607b      	str	r3, [r7, #4]
      break;
 800131e:	e009      	b.n	8001334 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <RCC_GetSystemClockFreq+0x48>)
 8001322:	607b      	str	r3, [r7, #4]
      break;
 8001324:	e006      	b.n	8001334 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001326:	f000 f84b 	bl	80013c0 <RCC_PLL_GetFreqDomain_SYS>
 800132a:	6078      	str	r0, [r7, #4]
      break;
 800132c:	e002      	b.n	8001334 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <RCC_GetSystemClockFreq+0x48>)
 8001330:	607b      	str	r3, [r7, #4]
      break;
 8001332:	bf00      	nop
  }

  return frequency;
 8001334:	687b      	ldr	r3, [r7, #4]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	007a1200 	.word	0x007a1200

08001344 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800134c:	f7ff ff02 	bl	8001154 <LL_RCC_GetAHBPrescaler>
 8001350:	4603      	mov	r3, r0
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	f003 030f 	and.w	r3, r3, #15
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <RCC_GetHCLKClockFreq+0x28>)
 800135a:	5cd3      	ldrb	r3, [r2, r3]
 800135c:	461a      	mov	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	40d3      	lsrs	r3, r2
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	080063c8 	.word	0x080063c8

08001370 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001378:	f7ff fefa 	bl	8001170 <LL_RCC_GetAPB1Prescaler>
 800137c:	4603      	mov	r3, r0
 800137e:	0a1b      	lsrs	r3, r3, #8
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <RCC_GetPCLK1ClockFreq+0x24>)
 8001382:	5cd3      	ldrb	r3, [r2, r3]
 8001384:	461a      	mov	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	40d3      	lsrs	r3, r2
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	080063d8 	.word	0x080063d8

08001398 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80013a0:	f7ff fef4 	bl	800118c <LL_RCC_GetAPB2Prescaler>
 80013a4:	4603      	mov	r3, r0
 80013a6:	0adb      	lsrs	r3, r3, #11
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <RCC_GetPCLK2ClockFreq+0x24>)
 80013aa:	5cd3      	ldrb	r3, [r2, r3]
 80013ac:	461a      	mov	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	40d3      	lsrs	r3, r2
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	080063d8 	.word	0x080063d8

080013c0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80013ce:	f7ff ff01 	bl	80011d4 <LL_RCC_PLL_GetMainSource>
 80013d2:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d004      	beq.n	80013e4 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e0:	d003      	beq.n	80013ea <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80013e2:	e005      	b.n	80013f0 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80013e6:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80013e8:	e005      	b.n	80013f6 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80013ec:	60fb      	str	r3, [r7, #12]
      break;
 80013ee:	e002      	b.n	80013f6 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80013f2:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80013f4:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80013f6:	f7ff ff09 	bl	800120c <LL_RCC_PLL_GetPrediv>
 80013fa:	4603      	mov	r3, r0
 80013fc:	3301      	adds	r3, #1
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	fbb2 f4f3 	udiv	r4, r2, r3
 8001404:	f7ff fef4 	bl	80011f0 <LL_RCC_PLL_GetMultiplicator>
 8001408:	4603      	mov	r3, r0
 800140a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800140e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001412:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	fa92 f2a2 	rbit	r2, r2
 800141a:	603a      	str	r2, [r7, #0]
  return(result);
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	fab2 f282 	clz	r2, r2
 8001422:	40d3      	lsrs	r3, r2
 8001424:	3302      	adds	r3, #2
 8001426:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	bd90      	pop	{r4, r7, pc}
 8001432:	bf00      	nop
 8001434:	003d0900 	.word	0x003d0900
 8001438:	007a1200 	.word	0x007a1200

0800143c <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b01      	cmp	r3, #1
 800144e:	bf0c      	ite	eq
 8001450:	2301      	moveq	r3, #1
 8001452:	2300      	movne	r3, #0
 8001454:	b2db      	uxtb	r3, r3
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	605a      	str	r2, [r3, #4]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	609a      	str	r2, [r3, #8]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 80014ae:	b4b0      	push	{r4, r5, r7}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
  register uint32_t brrtemp = 0x0U;

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014c2:	d114      	bne.n	80014ee <LL_USART_SetBaudRate+0x40>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	005a      	lsls	r2, r3, #1
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	441a      	add	r2, r3
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 80014d8:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80014dc:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80014de:	086b      	lsrs	r3, r5, #1
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 80014ec:	e00a      	b.n	8001504 <LL_USART_SetBaudRate+0x56>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	085a      	lsrs	r2, r3, #1
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	441a      	add	r2, r3
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	60da      	str	r2, [r3, #12]
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bcb0      	pop	{r4, r5, r7}
 800150c:	4770      	bx	lr
	...

08001510 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ff8a 	bl	800143c <LL_USART_IsEnabled>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d14e      	bne.n	80015cc <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <LL_USART_Init+0xc8>)
 8001534:	4013      	ands	r3, r2
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	6851      	ldr	r1, [r2, #4]
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	68d2      	ldr	r2, [r2, #12]
 800153e:	4311      	orrs	r1, r2
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	6912      	ldr	r2, [r2, #16]
 8001544:	4311      	orrs	r1, r2
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	6992      	ldr	r2, [r2, #24]
 800154a:	430a      	orrs	r2, r1
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	4619      	mov	r1, r3
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff82 	bl	8001462 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	4619      	mov	r1, r3
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff8f 	bl	8001488 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <LL_USART_Init+0xcc>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d104      	bne.n	800157c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001572:	2000      	movs	r0, #0
 8001574:	f7ff fe7e 	bl	8001274 <LL_RCC_GetUSARTClockFreq>
 8001578:	61b8      	str	r0, [r7, #24]
 800157a:	e016      	b.n	80015aa <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a18      	ldr	r2, [pc, #96]	; (80015e0 <LL_USART_Init+0xd0>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d107      	bne.n	8001594 <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fe4d 	bl	8001228 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	61bb      	str	r3, [r7, #24]
 8001592:	e00a      	b.n	80015aa <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a13      	ldr	r2, [pc, #76]	; (80015e4 <LL_USART_Init+0xd4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d106      	bne.n	80015aa <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800159c:	f107 0308 	add.w	r3, r7, #8
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fe41 	bl	8001228 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00d      	beq.n	80015cc <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d009      	beq.n	80015cc <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80015b8:	2300      	movs	r3, #0
 80015ba:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	699a      	ldr	r2, [r3, #24]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	69b9      	ldr	r1, [r7, #24]
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ff71 	bl	80014ae <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80015cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3720      	adds	r7, #32
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	efff69f3 	.word	0xefff69f3
 80015dc:	40013800 	.word	0x40013800
 80015e0:	40004400 	.word	0x40004400
 80015e4:	40004800 	.word	0x40004800

080015e8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	4a07      	ldr	r2, [pc, #28]	; (8001618 <LL_InitTick+0x30>)
 80015fc:	3b01      	subs	r3, #1
 80015fe:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <LL_InitTick+0x30>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <LL_InitTick+0x30>)
 8001608:	2205      	movs	r2, #5
 800160a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000e010 	.word	0xe000e010

0800161c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001624:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ffdd 	bl	80015e8 <LL_InitTick>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <LL_mDelay+0x48>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001646:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164e:	d00c      	beq.n	800166a <LL_mDelay+0x32>
  {
    Delay++;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3301      	adds	r3, #1
 8001654:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001656:	e008      	b.n	800166a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <LL_mDelay+0x48>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d002      	beq.n	800166a <LL_mDelay+0x32>
    {
      Delay--;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	607b      	str	r3, [r7, #4]
  while (Delay)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f3      	bne.n	8001658 <LL_mDelay+0x20>
    }
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800168c:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <LL_SetSystemCoreClock+0x1c>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000000 	.word	0x20000000

080016a4 <whoAmI>:
 */

#include "hts221.h"

uint8_t whoAmI()
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	if (i2c_master_read_byte(HTS221_READ_ADDRESS, HTS221_WHO_AM_I_ADDRES) == HTS221_WHO_AM_I_VALUE)
 80016a8:	210f      	movs	r1, #15
 80016aa:	20bf      	movs	r0, #191	; 0xbf
 80016ac:	f000 fc4a 	bl	8001f44 <i2c_master_read_byte>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2bbc      	cmp	r3, #188	; 0xbc
 80016b4:	d101      	bne.n	80016ba <whoAmI+0x16>
	{
		return 1;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <whoAmI+0x18>
	}else return 0;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	bd80      	pop	{r7, pc}

080016c0 <htsInit>:

void htsInit()
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	if (whoAmI())
 80016c4:	f7ff ffee 	bl	80016a4 <whoAmI>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d004      	beq.n	80016d8 <htsInit+0x18>
	{
		i2c_send_byte(HTS221_WRITE_ADDRESS, CTRL_REG1_ADDRES, INIT_REG1);
 80016ce:	2286      	movs	r2, #134	; 0x86
 80016d0:	2120      	movs	r1, #32
 80016d2:	20be      	movs	r0, #190	; 0xbe
 80016d4:	f000 fc00 	bl	8001ed8 <i2c_send_byte>
	}
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <getTemp>:

float getTemp()
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
	uint8_t buffer[2];
	if (whoAmI())
 80016e2:	f7ff ffdf 	bl	80016a4 <whoAmI>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00b      	beq.n	8001704 <getTemp+0x28>
	{
		buffer[0] = i2c_master_read_byte(HTS221_READ_ADDRESS, TEMP_OUT_L_ADDRES);
 80016ec:	212a      	movs	r1, #42	; 0x2a
 80016ee:	20bf      	movs	r0, #191	; 0xbf
 80016f0:	f000 fc28 	bl	8001f44 <i2c_master_read_byte>
 80016f4:	4603      	mov	r3, r0
 80016f6:	713b      	strb	r3, [r7, #4]
		buffer[1] = i2c_master_read_byte(HTS221_READ_ADDRESS, TEMP_OUT_H_ADDRES);
 80016f8:	212b      	movs	r1, #43	; 0x2b
 80016fa:	20bf      	movs	r0, #191	; 0xbf
 80016fc:	f000 fc22 	bl	8001f44 <i2c_master_read_byte>
 8001700:	4603      	mov	r3, r0
 8001702:	717b      	strb	r3, [r7, #5]
	}
	return ((buffer[1] << 8) | buffer[0]) / 10;
 8001704:	797b      	ldrb	r3, [r7, #5]
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	793a      	ldrb	r2, [r7, #4]
 800170a:	4313      	orrs	r3, r2
 800170c:	4a07      	ldr	r2, [pc, #28]	; (800172c <getTemp+0x50>)
 800170e:	fb82 1203 	smull	r1, r2, r2, r3
 8001712:	1092      	asrs	r2, r2, #2
 8001714:	17db      	asrs	r3, r3, #31
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	ee07 3a90 	vmov	s15, r3
 800171c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001720:	eeb0 0a67 	vmov.f32	s0, s15
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	66666667 	.word	0x66666667

08001730 <getHum>:

float getHum()
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
	uint8_t buffer[2];
	if (whoAmI())
 8001736:	f7ff ffb5 	bl	80016a4 <whoAmI>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00b      	beq.n	8001758 <getHum+0x28>
	{
		buffer[0] = i2c_master_read_byte(HTS221_READ_ADDRESS, HUMIDITY_OUT_L_ADDRESS);
 8001740:	2128      	movs	r1, #40	; 0x28
 8001742:	20bf      	movs	r0, #191	; 0xbf
 8001744:	f000 fbfe 	bl	8001f44 <i2c_master_read_byte>
 8001748:	4603      	mov	r3, r0
 800174a:	713b      	strb	r3, [r7, #4]
		buffer[1] = i2c_master_read_byte(HTS221_READ_ADDRESS, HUMIDITY_OUT_H_ADDRESS);
 800174c:	2129      	movs	r1, #41	; 0x29
 800174e:	20bf      	movs	r0, #191	; 0xbf
 8001750:	f000 fbf8 	bl	8001f44 <i2c_master_read_byte>
 8001754:	4603      	mov	r3, r0
 8001756:	717b      	strb	r3, [r7, #5]
	}
	return ((buffer[1] << 8) | buffer[0]) / 1000;
 8001758:	797b      	ldrb	r3, [r7, #5]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	793a      	ldrb	r2, [r7, #4]
 800175e:	4313      	orrs	r3, r2
 8001760:	4a07      	ldr	r2, [pc, #28]	; (8001780 <getHum+0x50>)
 8001762:	fb82 1203 	smull	r1, r2, r2, r3
 8001766:	1192      	asrs	r2, r2, #6
 8001768:	17db      	asrs	r3, r3, #31
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	ee07 3a90 	vmov	s15, r3
 8001770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001774:	eeb0 0a67 	vmov.f32	s0, s15
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	10624dd3 	.word	0x10624dd3

08001784 <whoAmI_LPS>:
#include <math.h>

int32_t pressure = 0;

uint8_t whoAmI_LPS()
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	if (i2c_master_read_byte(LPS25HB_READ_ADDRESS, LPS25HB_WHO_AM_I_ADDRES) == LPS25HB_WHO_AM_I_VALUE){
 8001788:	210f      	movs	r1, #15
 800178a:	20bb      	movs	r0, #187	; 0xbb
 800178c:	f000 fbda 	bl	8001f44 <i2c_master_read_byte>
 8001790:	4603      	mov	r3, r0
 8001792:	2bbd      	cmp	r3, #189	; 0xbd
 8001794:	d101      	bne.n	800179a <whoAmI_LPS+0x16>
		return 1;
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <whoAmI_LPS+0x18>
	} else return 0;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	bd80      	pop	{r7, pc}

080017a0 <lpsInit>:

void lpsInit()
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	if (whoAmI_LPS())
 80017a4:	f7ff ffee 	bl	8001784 <whoAmI_LPS>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d004      	beq.n	80017b8 <lpsInit+0x18>
	{
		i2c_send_byte(LPS25HB_WRITE_ADDRESS, LPS25HB_CTRL_REG1 , LPS25HB_INIT_REG1);
 80017ae:	2290      	movs	r2, #144	; 0x90
 80017b0:	2120      	movs	r1, #32
 80017b2:	20ba      	movs	r0, #186	; 0xba
 80017b4:	f000 fb90 	bl	8001ed8 <i2c_send_byte>
	}
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	0000      	movs	r0, r0
	...

080017c0 <calculateHeight>:

float calculateHeight()
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	return (288.15/0.0065 * log(101325/pressure));
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <calculateHeight+0x50>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a12      	ldr	r2, [pc, #72]	; (8001814 <calculateHeight+0x54>)
 80017ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fea8 	bl	8000524 <__aeabi_i2d>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	ec43 2b10 	vmov	d0, r2, r3
 80017dc:	f004 fba8 	bl	8005f30 <log>
 80017e0:	ec51 0b10 	vmov	r0, r1, d0
 80017e4:	a308      	add	r3, pc, #32	; (adr r3, 8001808 <calculateHeight+0x48>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	f7fe ff05 	bl	80005f8 <__aeabi_dmul>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4610      	mov	r0, r2
 80017f4:	4619      	mov	r1, r3
 80017f6:	f7ff f9d7 	bl	8000ba8 <__aeabi_d2f>
 80017fa:	4603      	mov	r3, r0
 80017fc:	ee07 3a90 	vmov	s15, r3
}
 8001800:	eeb0 0a67 	vmov.f32	s0, s15
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	9d89d89d 	.word	0x9d89d89d
 800180c:	40e5a558 	.word	0x40e5a558
 8001810:	200001e8 	.word	0x200001e8
 8001814:	00018bcd 	.word	0x00018bcd

08001818 <getPressure>:

int32_t getPressure()
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
    if (whoAmI_LPS())
 800181e:	f7ff ffb1 	bl	8001784 <whoAmI_LPS>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d02a      	beq.n	800187e <getPressure+0x66>
    {
    	uint8_t pressureXL = i2c_master_read_byte(LPS25HB_READ_ADDRESS, PRESS_OUT_XL_ADDRES);
 8001828:	2128      	movs	r1, #40	; 0x28
 800182a:	20bb      	movs	r0, #187	; 0xbb
 800182c:	f000 fb8a 	bl	8001f44 <i2c_master_read_byte>
 8001830:	4603      	mov	r3, r0
 8001832:	71fb      	strb	r3, [r7, #7]
    	uint8_t pressureL = i2c_master_read_byte(LPS25HB_READ_ADDRESS, PRESS_OUT_L_ADDRES);
 8001834:	2129      	movs	r1, #41	; 0x29
 8001836:	20bb      	movs	r0, #187	; 0xbb
 8001838:	f000 fb84 	bl	8001f44 <i2c_master_read_byte>
 800183c:	4603      	mov	r3, r0
 800183e:	71bb      	strb	r3, [r7, #6]
    	uint8_t pressureH = i2c_master_read_byte(LPS25HB_READ_ADDRESS, PRESS_OUT_H_ADDRES);
 8001840:	212a      	movs	r1, #42	; 0x2a
 8001842:	20bb      	movs	r0, #187	; 0xbb
 8001844:	f000 fb7e 	bl	8001f44 <i2c_master_read_byte>
 8001848:	4603      	mov	r3, r0
 800184a:	717b      	strb	r3, [r7, #5]

    	pressure = (int32_t) pressureH << 16 | (int32_t) pressureL << 8 | pressureXL;
 800184c:	797b      	ldrb	r3, [r7, #5]
 800184e:	041a      	lsls	r2, r3, #16
 8001850:	79bb      	ldrb	r3, [r7, #6]
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	431a      	orrs	r2, r3
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	4313      	orrs	r3, r2
 800185a:	4a0c      	ldr	r2, [pc, #48]	; (800188c <getPressure+0x74>)
 800185c:	6013      	str	r3, [r2, #0]
    	pressure = pressure / 4096.0f;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <getPressure+0x74>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	ee07 3a90 	vmov	s15, r3
 8001866:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800186a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001890 <getPressure+0x78>
 800186e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001876:	ee17 2a90 	vmov	r2, s15
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <getPressure+0x74>)
 800187c:	601a      	str	r2, [r3, #0]
    }
    return pressure;
 800187e:	4b03      	ldr	r3, [pc, #12]	; (800188c <getPressure+0x74>)
 8001880:	681b      	ldr	r3, [r3, #0]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200001e8 	.word	0x200001e8
 8001890:	45800000 	.word	0x45800000

08001894 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	f003 021f 	and.w	r2, r3, #31
 80018a4:	4907      	ldr	r1, [pc, #28]	; (80018c4 <NVIC_EnableIRQ+0x30>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	2001      	movs	r0, #1
 80018ae:	fa00 f202 	lsl.w	r2, r0, r2
 80018b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000e100 	.word	0xe000e100

080018c8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	da0b      	bge.n	80018f4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	490c      	ldr	r1, [pc, #48]	; (8001914 <NVIC_SetPriority+0x4c>)
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	f003 030f 	and.w	r3, r3, #15
 80018e8:	3b04      	subs	r3, #4
 80018ea:	0112      	lsls	r2, r2, #4
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	440b      	add	r3, r1
 80018f0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f2:	e009      	b.n	8001908 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	4907      	ldr	r1, [pc, #28]	; (8001918 <NVIC_SetPriority+0x50>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	0112      	lsls	r2, r2, #4
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	440b      	add	r3, r1
 8001904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00
 8001918:	e000e100 	.word	0xe000e100

0800191c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001926:	695a      	ldr	r2, [r3, #20]
 8001928:	4907      	ldr	r1, [pc, #28]	; (8001948 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4313      	orrs	r3, r2
 800192e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001932:	695a      	ldr	r2, [r3, #20]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4013      	ands	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800193a:	68fb      	ldr	r3, [r7, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	40021000 	.word	0x40021000

0800194c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001950:	2001      	movs	r0, #1
 8001952:	f7ff ffe3 	bl	800191c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 8001956:	2100      	movs	r1, #0
 8001958:	2010      	movs	r0, #16
 800195a:	f7ff ffb5 	bl	80018c8 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800195e:	2010      	movs	r0, #16
 8001960:	f7ff ff98 	bl	8001894 <NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 8001964:	2100      	movs	r1, #0
 8001966:	2011      	movs	r0, #17
 8001968:	f7ff ffae 	bl	80018c8 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800196c:	2011      	movs	r0, #17
 800196e:	f7ff ff91 	bl	8001894 <NVIC_EnableIRQ>

}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <LL_AHB1_GRP1_EnableClock>:
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001982:	695a      	ldr	r2, [r3, #20]
 8001984:	4907      	ldr	r1, [pc, #28]	; (80019a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4313      	orrs	r3, r2
 800198a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800198e:	695a      	ldr	r2, [r3, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4013      	ands	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	40021000 	.word	0x40021000

080019a8 <LL_GPIO_SetPinMode>:
{
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	; 0x24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	613b      	str	r3, [r7, #16]
  return(result);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	fab3 f383 	clz	r3, r3
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2103      	movs	r1, #3
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	401a      	ands	r2, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa93 f3a3 	rbit	r3, r3
 80019e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	431a      	orrs	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	601a      	str	r2, [r3, #0]
}
 80019f6:	bf00      	nop
 80019f8:	3724      	adds	r7, #36	; 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	619a      	str	r2, [r3, #24]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001a24:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001a28:	f7ff ffa6 	bl	8001978 <LL_AHB1_GRP1_EnableClock>

  /* LED pin configuration */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_OUTPUT);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	2108      	movs	r1, #8
 8001a30:	4804      	ldr	r0, [pc, #16]	; (8001a44 <MX_GPIO_Init+0x24>)
 8001a32:	f7ff ffb9 	bl	80019a8 <LL_GPIO_SetPinMode>
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8001a36:	2108      	movs	r1, #8
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <MX_GPIO_Init+0x24>)
 8001a3a:	f7ff ffe2 	bl	8001a02 <LL_GPIO_SetOutputPin>

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	48000400 	.word	0x48000400

08001a48 <NVIC_GetPriorityGrouping>:
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <NVIC_GetPriorityGrouping+0x18>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	f003 0307 	and.w	r3, r3, #7
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <NVIC_EnableIRQ>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	f003 021f 	and.w	r2, r3, #31
 8001a74:	4907      	ldr	r1, [pc, #28]	; (8001a94 <NVIC_EnableIRQ+0x30>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000e100 	.word	0xe000e100

08001a98 <NVIC_SetPriority>:
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6039      	str	r1, [r7, #0]
 8001aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	da0b      	bge.n	8001ac4 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	490c      	ldr	r1, [pc, #48]	; (8001ae4 <NVIC_SetPriority+0x4c>)
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	3b04      	subs	r3, #4
 8001aba:	0112      	lsls	r2, r2, #4
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	440b      	add	r3, r1
 8001ac0:	761a      	strb	r2, [r3, #24]
}
 8001ac2:	e009      	b.n	8001ad8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	4907      	ldr	r1, [pc, #28]	; (8001ae8 <NVIC_SetPriority+0x50>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00
 8001ae8:	e000e100 	.word	0xe000e100

08001aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f1c3 0307 	rsb	r3, r3, #7
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	bf28      	it	cs
 8001b0a:	2304      	movcs	r3, #4
 8001b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3304      	adds	r3, #4
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d902      	bls.n	8001b1c <NVIC_EncodePriority+0x30>
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3b03      	subs	r3, #3
 8001b1a:	e000      	b.n	8001b1e <NVIC_EncodePriority+0x32>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	401a      	ands	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	43d9      	mvns	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	4313      	orrs	r3, r2
         );
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3724      	adds	r7, #36	; 0x24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_I2C_Enable>:
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f043 0201 	orr.w	r2, r3, #1
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	601a      	str	r2, [r3, #0]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <LL_I2C_EnableClockStretching>:
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	601a      	str	r2, [r3, #0]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <LL_I2C_DisableGeneralCall>:
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	601a      	str	r2, [r3, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <LL_I2C_SetOwnAddress2>:
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b085      	sub	sp, #20
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001bc6:	f023 0306 	bic.w	r3, r3, #6
 8001bca:	68b9      	ldr	r1, [r7, #8]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	60da      	str	r2, [r3, #12]
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <LL_I2C_DisableOwnAddress2>:
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	60da      	str	r2, [r3, #12]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_I2C_EnableIT_RX>:
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f043 0204 	orr.w	r2, r3, #4
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	601a      	str	r2, [r3, #0]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <LL_I2C_DisableIT_RX>:
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 0204 	bic.w	r2, r3, #4
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	601a      	str	r2, [r3, #0]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_I2C_IsActiveFlag_TXIS>:
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	bf0c      	ite	eq
 8001c56:	2301      	moveq	r3, #1
 8001c58:	2300      	movne	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_I2C_IsActiveFlag_RXNE>:
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2301      	moveq	r3, #1
 8001c7e:	2300      	movne	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_I2C_IsActiveFlag_STOP>:
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	f003 0320 	and.w	r3, r3, #32
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	bf0c      	ite	eq
 8001ca2:	2301      	moveq	r3, #1
 8001ca4:	2300      	movne	r3, #0
 8001ca6:	b2db      	uxtb	r3, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_I2C_ClearFlag_NACK>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	f043 0210 	orr.w	r2, r3, #16
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	61da      	str	r2, [r3, #28]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_I2C_ClearFlag_STOP>:
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	f043 0220 	orr.w	r2, r3, #32
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	61da      	str	r2, [r3, #28]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_I2C_EnableAutoEndMode>:
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	605a      	str	r2, [r3, #4]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	0d5b      	lsrs	r3, r3, #21
 8001d2a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <LL_I2C_HandleTransfer+0x48>)
 8001d30:	430b      	orrs	r3, r1
 8001d32:	43db      	mvns	r3, r3
 8001d34:	401a      	ands	r2, r3
 8001d36:	68b9      	ldr	r1, [r7, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4319      	orrs	r1, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	041b      	lsls	r3, r3, #16
 8001d40:	4319      	orrs	r1, r3
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	4319      	orrs	r1, r3
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	03ff7bff 	.word	0x03ff7bff

08001d60 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	b2db      	uxtb	r3, r3
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_AHB1_GRP1_EnableClock>:
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	4907      	ldr	r1, [pc, #28]	; (8001dc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001dae:	695a      	ldr	r2, [r3, #20]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4013      	ands	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001db6:	68fb      	ldr	r3, [r7, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	40021000 	.word	0x40021000

08001dc8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001dd2:	69da      	ldr	r2, [r3, #28]
 8001dd4:	4907      	ldr	r1, [pc, #28]	; (8001df4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001dde:	69da      	ldr	r2, [r3, #28]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4013      	ands	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	40021000 	.word	0x40021000

08001df8 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08e      	sub	sp, #56	; 0x38
 8001dfc:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001dfe:	f107 031c 	add.w	r3, r7, #28
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]
 8001e0c:	611a      	str	r2, [r3, #16]
 8001e0e:	615a      	str	r2, [r3, #20]
 8001e10:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
 8001e20:	615a      	str	r2, [r3, #20]
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001e22:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001e26:	f7ff ffb7 	bl	8001d98 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001e2a:	23c0      	movs	r3, #192	; 0xc0
 8001e2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001e32:	2303      	movs	r3, #3
 8001e34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001e36:	2301      	movs	r3, #1
 8001e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001e3e:	2304      	movs	r3, #4
 8001e40:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	4619      	mov	r1, r3
 8001e46:	4821      	ldr	r0, [pc, #132]	; (8001ecc <MX_I2C1_Init+0xd4>)
 8001e48:	f7fe fff9 	bl	8000e3e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001e4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001e50:	f7ff ffba 	bl	8001dc8 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001e54:	f7ff fdf8 	bl	8001a48 <NVIC_GetPriorityGrouping>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fe44 	bl	8001aec <NVIC_EncodePriority>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4619      	mov	r1, r3
 8001e68:	201f      	movs	r0, #31
 8001e6a:	f7ff fe15 	bl	8001a98 <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e6e:	201f      	movs	r0, #31
 8001e70:	f7ff fdf8 	bl	8001a64 <NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001e74:	4816      	ldr	r0, [pc, #88]	; (8001ed0 <MX_I2C1_Init+0xd8>)
 8001e76:	f7ff ff3d 	bl	8001cf4 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001e7a:	4815      	ldr	r0, [pc, #84]	; (8001ed0 <MX_I2C1_Init+0xd8>)
 8001e7c:	f7ff feb1 	bl	8001be2 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001e80:	4813      	ldr	r0, [pc, #76]	; (8001ed0 <MX_I2C1_Init+0xd8>)
 8001e82:	f7ff fe86 	bl	8001b92 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001e86:	4812      	ldr	r0, [pc, #72]	; (8001ed0 <MX_I2C1_Init+0xd8>)
 8001e88:	f7ff fe73 	bl	8001b72 <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001e90:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <MX_I2C1_Init+0xdc>)
 8001e92:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	4619      	mov	r1, r3
 8001eae:	4808      	ldr	r0, [pc, #32]	; (8001ed0 <MX_I2C1_Init+0xd8>)
 8001eb0:	f7ff f8e2 	bl	8001078 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <MX_I2C1_Init+0xd8>)
 8001eba:	f7ff fe7a 	bl	8001bb2 <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 8001ebe:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <MX_I2C1_Init+0xd8>)
 8001ec0:	f7ff fe47 	bl	8001b52 <LL_I2C_Enable>
}
 8001ec4:	bf00      	nop
 8001ec6:	3738      	adds	r7, #56	; 0x38
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	48000400 	.word	0x48000400
 8001ed0:	40005400 	.word	0x40005400
 8001ed4:	2000090e 	.word	0x2000090e

08001ed8 <i2c_send_byte>:

void i2c_send_byte(uint8_t slave_address, uint8_t register_address, uint8_t data)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af02      	add	r7, sp, #8
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	71bb      	strb	r3, [r7, #6]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	717b      	strb	r3, [r7, #5]
	// Initialize communication
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001eea:	79f9      	ldrb	r1, [r7, #7]
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <i2c_send_byte+0x64>)
 8001eee:	9301      	str	r3, [sp, #4]
 8001ef0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	2200      	movs	r2, #0
 8001efa:	4811      	ldr	r0, [pc, #68]	; (8001f40 <i2c_send_byte+0x68>)
 8001efc:	f7ff ff0a 	bl	8001d14 <LL_I2C_HandleTransfer>
	LL_I2C_TransmitData8(I2C1, register_address);
 8001f00:	79bb      	ldrb	r3, [r7, #6]
 8001f02:	4619      	mov	r1, r3
 8001f04:	480e      	ldr	r0, [pc, #56]	; (8001f40 <i2c_send_byte+0x68>)
 8001f06:	f7ff ff38 	bl	8001d7a <LL_I2C_TransmitData8>

	while (!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001f0a:	e00a      	b.n	8001f22 <i2c_send_byte+0x4a>
	{
		if (LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001f0c:	480c      	ldr	r0, [pc, #48]	; (8001f40 <i2c_send_byte+0x68>)
 8001f0e:	f7ff fe98 	bl	8001c42 <LL_I2C_IsActiveFlag_TXIS>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d004      	beq.n	8001f22 <i2c_send_byte+0x4a>
	    {
			LL_I2C_TransmitData8(I2C1, data);
 8001f18:	797b      	ldrb	r3, [r7, #5]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4808      	ldr	r0, [pc, #32]	; (8001f40 <i2c_send_byte+0x68>)
 8001f1e:	f7ff ff2c 	bl	8001d7a <LL_I2C_TransmitData8>
	while (!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001f22:	4807      	ldr	r0, [pc, #28]	; (8001f40 <i2c_send_byte+0x68>)
 8001f24:	f7ff feb3 	bl	8001c8e <LL_I2C_IsActiveFlag_STOP>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0ee      	beq.n	8001f0c <i2c_send_byte+0x34>
	    }
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001f2e:	4804      	ldr	r0, [pc, #16]	; (8001f40 <i2c_send_byte+0x68>)
 8001f30:	f7ff fed0 	bl	8001cd4 <LL_I2C_ClearFlag_STOP>
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	80002000 	.word	0x80002000
 8001f40:	40005400 	.word	0x40005400

08001f44 <i2c_master_read_byte>:

uint8_t i2c_master_read_byte(uint8_t slave_address, uint8_t register_address)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	460a      	mov	r2, r1
 8001f4e:	71fb      	strb	r3, [r7, #7]
 8001f50:	4613      	mov	r3, r2
 8001f52:	71bb      	strb	r3, [r7, #6]
	LL_I2C_EnableIT_RX(I2C1);
 8001f54:	4825      	ldr	r0, [pc, #148]	; (8001fec <i2c_master_read_byte+0xa8>)
 8001f56:	f7ff fe54 	bl	8001c02 <LL_I2C_EnableIT_RX>
	// Initialize communication
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001f5a:	79f9      	ldrb	r1, [r7, #7]
 8001f5c:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <i2c_master_read_byte+0xac>)
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	2301      	movs	r3, #1
 8001f68:	2200      	movs	r2, #0
 8001f6a:	4820      	ldr	r0, [pc, #128]	; (8001fec <i2c_master_read_byte+0xa8>)
 8001f6c:	f7ff fed2 	bl	8001d14 <LL_I2C_HandleTransfer>
	// Send register address
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001f70:	e00a      	b.n	8001f88 <i2c_master_read_byte+0x44>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001f72:	481e      	ldr	r0, [pc, #120]	; (8001fec <i2c_master_read_byte+0xa8>)
 8001f74:	f7ff fe65 	bl	8001c42 <LL_I2C_IsActiveFlag_TXIS>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <i2c_master_read_byte+0x44>
		{
			LL_I2C_TransmitData8(I2C1, register_address);
 8001f7e:	79bb      	ldrb	r3, [r7, #6]
 8001f80:	4619      	mov	r1, r3
 8001f82:	481a      	ldr	r0, [pc, #104]	; (8001fec <i2c_master_read_byte+0xa8>)
 8001f84:	f7ff fef9 	bl	8001d7a <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001f88:	4818      	ldr	r0, [pc, #96]	; (8001fec <i2c_master_read_byte+0xa8>)
 8001f8a:	f7ff fe80 	bl	8001c8e <LL_I2C_IsActiveFlag_STOP>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0ee      	beq.n	8001f72 <i2c_master_read_byte+0x2e>
		}
	}

	LL_I2C_ClearFlag_STOP(I2C1);
 8001f94:	4815      	ldr	r0, [pc, #84]	; (8001fec <i2c_master_read_byte+0xa8>)
 8001f96:	f7ff fe9d 	bl	8001cd4 <LL_I2C_ClearFlag_STOP>

	while(LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001f9a:	bf00      	nop
 8001f9c:	4813      	ldr	r0, [pc, #76]	; (8001fec <i2c_master_read_byte+0xa8>)
 8001f9e:	f7ff fe76 	bl	8001c8e <LL_I2C_IsActiveFlag_STOP>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f9      	bne.n	8001f9c <i2c_master_read_byte+0x58>

	// Receive data from slave device
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001fa8:	79f9      	ldrb	r1, [r7, #7]
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <i2c_master_read_byte+0xb0>)
 8001fac:	9301      	str	r3, [sp, #4]
 8001fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	480c      	ldr	r0, [pc, #48]	; (8001fec <i2c_master_read_byte+0xa8>)
 8001fba:	f7ff feab 	bl	8001d14 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001fbe:	bf00      	nop
 8001fc0:	480a      	ldr	r0, [pc, #40]	; (8001fec <i2c_master_read_byte+0xa8>)
 8001fc2:	f7ff fe64 	bl	8001c8e <LL_I2C_IsActiveFlag_STOP>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f9      	beq.n	8001fc0 <i2c_master_read_byte+0x7c>

	//End of transfer
	LL_I2C_DisableIT_RX(I2C1);
 8001fcc:	4807      	ldr	r0, [pc, #28]	; (8001fec <i2c_master_read_byte+0xa8>)
 8001fce:	f7ff fe28 	bl	8001c22 <LL_I2C_DisableIT_RX>
	LL_I2C_ClearFlag_STOP(I2C1);
 8001fd2:	4806      	ldr	r0, [pc, #24]	; (8001fec <i2c_master_read_byte+0xa8>)
 8001fd4:	f7ff fe7e 	bl	8001cd4 <LL_I2C_ClearFlag_STOP>
	LL_I2C_ClearFlag_NACK(I2C1);
 8001fd8:	4804      	ldr	r0, [pc, #16]	; (8001fec <i2c_master_read_byte+0xa8>)
 8001fda:	f7ff fe6b 	bl	8001cb4 <LL_I2C_ClearFlag_NACK>

	return i2c_rx_data;
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <i2c_master_read_byte+0xb4>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40005400 	.word	0x40005400
 8001ff0:	80002000 	.word	0x80002000
 8001ff4:	80002400 	.word	0x80002400
 8001ff8:	200001ec 	.word	0x200001ec

08001ffc <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	// Check RXNE flag value in ISR register
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8002000:	4807      	ldr	r0, [pc, #28]	; (8002020 <I2C1_EV_IRQHandler+0x24>)
 8002002:	f7ff fe31 	bl	8001c68 <LL_I2C_IsActiveFlag_RXNE>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <I2C1_EV_IRQHandler+0x1e>
	{
		// Call function Master Reception Callback
		i2c_rx_data = LL_I2C_ReceiveData8(I2C1);
 800200c:	4804      	ldr	r0, [pc, #16]	; (8002020 <I2C1_EV_IRQHandler+0x24>)
 800200e:	f7ff fea7 	bl	8001d60 <LL_I2C_ReceiveData8>
 8002012:	4603      	mov	r3, r0
 8002014:	461a      	mov	r2, r3
 8002016:	4b03      	ldr	r3, [pc, #12]	; (8002024 <I2C1_EV_IRQHandler+0x28>)
 8002018:	701a      	strb	r2, [r3, #0]
	}
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40005400 	.word	0x40005400
 8002024:	200001ec 	.word	0x200001ec

08002028 <NVIC_SetPriorityGrouping>:
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <NVIC_SetPriorityGrouping+0x44>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002044:	4013      	ands	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205a:	4a04      	ldr	r2, [pc, #16]	; (800206c <NVIC_SetPriorityGrouping+0x44>)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	60d3      	str	r3, [r2, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <LL_RCC_HSI_Enable>:
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <LL_RCC_HSI_Enable+0x1c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a04      	ldr	r2, [pc, #16]	; (800208c <LL_RCC_HSI_Enable+0x1c>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000

08002090 <LL_RCC_HSI_IsReady>:
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <LL_RCC_HSI_IsReady+0x20>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b02      	cmp	r3, #2
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	40021000 	.word	0x40021000

080020b4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4904      	ldr	r1, [pc, #16]	; (80020dc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000

080020e0 <LL_RCC_SetSysClkSource>:
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <LL_RCC_SetSysClkSource+0x24>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f023 0203 	bic.w	r2, r3, #3
 80020f0:	4904      	ldr	r1, [pc, #16]	; (8002104 <LL_RCC_SetSysClkSource+0x24>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	40021000 	.word	0x40021000

08002108 <LL_RCC_GetSysClkSource>:
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <LL_RCC_GetSysClkSource+0x18>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 030c 	and.w	r3, r3, #12
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000

08002124 <LL_RCC_SetAHBPrescaler>:
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <LL_RCC_SetAHBPrescaler+0x24>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002134:	4904      	ldr	r1, [pc, #16]	; (8002148 <LL_RCC_SetAHBPrescaler+0x24>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40021000 	.word	0x40021000

0800214c <LL_RCC_SetAPB1Prescaler>:
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800215c:	4904      	ldr	r1, [pc, #16]	; (8002170 <LL_RCC_SetAPB1Prescaler+0x24>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4313      	orrs	r3, r2
 8002162:	604b      	str	r3, [r1, #4]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	40021000 	.word	0x40021000

08002174 <LL_RCC_SetAPB2Prescaler>:
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <LL_RCC_SetAPB2Prescaler+0x24>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002184:	4904      	ldr	r1, [pc, #16]	; (8002198 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	40021000 	.word	0x40021000

0800219c <LL_RCC_SetI2CClockSource>:
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <LL_RCC_SetI2CClockSource+0x2c>)
 80021a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	0e1b      	lsrs	r3, r3, #24
 80021ac:	43db      	mvns	r3, r3
 80021ae:	401a      	ands	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80021b6:	4904      	ldr	r1, [pc, #16]	; (80021c8 <LL_RCC_SetI2CClockSource+0x2c>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	630b      	str	r3, [r1, #48]	; 0x30
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	40021000 	.word	0x40021000

080021cc <LL_APB1_GRP1_EnableClock>:
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021d6:	69da      	ldr	r2, [r3, #28]
 80021d8:	4907      	ldr	r1, [pc, #28]	; (80021f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021e2:	69da      	ldr	r2, [r3, #28]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4013      	ands	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	40021000 	.word	0x40021000

080021fc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002206:	699a      	ldr	r2, [r3, #24]
 8002208:	4907      	ldr	r1, [pc, #28]	; (8002228 <LL_APB2_GRP1_EnableClock+0x2c>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4313      	orrs	r3, r2
 800220e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002212:	699a      	ldr	r2, [r3, #24]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4013      	ands	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800221a:	68fb      	ldr	r3, [r7, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	40021000 	.word	0x40021000

0800222c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002234:	4b06      	ldr	r3, [pc, #24]	; (8002250 <LL_FLASH_SetLatency+0x24>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f023 0207 	bic.w	r2, r3, #7
 800223c:	4904      	ldr	r1, [pc, #16]	; (8002250 <LL_FLASH_SetLatency+0x24>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4313      	orrs	r3, r2
 8002242:	600b      	str	r3, [r1, #0]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	40022000 	.word	0x40022000

08002254 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <LL_FLASH_GetLatency+0x18>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0307 	and.w	r3, r3, #7
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40022000 	.word	0x40022000

08002270 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b04      	cmp	r3, #4
 800227c:	d106      	bne.n	800228c <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <LL_SYSTICK_SetClkSource+0x34>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a08      	ldr	r2, [pc, #32]	; (80022a4 <LL_SYSTICK_SetClkSource+0x34>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 800228a:	e005      	b.n	8002298 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <LL_SYSTICK_SetClkSource+0x34>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <LL_SYSTICK_SetClkSource+0x34>)
 8002292:	f023 0304 	bic.w	r3, r3, #4
 8002296:	6013      	str	r3, [r2, #0]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000e010 	.word	0xe000e010

080022a8 <main>:

void SystemClock_Config(void);


int main(void)
{
 80022a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022ac:	b08a      	sub	sp, #40	; 0x28
 80022ae:	af06      	add	r7, sp, #24
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80022b0:	2001      	movs	r0, #1
 80022b2:	f7ff ffa3 	bl	80021fc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80022b6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80022ba:	f7ff ff87 	bl	80021cc <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022be:	2003      	movs	r0, #3
 80022c0:	f7ff feb2 	bl	8002028 <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 80022c4:	f000 f85a 	bl	800237c <SystemClock_Config>

  MX_GPIO_Init();
 80022c8:	f7ff fbaa 	bl	8001a20 <MX_GPIO_Init>
  MX_I2C1_Init();
 80022cc:	f7ff fd94 	bl	8001df8 <MX_I2C1_Init>

  MX_DMA_Init();
 80022d0:	f7ff fb3c 	bl	800194c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80022d4:	f000 fe1a 	bl	8002f0c <MX_USART2_UART_Init>

  lpsInit();
 80022d8:	f7ff fa62 	bl	80017a0 <lpsInit>
  htsInit();
 80022dc:	f7ff f9f0 	bl	80016c0 <htsInit>

  float temp = 0;
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
  float hum = 0;
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]
  float pressure = 0;
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
  float height = 0;
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	603b      	str	r3, [r7, #0]

  while (1)
  {
	  temp = getTemp();
 80022f8:	f7ff f9f0 	bl	80016dc <getTemp>
 80022fc:	ed87 0a03 	vstr	s0, [r7, #12]
	  hum = getHum();
 8002300:	f7ff fa16 	bl	8001730 <getHum>
 8002304:	ed87 0a02 	vstr	s0, [r7, #8]
	  pressure = getPressure();
 8002308:	f7ff fa86 	bl	8001818 <getPressure>
 800230c:	ee07 0a90 	vmov	s15, r0
 8002310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002314:	edc7 7a01 	vstr	s15, [r7, #4]
	  height = calculateHeight();
 8002318:	f7ff fa52 	bl	80017c0 <calculateHeight>
 800231c:	ed87 0a00 	vstr	s0, [r7]
	  sprintf(tx_data, "Teplota [°C]: %.2f, relat. vlhkosť [%%]: %.2f, tlak vzduchu [hPa]: %.2f, relat. výška od zeme [m]: %.2f;\n\r", temp, hum, pressure, height);
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f7fe f911 	bl	8000548 <__aeabi_f2d>
 8002326:	4682      	mov	sl, r0
 8002328:	468b      	mov	fp, r1
 800232a:	68b8      	ldr	r0, [r7, #8]
 800232c:	f7fe f90c 	bl	8000548 <__aeabi_f2d>
 8002330:	4604      	mov	r4, r0
 8002332:	460d      	mov	r5, r1
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7fe f907 	bl	8000548 <__aeabi_f2d>
 800233a:	4680      	mov	r8, r0
 800233c:	4689      	mov	r9, r1
 800233e:	6838      	ldr	r0, [r7, #0]
 8002340:	f7fe f902 	bl	8000548 <__aeabi_f2d>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800234c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002350:	e9cd 4500 	strd	r4, r5, [sp]
 8002354:	4652      	mov	r2, sl
 8002356:	465b      	mov	r3, fp
 8002358:	4906      	ldr	r1, [pc, #24]	; (8002374 <main+0xcc>)
 800235a:	4807      	ldr	r0, [pc, #28]	; (8002378 <main+0xd0>)
 800235c:	f001 fc8c 	bl	8003c78 <siprintf>
	  USART2_PutBuffer(tx_data, sizeof(tx_data));
 8002360:	21f4      	movs	r1, #244	; 0xf4
 8002362:	4805      	ldr	r0, [pc, #20]	; (8002378 <main+0xd0>)
 8002364:	f000 feb6 	bl	80030d4 <USART2_PutBuffer>
	  LL_mDelay(1000);
 8002368:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800236c:	f7ff f964 	bl	8001638 <LL_mDelay>
  {
 8002370:	e7c2      	b.n	80022f8 <main+0x50>
 8002372:	bf00      	nop
 8002374:	08006350 	.word	0x08006350
 8002378:	200001f0 	.word	0x200001f0

0800237c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002380:	2000      	movs	r0, #0
 8002382:	f7ff ff53 	bl	800222c <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8002386:	f7ff ff65 	bl	8002254 <LL_FLASH_GetLatency>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8002390:	f000 f82e 	bl	80023f0 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8002394:	f7ff fe6c 	bl	8002070 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8002398:	bf00      	nop
 800239a:	f7ff fe79 	bl	8002090 <LL_RCC_HSI_IsReady>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d1fa      	bne.n	800239a <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80023a4:	2010      	movs	r0, #16
 80023a6:	f7ff fe85 	bl	80020b4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80023aa:	2000      	movs	r0, #0
 80023ac:	f7ff feba 	bl	8002124 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80023b0:	2000      	movs	r0, #0
 80023b2:	f7ff fecb 	bl	800214c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80023b6:	2000      	movs	r0, #0
 80023b8:	f7ff fedc 	bl	8002174 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80023bc:	2000      	movs	r0, #0
 80023be:	f7ff fe8f 	bl	80020e0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80023c2:	bf00      	nop
 80023c4:	f7ff fea0 	bl	8002108 <LL_RCC_GetSysClkSource>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1fa      	bne.n	80023c4 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 80023ce:	4807      	ldr	r0, [pc, #28]	; (80023ec <SystemClock_Config+0x70>)
 80023d0:	f7ff f924 	bl	800161c <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80023d4:	2004      	movs	r0, #4
 80023d6:	f7ff ff4b 	bl	8002270 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 80023da:	4804      	ldr	r0, [pc, #16]	; (80023ec <SystemClock_Config+0x70>)
 80023dc:	f7ff f952 	bl	8001684 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80023e0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80023e4:	f7ff feda 	bl	800219c <LL_RCC_SetI2CClockSource>
}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	007a1200 	.word	0x007a1200

080023f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	3b01      	subs	r3, #1
 800240e:	4a0b      	ldr	r2, [pc, #44]	; (800243c <LL_DMA_DisableChannel+0x3c>)
 8002410:	5cd3      	ldrb	r3, [r2, r3]
 8002412:	461a      	mov	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	3a01      	subs	r2, #1
 800241e:	4907      	ldr	r1, [pc, #28]	; (800243c <LL_DMA_DisableChannel+0x3c>)
 8002420:	5c8a      	ldrb	r2, [r1, r2]
 8002422:	4611      	mov	r1, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	440a      	add	r2, r1
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	6013      	str	r3, [r2, #0]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	080063c0 	.word	0x080063c0

08002440 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002454:	bf0c      	ite	eq
 8002456:	2301      	moveq	r3, #1
 8002458:	2300      	movne	r3, #0
 800245a:	b2db      	uxtb	r3, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002478:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800247c:	bf0c      	ite	eq
 800247e:	2301      	moveq	r3, #1
 8002480:	2300      	movne	r3, #0
 8002482:	b2db      	uxtb	r3, r3
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024a4:	bf0c      	ite	eq
 80024a6:	2301      	moveq	r3, #1
 80024a8:	2300      	movne	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80024c6:	605a      	str	r2, [r3, #4]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024e2:	605a      	str	r2, [r3, #4]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80024fe:	605a      	str	r2, [r3, #4]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b10      	cmp	r3, #16
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	b2db      	uxtb	r3, r3
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002542:	2b40      	cmp	r3, #64	; 0x40
 8002544:	bf0c      	ite	eq
 8002546:	2301      	moveq	r3, #1
 8002548:	2300      	movne	r3, #0
 800254a:	b2db      	uxtb	r3, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2210      	movs	r2, #16
 8002564:	621a      	str	r2, [r3, #32]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002584:	e7fe      	b.n	8002584 <HardFault_Handler+0x4>

08002586 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800258a:	e7fe      	b.n	800258a <MemManage_Handler+0x4>

0800258c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002590:	e7fe      	b.n	8002590 <BusFault_Handler+0x4>

08002592 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002596:	e7fe      	b.n	8002596 <UsageFault_Handler+0x4>

08002598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 80025d4:	480a      	ldr	r0, [pc, #40]	; (8002600 <DMA1_Channel7_IRQHandler+0x30>)
 80025d6:	f7ff ff47 	bl	8002468 <LL_DMA_IsActiveFlag_TC7>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d10d      	bne.n	80025fc <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 80025e0:	4807      	ldr	r0, [pc, #28]	; (8002600 <DMA1_Channel7_IRQHandler+0x30>)
 80025e2:	f7ff ff77 	bl	80024d4 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 80025e6:	bf00      	nop
 80025e8:	4806      	ldr	r0, [pc, #24]	; (8002604 <DMA1_Channel7_IRQHandler+0x34>)
 80025ea:	f7ff ffa2 	bl	8002532 <LL_USART_IsActiveFlag_TC>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f9      	beq.n	80025e8 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 80025f4:	2107      	movs	r1, #7
 80025f6:	4802      	ldr	r0, [pc, #8]	; (8002600 <DMA1_Channel7_IRQHandler+0x30>)
 80025f8:	f7ff ff02 	bl	8002400 <LL_DMA_DisableChannel>
	}
}
 80025fc:	bf00      	nop
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40020000 	.word	0x40020000
 8002604:	40004400 	.word	0x40004400

08002608 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 800260c:	480c      	ldr	r0, [pc, #48]	; (8002640 <DMA1_Channel6_IRQHandler+0x38>)
 800260e:	f7ff ff17 	bl	8002440 <LL_DMA_IsActiveFlag_TC6>
 8002612:	4603      	mov	r3, r0
 8002614:	2b01      	cmp	r3, #1
 8002616:	d105      	bne.n	8002624 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8002618:	f000 fd7c 	bl	8003114 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 800261c:	4808      	ldr	r0, [pc, #32]	; (8002640 <DMA1_Channel6_IRQHandler+0x38>)
 800261e:	f7ff ff4b 	bl	80024b8 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 8002622:	e00a      	b.n	800263a <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8002624:	4806      	ldr	r0, [pc, #24]	; (8002640 <DMA1_Channel6_IRQHandler+0x38>)
 8002626:	f7ff ff33 	bl	8002490 <LL_DMA_IsActiveFlag_HT6>
 800262a:	4603      	mov	r3, r0
 800262c:	2b01      	cmp	r3, #1
 800262e:	d104      	bne.n	800263a <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8002630:	f000 fd70 	bl	8003114 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8002634:	4802      	ldr	r0, [pc, #8]	; (8002640 <DMA1_Channel6_IRQHandler+0x38>)
 8002636:	f7ff ff5b 	bl	80024f0 <LL_DMA_ClearFlag_HT6>
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40020000 	.word	0x40020000

08002644 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8002648:	4806      	ldr	r0, [pc, #24]	; (8002664 <USART2_IRQHandler+0x20>)
 800264a:	f7ff ff5f 	bl	800250c <LL_USART_IsActiveFlag_IDLE>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d004      	beq.n	800265e <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8002654:	f000 fd5e 	bl	8003114 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <USART2_IRQHandler+0x20>)
 800265a:	f7ff ff7d 	bl	8002558 <LL_USART_ClearFlag_IDLE>
	}
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40004400 	.word	0x40004400

08002668 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
	return 1;
 800266c:	2301      	movs	r3, #1
}
 800266e:	4618      	mov	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <_kill>:

int _kill(int pid, int sig)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002682:	f001 fbaf 	bl	8003de4 <__errno>
 8002686:	4603      	mov	r3, r0
 8002688:	2216      	movs	r2, #22
 800268a:	601a      	str	r2, [r3, #0]
	return -1;
 800268c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <_exit>:

void _exit (int status)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026a0:	f04f 31ff 	mov.w	r1, #4294967295
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff ffe7 	bl	8002678 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026aa:	e7fe      	b.n	80026aa <_exit+0x12>

080026ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	e00a      	b.n	80026d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026be:	f3af 8000 	nop.w
 80026c2:	4601      	mov	r1, r0
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	60ba      	str	r2, [r7, #8]
 80026ca:	b2ca      	uxtb	r2, r1
 80026cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	3301      	adds	r3, #1
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	429a      	cmp	r2, r3
 80026da:	dbf0      	blt.n	80026be <_read+0x12>
	}

return len;
 80026dc:	687b      	ldr	r3, [r7, #4]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	e009      	b.n	800270c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	60ba      	str	r2, [r7, #8]
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3301      	adds	r3, #1
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	429a      	cmp	r2, r3
 8002712:	dbf1      	blt.n	80026f8 <_write+0x12>
	}
	return len;
 8002714:	687b      	ldr	r3, [r7, #4]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <_close>:

int _close(int file)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
	return -1;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002746:	605a      	str	r2, [r3, #4]
	return 0;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <_isatty>:

int _isatty(int file)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
	return 1;
 800275e:	2301      	movs	r3, #1
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
	return 0;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void* _sbrk(int incr)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <_sbrk+0x50>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d102      	bne.n	800279e <_sbrk+0x16>
		heap_end = &end;
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <_sbrk+0x50>)
 800279a:	4a10      	ldr	r2, [pc, #64]	; (80027dc <_sbrk+0x54>)
 800279c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <_sbrk+0x50>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <_sbrk+0x50>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4413      	add	r3, r2
 80027ac:	466a      	mov	r2, sp
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d907      	bls.n	80027c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80027b2:	f001 fb17 	bl	8003de4 <__errno>
 80027b6:	4603      	mov	r3, r0
 80027b8:	220c      	movs	r2, #12
 80027ba:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80027bc:	f04f 33ff 	mov.w	r3, #4294967295
 80027c0:	e006      	b.n	80027d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <_sbrk+0x50>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	4a03      	ldr	r2, [pc, #12]	; (80027d8 <_sbrk+0x50>)
 80027cc:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80027ce:	68fb      	ldr	r3, [r7, #12]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	200003e4 	.word	0x200003e4
 80027dc:	200005c0 	.word	0x200005c0

080027e0 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027e4:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <SystemInit+0x84>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	4a1e      	ldr	r2, [pc, #120]	; (8002864 <SystemInit+0x84>)
 80027ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80027f4:	4b1c      	ldr	r3, [pc, #112]	; (8002868 <SystemInit+0x88>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1b      	ldr	r2, [pc, #108]	; (8002868 <SystemInit+0x88>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <SystemInit+0x88>)
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	4918      	ldr	r1, [pc, #96]	; (8002868 <SystemInit+0x88>)
 8002806:	4b19      	ldr	r3, [pc, #100]	; (800286c <SystemInit+0x8c>)
 8002808:	4013      	ands	r3, r2
 800280a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800280c:	4b16      	ldr	r3, [pc, #88]	; (8002868 <SystemInit+0x88>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a15      	ldr	r2, [pc, #84]	; (8002868 <SystemInit+0x88>)
 8002812:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800281a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <SystemInit+0x88>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a11      	ldr	r2, [pc, #68]	; (8002868 <SystemInit+0x88>)
 8002822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002826:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <SystemInit+0x88>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4a0e      	ldr	r2, [pc, #56]	; (8002868 <SystemInit+0x88>)
 800282e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002832:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <SystemInit+0x88>)
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	4a0b      	ldr	r2, [pc, #44]	; (8002868 <SystemInit+0x88>)
 800283a:	f023 030f 	bic.w	r3, r3, #15
 800283e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <SystemInit+0x88>)
 8002842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002844:	4908      	ldr	r1, [pc, #32]	; (8002868 <SystemInit+0x88>)
 8002846:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <SystemInit+0x90>)
 8002848:	4013      	ands	r3, r2
 800284a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <SystemInit+0x88>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002852:	4b04      	ldr	r3, [pc, #16]	; (8002864 <SystemInit+0x84>)
 8002854:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002858:	609a      	str	r2, [r3, #8]
#endif
}
 800285a:	bf00      	nop
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00
 8002868:	40021000 	.word	0x40021000
 800286c:	f87fc00c 	.word	0xf87fc00c
 8002870:	ff00fccc 	.word	0xff00fccc

08002874 <NVIC_EnableIRQ>:
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	f003 021f 	and.w	r2, r3, #31
 8002884:	4907      	ldr	r1, [pc, #28]	; (80028a4 <NVIC_EnableIRQ+0x30>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2001      	movs	r0, #1
 800288e:	fa00 f202 	lsl.w	r2, r0, r2
 8002892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000e100 	.word	0xe000e100

080028a8 <NVIC_SetPriority>:
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	da0b      	bge.n	80028d4 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	490c      	ldr	r1, [pc, #48]	; (80028f4 <NVIC_SetPriority+0x4c>)
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	3b04      	subs	r3, #4
 80028ca:	0112      	lsls	r2, r2, #4
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	440b      	add	r3, r1
 80028d0:	761a      	strb	r2, [r3, #24]
}
 80028d2:	e009      	b.n	80028e8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	4907      	ldr	r1, [pc, #28]	; (80028f8 <NVIC_SetPriority+0x50>)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	0112      	lsls	r2, r2, #4
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	440b      	add	r3, r1
 80028e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000ed00 	.word	0xe000ed00
 80028f8:	e000e100 	.word	0xe000e100

080028fc <LL_AHB1_GRP1_EnableClock>:
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	4907      	ldr	r1, [pc, #28]	; (8002928 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4313      	orrs	r3, r2
 800290e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4013      	ands	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800291a:	68fb      	ldr	r3, [r7, #12]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	40021000 	.word	0x40021000

0800292c <LL_APB1_GRP1_EnableClock>:
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002936:	69da      	ldr	r2, [r3, #28]
 8002938:	4907      	ldr	r1, [pc, #28]	; (8002958 <LL_APB1_GRP1_EnableClock+0x2c>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4313      	orrs	r3, r2
 800293e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002942:	69da      	ldr	r2, [r3, #28]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4013      	ands	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800294a:	68fb      	ldr	r3, [r7, #12]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	40021000 	.word	0x40021000

0800295c <LL_DMA_EnableChannel>:
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	3b01      	subs	r3, #1
 800296a:	4a0b      	ldr	r2, [pc, #44]	; (8002998 <LL_DMA_EnableChannel+0x3c>)
 800296c:	5cd3      	ldrb	r3, [r2, r3]
 800296e:	461a      	mov	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	3a01      	subs	r2, #1
 800297a:	4907      	ldr	r1, [pc, #28]	; (8002998 <LL_DMA_EnableChannel+0x3c>)
 800297c:	5c8a      	ldrb	r2, [r1, r2]
 800297e:	4611      	mov	r1, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	440a      	add	r2, r1
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6013      	str	r3, [r2, #0]
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	080063e0 	.word	0x080063e0

0800299c <LL_DMA_DisableChannel>:
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	3b01      	subs	r3, #1
 80029aa:	4a0b      	ldr	r2, [pc, #44]	; (80029d8 <LL_DMA_DisableChannel+0x3c>)
 80029ac:	5cd3      	ldrb	r3, [r2, r3]
 80029ae:	461a      	mov	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4413      	add	r3, r2
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	3a01      	subs	r2, #1
 80029ba:	4907      	ldr	r1, [pc, #28]	; (80029d8 <LL_DMA_DisableChannel+0x3c>)
 80029bc:	5c8a      	ldrb	r2, [r1, r2]
 80029be:	4611      	mov	r1, r2
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	440a      	add	r2, r1
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	6013      	str	r3, [r2, #0]
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	080063e0 	.word	0x080063e0

080029dc <LL_DMA_SetDataTransferDirection>:
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	4a0d      	ldr	r2, [pc, #52]	; (8002a24 <LL_DMA_SetDataTransferDirection+0x48>)
 80029ee:	5cd3      	ldrb	r3, [r2, r3]
 80029f0:	461a      	mov	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4413      	add	r3, r2
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029fc:	f023 0310 	bic.w	r3, r3, #16
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	3a01      	subs	r2, #1
 8002a04:	4907      	ldr	r1, [pc, #28]	; (8002a24 <LL_DMA_SetDataTransferDirection+0x48>)
 8002a06:	5c8a      	ldrb	r2, [r1, r2]
 8002a08:	4611      	mov	r1, r2
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	440a      	add	r2, r1
 8002a0e:	4611      	mov	r1, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]
}
 8002a16:	bf00      	nop
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	080063e0 	.word	0x080063e0

08002a28 <LL_DMA_GetDataTransferDirection>:
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	3b01      	subs	r3, #1
 8002a36:	4a07      	ldr	r2, [pc, #28]	; (8002a54 <LL_DMA_GetDataTransferDirection+0x2c>)
 8002a38:	5cd3      	ldrb	r3, [r2, r3]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4413      	add	r3, r2
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	f244 0310 	movw	r3, #16400	; 0x4010
 8002a46:	4013      	ands	r3, r2
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	080063e0 	.word	0x080063e0

08002a58 <LL_DMA_SetMode>:
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <LL_DMA_SetMode+0x44>)
 8002a6a:	5cd3      	ldrb	r3, [r2, r3]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4413      	add	r3, r2
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f023 0220 	bic.w	r2, r3, #32
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	4907      	ldr	r1, [pc, #28]	; (8002a9c <LL_DMA_SetMode+0x44>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	4619      	mov	r1, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	440b      	add	r3, r1
 8002a86:	4619      	mov	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]
}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	080063e0 	.word	0x080063e0

08002aa0 <LL_DMA_SetPeriphIncMode>:
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	4a0c      	ldr	r2, [pc, #48]	; (8002ae4 <LL_DMA_SetPeriphIncMode+0x44>)
 8002ab2:	5cd3      	ldrb	r3, [r2, r3]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4413      	add	r3, r2
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	4907      	ldr	r1, [pc, #28]	; (8002ae4 <LL_DMA_SetPeriphIncMode+0x44>)
 8002ac6:	5ccb      	ldrb	r3, [r1, r3]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	440b      	add	r3, r1
 8002ace:	4619      	mov	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	080063e0 	.word	0x080063e0

08002ae8 <LL_DMA_SetMemoryIncMode>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	4a0c      	ldr	r2, [pc, #48]	; (8002b2c <LL_DMA_SetMemoryIncMode+0x44>)
 8002afa:	5cd3      	ldrb	r3, [r2, r3]
 8002afc:	461a      	mov	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4413      	add	r3, r2
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	4907      	ldr	r1, [pc, #28]	; (8002b2c <LL_DMA_SetMemoryIncMode+0x44>)
 8002b0e:	5ccb      	ldrb	r3, [r1, r3]
 8002b10:	4619      	mov	r1, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	440b      	add	r3, r1
 8002b16:	4619      	mov	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
}
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	080063e0 	.word	0x080063e0

08002b30 <LL_DMA_SetPeriphSize>:
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	4a0c      	ldr	r2, [pc, #48]	; (8002b74 <LL_DMA_SetPeriphSize+0x44>)
 8002b42:	5cd3      	ldrb	r3, [r2, r3]
 8002b44:	461a      	mov	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4413      	add	r3, r2
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	4907      	ldr	r1, [pc, #28]	; (8002b74 <LL_DMA_SetPeriphSize+0x44>)
 8002b56:	5ccb      	ldrb	r3, [r1, r3]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	440b      	add	r3, r1
 8002b5e:	4619      	mov	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	080063e0 	.word	0x080063e0

08002b78 <LL_DMA_SetMemorySize>:
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	4a0c      	ldr	r2, [pc, #48]	; (8002bbc <LL_DMA_SetMemorySize+0x44>)
 8002b8a:	5cd3      	ldrb	r3, [r2, r3]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4413      	add	r3, r2
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	4907      	ldr	r1, [pc, #28]	; (8002bbc <LL_DMA_SetMemorySize+0x44>)
 8002b9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	440b      	add	r3, r1
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]
}
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	080063e0 	.word	0x080063e0

08002bc0 <LL_DMA_SetChannelPriorityLevel>:
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	4a0c      	ldr	r2, [pc, #48]	; (8002c04 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002bd2:	5cd3      	ldrb	r3, [r2, r3]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4413      	add	r3, r2
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	4907      	ldr	r1, [pc, #28]	; (8002c04 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002be6:	5ccb      	ldrb	r3, [r1, r3]
 8002be8:	4619      	mov	r1, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	440b      	add	r3, r1
 8002bee:	4619      	mov	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
}
 8002bf6:	bf00      	nop
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	080063e0 	.word	0x080063e0

08002c08 <LL_DMA_SetDataLength>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	4a0c      	ldr	r2, [pc, #48]	; (8002c4c <LL_DMA_SetDataLength+0x44>)
 8002c1a:	5cd3      	ldrb	r3, [r2, r3]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4413      	add	r3, r2
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	0c1b      	lsrs	r3, r3, #16
 8002c26:	041b      	lsls	r3, r3, #16
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	3a01      	subs	r2, #1
 8002c2c:	4907      	ldr	r1, [pc, #28]	; (8002c4c <LL_DMA_SetDataLength+0x44>)
 8002c2e:	5c8a      	ldrb	r2, [r1, r2]
 8002c30:	4611      	mov	r1, r2
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	440a      	add	r2, r1
 8002c36:	4611      	mov	r1, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	604b      	str	r3, [r1, #4]
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	080063e0 	.word	0x080063e0

08002c50 <LL_DMA_GetDataLength>:
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	4a06      	ldr	r2, [pc, #24]	; (8002c78 <LL_DMA_GetDataLength+0x28>)
 8002c60:	5cd3      	ldrb	r3, [r2, r3]
 8002c62:	461a      	mov	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4413      	add	r3, r2
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	b29b      	uxth	r3, r3
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	080063e0 	.word	0x080063e0

08002c7c <LL_DMA_ConfigAddresses>:
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b10      	cmp	r3, #16
 8002c8e:	d114      	bne.n	8002cba <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	4a16      	ldr	r2, [pc, #88]	; (8002cf0 <LL_DMA_ConfigAddresses+0x74>)
 8002c96:	5cd3      	ldrb	r3, [r2, r3]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	4a11      	ldr	r2, [pc, #68]	; (8002cf0 <LL_DMA_ConfigAddresses+0x74>)
 8002caa:	5cd3      	ldrb	r3, [r2, r3]
 8002cac:	461a      	mov	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	6093      	str	r3, [r2, #8]
}
 8002cb8:	e013      	b.n	8002ce2 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	4a0c      	ldr	r2, [pc, #48]	; (8002cf0 <LL_DMA_ConfigAddresses+0x74>)
 8002cc0:	5cd3      	ldrb	r3, [r2, r3]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	461a      	mov	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	4a07      	ldr	r2, [pc, #28]	; (8002cf0 <LL_DMA_ConfigAddresses+0x74>)
 8002cd4:	5cd3      	ldrb	r3, [r2, r3]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4413      	add	r3, r2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	60d3      	str	r3, [r2, #12]
}
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	080063e0 	.word	0x080063e0

08002cf4 <LL_DMA_SetMemoryAddress>:
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	4a06      	ldr	r2, [pc, #24]	; (8002d20 <LL_DMA_SetMemoryAddress+0x2c>)
 8002d06:	5cd3      	ldrb	r3, [r2, r3]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	461a      	mov	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	60d3      	str	r3, [r2, #12]
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	080063e0 	.word	0x080063e0

08002d24 <LL_DMA_SetPeriphAddress>:
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	4a06      	ldr	r2, [pc, #24]	; (8002d50 <LL_DMA_SetPeriphAddress+0x2c>)
 8002d36:	5cd3      	ldrb	r3, [r2, r3]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	461a      	mov	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6093      	str	r3, [r2, #8]
}
 8002d44:	bf00      	nop
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	080063e0 	.word	0x080063e0

08002d54 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	4a0b      	ldr	r2, [pc, #44]	; (8002d90 <LL_DMA_EnableIT_TC+0x3c>)
 8002d64:	5cd3      	ldrb	r3, [r2, r3]
 8002d66:	461a      	mov	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	3a01      	subs	r2, #1
 8002d72:	4907      	ldr	r1, [pc, #28]	; (8002d90 <LL_DMA_EnableIT_TC+0x3c>)
 8002d74:	5c8a      	ldrb	r2, [r1, r2]
 8002d76:	4611      	mov	r1, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	440a      	add	r2, r1
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	6013      	str	r3, [r2, #0]
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	080063e0 	.word	0x080063e0

08002d94 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <LL_DMA_EnableIT_HT+0x3c>)
 8002da4:	5cd3      	ldrb	r3, [r2, r3]
 8002da6:	461a      	mov	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	3a01      	subs	r2, #1
 8002db2:	4907      	ldr	r1, [pc, #28]	; (8002dd0 <LL_DMA_EnableIT_HT+0x3c>)
 8002db4:	5c8a      	ldrb	r2, [r1, r2]
 8002db6:	4611      	mov	r1, r2
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	440a      	add	r2, r1
 8002dbc:	f043 0304 	orr.w	r3, r3, #4
 8002dc0:	6013      	str	r3, [r2, #0]
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	080063e0 	.word	0x080063e0

08002dd4 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	3b01      	subs	r3, #1
 8002de2:	4a0b      	ldr	r2, [pc, #44]	; (8002e10 <LL_DMA_EnableIT_TE+0x3c>)
 8002de4:	5cd3      	ldrb	r3, [r2, r3]
 8002de6:	461a      	mov	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4413      	add	r3, r2
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	3a01      	subs	r2, #1
 8002df2:	4907      	ldr	r1, [pc, #28]	; (8002e10 <LL_DMA_EnableIT_TE+0x3c>)
 8002df4:	5c8a      	ldrb	r2, [r1, r2]
 8002df6:	4611      	mov	r1, r2
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	440a      	add	r2, r1
 8002dfc:	f043 0308 	orr.w	r3, r3, #8
 8002e00:	6013      	str	r3, [r2, #0]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	080063e0 	.word	0x080063e0

08002e14 <LL_USART_Enable>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f043 0201 	orr.w	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	601a      	str	r2, [r3, #0]
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_USART_ConfigAsyncMode>:
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	609a      	str	r2, [r3, #8]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f043 0210 	orr.w	r2, r3, #16
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	601a      	str	r2, [r3, #0]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	609a      	str	r2, [r3, #8]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8002ee0:	b490      	push	{r4, r7}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d103      	bne.n	8002ef8 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3328      	adds	r3, #40	; 0x28
 8002ef4:	461c      	mov	r4, r3
 8002ef6:	e002      	b.n	8002efe <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3324      	adds	r3, #36	; 0x24
 8002efc:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 8002efe:	4623      	mov	r3, r4
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc90      	pop	{r4, r7}
 8002f08:	4770      	bx	lr
	...

08002f0c <MX_USART2_UART_Init>:
	}
}

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8002f0c:	b5b0      	push	{r4, r5, r7, lr}
 8002f0e:	b090      	sub	sp, #64	; 0x40
 8002f10:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002f12:	f107 031c 	add.w	r3, r7, #28
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	605a      	str	r2, [r3, #4]
 8002f1c:	609a      	str	r2, [r3, #8]
 8002f1e:	60da      	str	r2, [r3, #12]
 8002f20:	611a      	str	r2, [r3, #16]
 8002f22:	615a      	str	r2, [r3, #20]
 8002f24:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f26:	1d3b      	adds	r3, r7, #4
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	60da      	str	r2, [r3, #12]
 8002f32:	611a      	str	r2, [r3, #16]
 8002f34:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002f36:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002f3a:	f7ff fcf7 	bl	800292c <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002f3e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002f42:	f7ff fcdb 	bl	80028fc <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8002f46:	f248 0304 	movw	r3, #32772	; 0x8004
 8002f4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002f50:	2303      	movs	r3, #3
 8002f52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002f5c:	2307      	movs	r3, #7
 8002f5e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f60:	1d3b      	adds	r3, r7, #4
 8002f62:	4619      	mov	r1, r3
 8002f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f68:	f7fd ff69 	bl	8000e3e <LL_GPIO_Init>
   * You can use configuration from example program and modify it.
   * For more information about DMA registers, refer to reference manual.
   */
  
  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2106      	movs	r1, #6
 8002f70:	4855      	ldr	r0, [pc, #340]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 8002f72:	f7ff fd33 	bl	80029dc <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8002f76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f7a:	2106      	movs	r1, #6
 8002f7c:	4852      	ldr	r0, [pc, #328]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 8002f7e:	f7ff fe1f 	bl	8002bc0 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8002f82:	2200      	movs	r2, #0
 8002f84:	2106      	movs	r1, #6
 8002f86:	4850      	ldr	r0, [pc, #320]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 8002f88:	f7ff fd66 	bl	8002a58 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2106      	movs	r1, #6
 8002f90:	484d      	ldr	r0, [pc, #308]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 8002f92:	f7ff fd85 	bl	8002aa0 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8002f96:	2280      	movs	r2, #128	; 0x80
 8002f98:	2106      	movs	r1, #6
 8002f9a:	484b      	ldr	r0, [pc, #300]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 8002f9c:	f7ff fda4 	bl	8002ae8 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2106      	movs	r1, #6
 8002fa4:	4848      	ldr	r0, [pc, #288]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 8002fa6:	f7ff fdc3 	bl	8002b30 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8002faa:	2200      	movs	r2, #0
 8002fac:	2106      	movs	r1, #6
 8002fae:	4846      	ldr	r0, [pc, #280]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 8002fb0:	f7ff fde2 	bl	8002b78 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	4845      	ldr	r0, [pc, #276]	; (80030cc <MX_USART2_UART_Init+0x1c0>)
 8002fb8:	f7ff ff92 	bl	8002ee0 <LL_USART_DMA_GetRegAddr>
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	4d44      	ldr	r5, [pc, #272]	; (80030d0 <MX_USART2_UART_Init+0x1c4>)
 8002fc0:	2106      	movs	r1, #6
 8002fc2:	4841      	ldr	r0, [pc, #260]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 8002fc4:	f7ff fd30 	bl	8002a28 <LL_DMA_GetDataTransferDirection>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	462b      	mov	r3, r5
 8002fce:	4622      	mov	r2, r4
 8002fd0:	2106      	movs	r1, #6
 8002fd2:	483d      	ldr	r0, [pc, #244]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 8002fd4:	f7ff fe52 	bl	8002c7c <LL_DMA_ConfigAddresses>
						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							(uint32_t)bufferUSART2dma,
							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002fd8:	2280      	movs	r2, #128	; 0x80
 8002fda:	2106      	movs	r1, #6
 8002fdc:	483a      	ldr	r0, [pc, #232]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 8002fde:	f7ff fe13 	bl	8002c08 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002fe2:	2106      	movs	r1, #6
 8002fe4:	4838      	ldr	r0, [pc, #224]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 8002fe6:	f7ff fcb9 	bl	800295c <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8002fea:	4838      	ldr	r0, [pc, #224]	; (80030cc <MX_USART2_UART_Init+0x1c0>)
 8002fec:	f7ff ff58 	bl	8002ea0 <LL_USART_EnableDMAReq_RX>


  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8002ff0:	2106      	movs	r1, #6
 8002ff2:	4835      	ldr	r0, [pc, #212]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 8002ff4:	f7ff feae 	bl	8002d54 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8002ff8:	2106      	movs	r1, #6
 8002ffa:	4833      	ldr	r0, [pc, #204]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 8002ffc:	f7ff feca 	bl	8002d94 <LL_DMA_EnableIT_HT>


  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003000:	2210      	movs	r2, #16
 8003002:	2107      	movs	r1, #7
 8003004:	4830      	ldr	r0, [pc, #192]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 8003006:	f7ff fce9 	bl	80029dc <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 800300a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800300e:	2107      	movs	r1, #7
 8003010:	482d      	ldr	r0, [pc, #180]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 8003012:	f7ff fdd5 	bl	8002bc0 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8003016:	2200      	movs	r2, #0
 8003018:	2107      	movs	r1, #7
 800301a:	482b      	ldr	r0, [pc, #172]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 800301c:	f7ff fd1c 	bl	8002a58 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8003020:	2200      	movs	r2, #0
 8003022:	2107      	movs	r1, #7
 8003024:	4828      	ldr	r0, [pc, #160]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 8003026:	f7ff fd3b 	bl	8002aa0 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 800302a:	2280      	movs	r2, #128	; 0x80
 800302c:	2107      	movs	r1, #7
 800302e:	4826      	ldr	r0, [pc, #152]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 8003030:	f7ff fd5a 	bl	8002ae8 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8003034:	2200      	movs	r2, #0
 8003036:	2107      	movs	r1, #7
 8003038:	4823      	ldr	r0, [pc, #140]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 800303a:	f7ff fd79 	bl	8002b30 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 800303e:	2200      	movs	r2, #0
 8003040:	2107      	movs	r1, #7
 8003042:	4821      	ldr	r0, [pc, #132]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 8003044:	f7ff fd98 	bl	8002b78 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8003048:	2100      	movs	r1, #0
 800304a:	4820      	ldr	r0, [pc, #128]	; (80030cc <MX_USART2_UART_Init+0x1c0>)
 800304c:	f7ff ff48 	bl	8002ee0 <LL_USART_DMA_GetRegAddr>
 8003050:	4603      	mov	r3, r0
 8003052:	461a      	mov	r2, r3
 8003054:	2107      	movs	r1, #7
 8003056:	481c      	ldr	r0, [pc, #112]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 8003058:	f7ff fe64 	bl	8002d24 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 800305c:	481b      	ldr	r0, [pc, #108]	; (80030cc <MX_USART2_UART_Init+0x1c0>)
 800305e:	f7ff ff2f 	bl	8002ec0 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8003062:	2107      	movs	r1, #7
 8003064:	4818      	ldr	r0, [pc, #96]	; (80030c8 <MX_USART2_UART_Init+0x1bc>)
 8003066:	f7ff feb5 	bl	8002dd4 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 800306a:	2100      	movs	r1, #0
 800306c:	2026      	movs	r0, #38	; 0x26
 800306e:	f7ff fc1b 	bl	80028a8 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8003072:	2026      	movs	r0, #38	; 0x26
 8003074:	f7ff fbfe 	bl	8002874 <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8003078:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800307c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800307e:	2300      	movs	r3, #0
 8003080:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003082:	2300      	movs	r3, #0
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003086:	2300      	movs	r3, #0
 8003088:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800308a:	230c      	movs	r3, #12
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800308e:	2300      	movs	r3, #0
 8003090:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003092:	2300      	movs	r3, #0
 8003094:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8003096:	f107 031c 	add.w	r3, r7, #28
 800309a:	4619      	mov	r1, r3
 800309c:	480b      	ldr	r0, [pc, #44]	; (80030cc <MX_USART2_UART_Init+0x1c0>)
 800309e:	f7fe fa37 	bl	8001510 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80030a2:	480a      	ldr	r0, [pc, #40]	; (80030cc <MX_USART2_UART_Init+0x1c0>)
 80030a4:	f7ff fec6 	bl	8002e34 <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 80030a8:	4808      	ldr	r0, [pc, #32]	; (80030cc <MX_USART2_UART_Init+0x1c0>)
 80030aa:	f7ff fee9 	bl	8002e80 <LL_USART_DisableIT_CTS>

  /* Enable USART2 peripheral and interrupts*/
  LL_USART_EnableIT_IDLE(USART2);
 80030ae:	4807      	ldr	r0, [pc, #28]	; (80030cc <MX_USART2_UART_Init+0x1c0>)
 80030b0:	f7ff fed6 	bl	8002e60 <LL_USART_EnableIT_IDLE>
  LL_USART_ConfigAsyncMode(USART2);
 80030b4:	4805      	ldr	r0, [pc, #20]	; (80030cc <MX_USART2_UART_Init+0x1c0>)
 80030b6:	f7ff febd 	bl	8002e34 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80030ba:	4804      	ldr	r0, [pc, #16]	; (80030cc <MX_USART2_UART_Init+0x1c0>)
 80030bc:	f7ff feaa 	bl	8002e14 <LL_USART_Enable>
}
 80030c0:	bf00      	nop
 80030c2:	3738      	adds	r7, #56	; 0x38
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bdb0      	pop	{r4, r5, r7, pc}
 80030c8:	40020000 	.word	0x40020000
 80030cc:	40004400 	.word	0x40004400
 80030d0:	200003e8 	.word	0x200003e8

080030d4 <USART2_PutBuffer>:


// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	461a      	mov	r2, r3
 80030e4:	2107      	movs	r1, #7
 80030e6:	480a      	ldr	r0, [pc, #40]	; (8003110 <USART2_PutBuffer+0x3c>)
 80030e8:	f7ff fe04 	bl	8002cf4 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	461a      	mov	r2, r3
 80030f0:	2107      	movs	r1, #7
 80030f2:	4807      	ldr	r0, [pc, #28]	; (8003110 <USART2_PutBuffer+0x3c>)
 80030f4:	f7ff fd88 	bl	8002c08 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 80030f8:	2107      	movs	r1, #7
 80030fa:	4805      	ldr	r0, [pc, #20]	; (8003110 <USART2_PutBuffer+0x3c>)
 80030fc:	f7ff fe2a 	bl	8002d54 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8003100:	2107      	movs	r1, #7
 8003102:	4803      	ldr	r0, [pc, #12]	; (8003110 <USART2_PutBuffer+0x3c>)
 8003104:	f7ff fc2a 	bl	800295c <LL_DMA_EnableChannel>
}
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40020000 	.word	0x40020000

08003114 <USART2_CheckDmaReception>:
 *	Forwards data to callback function.
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */
void USART2_CheckDmaReception(void)
{
 8003114:	b5b0      	push	{r4, r5, r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af02      	add	r7, sp, #8
	if(USART2_ProcessData == 0) return;
 800311a:	4b29      	ldr	r3, [pc, #164]	; (80031c0 <USART2_CheckDmaReception+0xac>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d04a      	beq.n	80031b8 <USART2_CheckDmaReception+0xa4>

	static uint16_t old_pos = 0;
	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8003122:	2106      	movs	r1, #6
 8003124:	4827      	ldr	r0, [pc, #156]	; (80031c4 <USART2_CheckDmaReception+0xb0>)
 8003126:	f7ff fd93 	bl	8002c50 <LL_DMA_GetDataLength>
 800312a:	4603      	mov	r3, r0
 800312c:	b29b      	uxth	r3, r3
 800312e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003132:	80fb      	strh	r3, [r7, #6]

	if ((pos - old_pos) < 35 && (pos != old_pos)) USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos, pos);
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	4a24      	ldr	r2, [pc, #144]	; (80031c8 <USART2_CheckDmaReception+0xb4>)
 8003138:	8812      	ldrh	r2, [r2, #0]
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	2b22      	cmp	r3, #34	; 0x22
 800313e:	dc12      	bgt.n	8003166 <USART2_CheckDmaReception+0x52>
 8003140:	4b21      	ldr	r3, [pc, #132]	; (80031c8 <USART2_CheckDmaReception+0xb4>)
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	88fa      	ldrh	r2, [r7, #6]
 8003146:	429a      	cmp	r2, r3
 8003148:	d00d      	beq.n	8003166 <USART2_CheckDmaReception+0x52>
 800314a:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <USART2_CheckDmaReception+0xac>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a1e      	ldr	r2, [pc, #120]	; (80031c8 <USART2_CheckDmaReception+0xb4>)
 8003150:	8812      	ldrh	r2, [r2, #0]
 8003152:	4611      	mov	r1, r2
 8003154:	4a1d      	ldr	r2, [pc, #116]	; (80031cc <USART2_CheckDmaReception+0xb8>)
 8003156:	1888      	adds	r0, r1, r2
 8003158:	4a1b      	ldr	r2, [pc, #108]	; (80031c8 <USART2_CheckDmaReception+0xb4>)
 800315a:	8812      	ldrh	r2, [r2, #0]
 800315c:	88f9      	ldrh	r1, [r7, #6]
 800315e:	1a8a      	subs	r2, r1, r2
 8003160:	b291      	uxth	r1, r2
 8003162:	88fa      	ldrh	r2, [r7, #6]
 8003164:	4798      	blx	r3

	old_pos = pos;
 8003166:	4a18      	ldr	r2, [pc, #96]	; (80031c8 <USART2_CheckDmaReception+0xb4>)
 8003168:	88fb      	ldrh	r3, [r7, #6]
 800316a:	8013      	strh	r3, [r2, #0]

	if(pos >= 92) {
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	2b5b      	cmp	r3, #91	; 0x5b
 8003170:	d923      	bls.n	80031ba <USART2_CheckDmaReception+0xa6>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8003172:	2106      	movs	r1, #6
 8003174:	4813      	ldr	r0, [pc, #76]	; (80031c4 <USART2_CheckDmaReception+0xb0>)
 8003176:	f7ff fc11 	bl	800299c <LL_DMA_DisableChannel>

		LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6,
 800317a:	2101      	movs	r1, #1
 800317c:	4814      	ldr	r0, [pc, #80]	; (80031d0 <USART2_CheckDmaReception+0xbc>)
 800317e:	f7ff feaf 	bl	8002ee0 <LL_USART_DMA_GetRegAddr>
 8003182:	4604      	mov	r4, r0
 8003184:	4d11      	ldr	r5, [pc, #68]	; (80031cc <USART2_CheckDmaReception+0xb8>)
 8003186:	2106      	movs	r1, #6
 8003188:	480e      	ldr	r0, [pc, #56]	; (80031c4 <USART2_CheckDmaReception+0xb0>)
 800318a:	f7ff fc4d 	bl	8002a28 <LL_DMA_GetDataTransferDirection>
 800318e:	4603      	mov	r3, r0
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	462b      	mov	r3, r5
 8003194:	4622      	mov	r2, r4
 8003196:	2106      	movs	r1, #6
 8003198:	480a      	ldr	r0, [pc, #40]	; (80031c4 <USART2_CheckDmaReception+0xb0>)
 800319a:	f7ff fd6f 	bl	8002c7c <LL_DMA_ConfigAddresses>
			                   LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
			                   (uint32_t)bufferUSART2dma,
			                   LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 800319e:	2280      	movs	r2, #128	; 0x80
 80031a0:	2106      	movs	r1, #6
 80031a2:	4808      	ldr	r0, [pc, #32]	; (80031c4 <USART2_CheckDmaReception+0xb0>)
 80031a4:	f7ff fd30 	bl	8002c08 <LL_DMA_SetDataLength>
        LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80031a8:	2106      	movs	r1, #6
 80031aa:	4806      	ldr	r0, [pc, #24]	; (80031c4 <USART2_CheckDmaReception+0xb0>)
 80031ac:	f7ff fbd6 	bl	800295c <LL_DMA_EnableChannel>
		old_pos = 0;
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <USART2_CheckDmaReception+0xb4>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	801a      	strh	r2, [r3, #0]
 80031b6:	e000      	b.n	80031ba <USART2_CheckDmaReception+0xa6>
	if(USART2_ProcessData == 0) return;
 80031b8:	bf00      	nop
	}
}
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bdb0      	pop	{r4, r5, r7, pc}
 80031c0:	20000468 	.word	0x20000468
 80031c4:	40020000 	.word	0x40020000
 80031c8:	2000046c 	.word	0x2000046c
 80031cc:	200003e8 	.word	0x200003e8
 80031d0:	40004400 	.word	0x40004400

080031d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80031d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800320c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80031d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80031da:	e003      	b.n	80031e4 <LoopCopyDataInit>

080031dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80031de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80031e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80031e2:	3104      	adds	r1, #4

080031e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80031e4:	480b      	ldr	r0, [pc, #44]	; (8003214 <LoopForever+0xa>)
	ldr	r3, =_edata
 80031e6:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <LoopForever+0xe>)
	adds	r2, r0, r1
 80031e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80031ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80031ec:	d3f6      	bcc.n	80031dc <CopyDataInit>
	ldr	r2, =_sbss
 80031ee:	4a0b      	ldr	r2, [pc, #44]	; (800321c <LoopForever+0x12>)
	b	LoopFillZerobss
 80031f0:	e002      	b.n	80031f8 <LoopFillZerobss>

080031f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80031f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80031f4:	f842 3b04 	str.w	r3, [r2], #4

080031f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80031f8:	4b09      	ldr	r3, [pc, #36]	; (8003220 <LoopForever+0x16>)
	cmp	r2, r3
 80031fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80031fc:	d3f9      	bcc.n	80031f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031fe:	f7ff faef 	bl	80027e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003202:	f000 fdf5 	bl	8003df0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003206:	f7ff f84f 	bl	80022a8 <main>

0800320a <LoopForever>:

LoopForever:
    b LoopForever
 800320a:	e7fe      	b.n	800320a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800320c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003210:	08006764 	.word	0x08006764
	ldr	r0, =_sdata
 8003214:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003218:	200001cc 	.word	0x200001cc
	ldr	r2, =_sbss
 800321c:	200001cc 	.word	0x200001cc
	ldr	r3, = _ebss
 8003220:	200005bc 	.word	0x200005bc

08003224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003224:	e7fe      	b.n	8003224 <ADC1_2_IRQHandler>

08003226 <__cvt>:
 8003226:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800322a:	ec55 4b10 	vmov	r4, r5, d0
 800322e:	2d00      	cmp	r5, #0
 8003230:	460e      	mov	r6, r1
 8003232:	4619      	mov	r1, r3
 8003234:	462b      	mov	r3, r5
 8003236:	bfbb      	ittet	lt
 8003238:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800323c:	461d      	movlt	r5, r3
 800323e:	2300      	movge	r3, #0
 8003240:	232d      	movlt	r3, #45	; 0x2d
 8003242:	700b      	strb	r3, [r1, #0]
 8003244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003246:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800324a:	4691      	mov	r9, r2
 800324c:	f023 0820 	bic.w	r8, r3, #32
 8003250:	bfbc      	itt	lt
 8003252:	4622      	movlt	r2, r4
 8003254:	4614      	movlt	r4, r2
 8003256:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800325a:	d005      	beq.n	8003268 <__cvt+0x42>
 800325c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003260:	d100      	bne.n	8003264 <__cvt+0x3e>
 8003262:	3601      	adds	r6, #1
 8003264:	2102      	movs	r1, #2
 8003266:	e000      	b.n	800326a <__cvt+0x44>
 8003268:	2103      	movs	r1, #3
 800326a:	ab03      	add	r3, sp, #12
 800326c:	9301      	str	r3, [sp, #4]
 800326e:	ab02      	add	r3, sp, #8
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	ec45 4b10 	vmov	d0, r4, r5
 8003276:	4653      	mov	r3, sl
 8003278:	4632      	mov	r2, r6
 800327a:	f000 fe69 	bl	8003f50 <_dtoa_r>
 800327e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003282:	4607      	mov	r7, r0
 8003284:	d102      	bne.n	800328c <__cvt+0x66>
 8003286:	f019 0f01 	tst.w	r9, #1
 800328a:	d022      	beq.n	80032d2 <__cvt+0xac>
 800328c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003290:	eb07 0906 	add.w	r9, r7, r6
 8003294:	d110      	bne.n	80032b8 <__cvt+0x92>
 8003296:	783b      	ldrb	r3, [r7, #0]
 8003298:	2b30      	cmp	r3, #48	; 0x30
 800329a:	d10a      	bne.n	80032b2 <__cvt+0x8c>
 800329c:	2200      	movs	r2, #0
 800329e:	2300      	movs	r3, #0
 80032a0:	4620      	mov	r0, r4
 80032a2:	4629      	mov	r1, r5
 80032a4:	f7fd fc10 	bl	8000ac8 <__aeabi_dcmpeq>
 80032a8:	b918      	cbnz	r0, 80032b2 <__cvt+0x8c>
 80032aa:	f1c6 0601 	rsb	r6, r6, #1
 80032ae:	f8ca 6000 	str.w	r6, [sl]
 80032b2:	f8da 3000 	ldr.w	r3, [sl]
 80032b6:	4499      	add	r9, r3
 80032b8:	2200      	movs	r2, #0
 80032ba:	2300      	movs	r3, #0
 80032bc:	4620      	mov	r0, r4
 80032be:	4629      	mov	r1, r5
 80032c0:	f7fd fc02 	bl	8000ac8 <__aeabi_dcmpeq>
 80032c4:	b108      	cbz	r0, 80032ca <__cvt+0xa4>
 80032c6:	f8cd 900c 	str.w	r9, [sp, #12]
 80032ca:	2230      	movs	r2, #48	; 0x30
 80032cc:	9b03      	ldr	r3, [sp, #12]
 80032ce:	454b      	cmp	r3, r9
 80032d0:	d307      	bcc.n	80032e2 <__cvt+0xbc>
 80032d2:	9b03      	ldr	r3, [sp, #12]
 80032d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80032d6:	1bdb      	subs	r3, r3, r7
 80032d8:	4638      	mov	r0, r7
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	b004      	add	sp, #16
 80032de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032e2:	1c59      	adds	r1, r3, #1
 80032e4:	9103      	str	r1, [sp, #12]
 80032e6:	701a      	strb	r2, [r3, #0]
 80032e8:	e7f0      	b.n	80032cc <__cvt+0xa6>

080032ea <__exponent>:
 80032ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032ec:	4603      	mov	r3, r0
 80032ee:	2900      	cmp	r1, #0
 80032f0:	bfb8      	it	lt
 80032f2:	4249      	neglt	r1, r1
 80032f4:	f803 2b02 	strb.w	r2, [r3], #2
 80032f8:	bfb4      	ite	lt
 80032fa:	222d      	movlt	r2, #45	; 0x2d
 80032fc:	222b      	movge	r2, #43	; 0x2b
 80032fe:	2909      	cmp	r1, #9
 8003300:	7042      	strb	r2, [r0, #1]
 8003302:	dd2a      	ble.n	800335a <__exponent+0x70>
 8003304:	f10d 0207 	add.w	r2, sp, #7
 8003308:	4617      	mov	r7, r2
 800330a:	260a      	movs	r6, #10
 800330c:	4694      	mov	ip, r2
 800330e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003312:	fb06 1415 	mls	r4, r6, r5, r1
 8003316:	3430      	adds	r4, #48	; 0x30
 8003318:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800331c:	460c      	mov	r4, r1
 800331e:	2c63      	cmp	r4, #99	; 0x63
 8003320:	f102 32ff 	add.w	r2, r2, #4294967295
 8003324:	4629      	mov	r1, r5
 8003326:	dcf1      	bgt.n	800330c <__exponent+0x22>
 8003328:	3130      	adds	r1, #48	; 0x30
 800332a:	f1ac 0402 	sub.w	r4, ip, #2
 800332e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003332:	1c41      	adds	r1, r0, #1
 8003334:	4622      	mov	r2, r4
 8003336:	42ba      	cmp	r2, r7
 8003338:	d30a      	bcc.n	8003350 <__exponent+0x66>
 800333a:	f10d 0209 	add.w	r2, sp, #9
 800333e:	eba2 020c 	sub.w	r2, r2, ip
 8003342:	42bc      	cmp	r4, r7
 8003344:	bf88      	it	hi
 8003346:	2200      	movhi	r2, #0
 8003348:	4413      	add	r3, r2
 800334a:	1a18      	subs	r0, r3, r0
 800334c:	b003      	add	sp, #12
 800334e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003350:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003354:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003358:	e7ed      	b.n	8003336 <__exponent+0x4c>
 800335a:	2330      	movs	r3, #48	; 0x30
 800335c:	3130      	adds	r1, #48	; 0x30
 800335e:	7083      	strb	r3, [r0, #2]
 8003360:	70c1      	strb	r1, [r0, #3]
 8003362:	1d03      	adds	r3, r0, #4
 8003364:	e7f1      	b.n	800334a <__exponent+0x60>
	...

08003368 <_printf_float>:
 8003368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800336c:	ed2d 8b02 	vpush	{d8}
 8003370:	b08d      	sub	sp, #52	; 0x34
 8003372:	460c      	mov	r4, r1
 8003374:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003378:	4616      	mov	r6, r2
 800337a:	461f      	mov	r7, r3
 800337c:	4605      	mov	r5, r0
 800337e:	f000 fce7 	bl	8003d50 <_localeconv_r>
 8003382:	f8d0 a000 	ldr.w	sl, [r0]
 8003386:	4650      	mov	r0, sl
 8003388:	f7fc ff72 	bl	8000270 <strlen>
 800338c:	2300      	movs	r3, #0
 800338e:	930a      	str	r3, [sp, #40]	; 0x28
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	9305      	str	r3, [sp, #20]
 8003394:	f8d8 3000 	ldr.w	r3, [r8]
 8003398:	f894 b018 	ldrb.w	fp, [r4, #24]
 800339c:	3307      	adds	r3, #7
 800339e:	f023 0307 	bic.w	r3, r3, #7
 80033a2:	f103 0208 	add.w	r2, r3, #8
 80033a6:	f8c8 2000 	str.w	r2, [r8]
 80033aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80033ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80033b2:	9307      	str	r3, [sp, #28]
 80033b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80033b8:	ee08 0a10 	vmov	s16, r0
 80033bc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80033c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033c4:	4b9e      	ldr	r3, [pc, #632]	; (8003640 <_printf_float+0x2d8>)
 80033c6:	f04f 32ff 	mov.w	r2, #4294967295
 80033ca:	f7fd fbaf 	bl	8000b2c <__aeabi_dcmpun>
 80033ce:	bb88      	cbnz	r0, 8003434 <_printf_float+0xcc>
 80033d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033d4:	4b9a      	ldr	r3, [pc, #616]	; (8003640 <_printf_float+0x2d8>)
 80033d6:	f04f 32ff 	mov.w	r2, #4294967295
 80033da:	f7fd fb89 	bl	8000af0 <__aeabi_dcmple>
 80033de:	bb48      	cbnz	r0, 8003434 <_printf_float+0xcc>
 80033e0:	2200      	movs	r2, #0
 80033e2:	2300      	movs	r3, #0
 80033e4:	4640      	mov	r0, r8
 80033e6:	4649      	mov	r1, r9
 80033e8:	f7fd fb78 	bl	8000adc <__aeabi_dcmplt>
 80033ec:	b110      	cbz	r0, 80033f4 <_printf_float+0x8c>
 80033ee:	232d      	movs	r3, #45	; 0x2d
 80033f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033f4:	4a93      	ldr	r2, [pc, #588]	; (8003644 <_printf_float+0x2dc>)
 80033f6:	4b94      	ldr	r3, [pc, #592]	; (8003648 <_printf_float+0x2e0>)
 80033f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80033fc:	bf94      	ite	ls
 80033fe:	4690      	movls	r8, r2
 8003400:	4698      	movhi	r8, r3
 8003402:	2303      	movs	r3, #3
 8003404:	6123      	str	r3, [r4, #16]
 8003406:	9b05      	ldr	r3, [sp, #20]
 8003408:	f023 0304 	bic.w	r3, r3, #4
 800340c:	6023      	str	r3, [r4, #0]
 800340e:	f04f 0900 	mov.w	r9, #0
 8003412:	9700      	str	r7, [sp, #0]
 8003414:	4633      	mov	r3, r6
 8003416:	aa0b      	add	r2, sp, #44	; 0x2c
 8003418:	4621      	mov	r1, r4
 800341a:	4628      	mov	r0, r5
 800341c:	f000 f9da 	bl	80037d4 <_printf_common>
 8003420:	3001      	adds	r0, #1
 8003422:	f040 8090 	bne.w	8003546 <_printf_float+0x1de>
 8003426:	f04f 30ff 	mov.w	r0, #4294967295
 800342a:	b00d      	add	sp, #52	; 0x34
 800342c:	ecbd 8b02 	vpop	{d8}
 8003430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003434:	4642      	mov	r2, r8
 8003436:	464b      	mov	r3, r9
 8003438:	4640      	mov	r0, r8
 800343a:	4649      	mov	r1, r9
 800343c:	f7fd fb76 	bl	8000b2c <__aeabi_dcmpun>
 8003440:	b140      	cbz	r0, 8003454 <_printf_float+0xec>
 8003442:	464b      	mov	r3, r9
 8003444:	2b00      	cmp	r3, #0
 8003446:	bfbc      	itt	lt
 8003448:	232d      	movlt	r3, #45	; 0x2d
 800344a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800344e:	4a7f      	ldr	r2, [pc, #508]	; (800364c <_printf_float+0x2e4>)
 8003450:	4b7f      	ldr	r3, [pc, #508]	; (8003650 <_printf_float+0x2e8>)
 8003452:	e7d1      	b.n	80033f8 <_printf_float+0x90>
 8003454:	6863      	ldr	r3, [r4, #4]
 8003456:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800345a:	9206      	str	r2, [sp, #24]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	d13f      	bne.n	80034e0 <_printf_float+0x178>
 8003460:	2306      	movs	r3, #6
 8003462:	6063      	str	r3, [r4, #4]
 8003464:	9b05      	ldr	r3, [sp, #20]
 8003466:	6861      	ldr	r1, [r4, #4]
 8003468:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800346c:	2300      	movs	r3, #0
 800346e:	9303      	str	r3, [sp, #12]
 8003470:	ab0a      	add	r3, sp, #40	; 0x28
 8003472:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003476:	ab09      	add	r3, sp, #36	; 0x24
 8003478:	ec49 8b10 	vmov	d0, r8, r9
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	6022      	str	r2, [r4, #0]
 8003480:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003484:	4628      	mov	r0, r5
 8003486:	f7ff fece 	bl	8003226 <__cvt>
 800348a:	9b06      	ldr	r3, [sp, #24]
 800348c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800348e:	2b47      	cmp	r3, #71	; 0x47
 8003490:	4680      	mov	r8, r0
 8003492:	d108      	bne.n	80034a6 <_printf_float+0x13e>
 8003494:	1cc8      	adds	r0, r1, #3
 8003496:	db02      	blt.n	800349e <_printf_float+0x136>
 8003498:	6863      	ldr	r3, [r4, #4]
 800349a:	4299      	cmp	r1, r3
 800349c:	dd41      	ble.n	8003522 <_printf_float+0x1ba>
 800349e:	f1ab 0302 	sub.w	r3, fp, #2
 80034a2:	fa5f fb83 	uxtb.w	fp, r3
 80034a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80034aa:	d820      	bhi.n	80034ee <_printf_float+0x186>
 80034ac:	3901      	subs	r1, #1
 80034ae:	465a      	mov	r2, fp
 80034b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80034b4:	9109      	str	r1, [sp, #36]	; 0x24
 80034b6:	f7ff ff18 	bl	80032ea <__exponent>
 80034ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034bc:	1813      	adds	r3, r2, r0
 80034be:	2a01      	cmp	r2, #1
 80034c0:	4681      	mov	r9, r0
 80034c2:	6123      	str	r3, [r4, #16]
 80034c4:	dc02      	bgt.n	80034cc <_printf_float+0x164>
 80034c6:	6822      	ldr	r2, [r4, #0]
 80034c8:	07d2      	lsls	r2, r2, #31
 80034ca:	d501      	bpl.n	80034d0 <_printf_float+0x168>
 80034cc:	3301      	adds	r3, #1
 80034ce:	6123      	str	r3, [r4, #16]
 80034d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d09c      	beq.n	8003412 <_printf_float+0xaa>
 80034d8:	232d      	movs	r3, #45	; 0x2d
 80034da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034de:	e798      	b.n	8003412 <_printf_float+0xaa>
 80034e0:	9a06      	ldr	r2, [sp, #24]
 80034e2:	2a47      	cmp	r2, #71	; 0x47
 80034e4:	d1be      	bne.n	8003464 <_printf_float+0xfc>
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1bc      	bne.n	8003464 <_printf_float+0xfc>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e7b9      	b.n	8003462 <_printf_float+0xfa>
 80034ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80034f2:	d118      	bne.n	8003526 <_printf_float+0x1be>
 80034f4:	2900      	cmp	r1, #0
 80034f6:	6863      	ldr	r3, [r4, #4]
 80034f8:	dd0b      	ble.n	8003512 <_printf_float+0x1aa>
 80034fa:	6121      	str	r1, [r4, #16]
 80034fc:	b913      	cbnz	r3, 8003504 <_printf_float+0x19c>
 80034fe:	6822      	ldr	r2, [r4, #0]
 8003500:	07d0      	lsls	r0, r2, #31
 8003502:	d502      	bpl.n	800350a <_printf_float+0x1a2>
 8003504:	3301      	adds	r3, #1
 8003506:	440b      	add	r3, r1
 8003508:	6123      	str	r3, [r4, #16]
 800350a:	65a1      	str	r1, [r4, #88]	; 0x58
 800350c:	f04f 0900 	mov.w	r9, #0
 8003510:	e7de      	b.n	80034d0 <_printf_float+0x168>
 8003512:	b913      	cbnz	r3, 800351a <_printf_float+0x1b2>
 8003514:	6822      	ldr	r2, [r4, #0]
 8003516:	07d2      	lsls	r2, r2, #31
 8003518:	d501      	bpl.n	800351e <_printf_float+0x1b6>
 800351a:	3302      	adds	r3, #2
 800351c:	e7f4      	b.n	8003508 <_printf_float+0x1a0>
 800351e:	2301      	movs	r3, #1
 8003520:	e7f2      	b.n	8003508 <_printf_float+0x1a0>
 8003522:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003528:	4299      	cmp	r1, r3
 800352a:	db05      	blt.n	8003538 <_printf_float+0x1d0>
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	6121      	str	r1, [r4, #16]
 8003530:	07d8      	lsls	r0, r3, #31
 8003532:	d5ea      	bpl.n	800350a <_printf_float+0x1a2>
 8003534:	1c4b      	adds	r3, r1, #1
 8003536:	e7e7      	b.n	8003508 <_printf_float+0x1a0>
 8003538:	2900      	cmp	r1, #0
 800353a:	bfd4      	ite	le
 800353c:	f1c1 0202 	rsble	r2, r1, #2
 8003540:	2201      	movgt	r2, #1
 8003542:	4413      	add	r3, r2
 8003544:	e7e0      	b.n	8003508 <_printf_float+0x1a0>
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	055a      	lsls	r2, r3, #21
 800354a:	d407      	bmi.n	800355c <_printf_float+0x1f4>
 800354c:	6923      	ldr	r3, [r4, #16]
 800354e:	4642      	mov	r2, r8
 8003550:	4631      	mov	r1, r6
 8003552:	4628      	mov	r0, r5
 8003554:	47b8      	blx	r7
 8003556:	3001      	adds	r0, #1
 8003558:	d12c      	bne.n	80035b4 <_printf_float+0x24c>
 800355a:	e764      	b.n	8003426 <_printf_float+0xbe>
 800355c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003560:	f240 80e0 	bls.w	8003724 <_printf_float+0x3bc>
 8003564:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003568:	2200      	movs	r2, #0
 800356a:	2300      	movs	r3, #0
 800356c:	f7fd faac 	bl	8000ac8 <__aeabi_dcmpeq>
 8003570:	2800      	cmp	r0, #0
 8003572:	d034      	beq.n	80035de <_printf_float+0x276>
 8003574:	4a37      	ldr	r2, [pc, #220]	; (8003654 <_printf_float+0x2ec>)
 8003576:	2301      	movs	r3, #1
 8003578:	4631      	mov	r1, r6
 800357a:	4628      	mov	r0, r5
 800357c:	47b8      	blx	r7
 800357e:	3001      	adds	r0, #1
 8003580:	f43f af51 	beq.w	8003426 <_printf_float+0xbe>
 8003584:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003588:	429a      	cmp	r2, r3
 800358a:	db02      	blt.n	8003592 <_printf_float+0x22a>
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	07d8      	lsls	r0, r3, #31
 8003590:	d510      	bpl.n	80035b4 <_printf_float+0x24c>
 8003592:	ee18 3a10 	vmov	r3, s16
 8003596:	4652      	mov	r2, sl
 8003598:	4631      	mov	r1, r6
 800359a:	4628      	mov	r0, r5
 800359c:	47b8      	blx	r7
 800359e:	3001      	adds	r0, #1
 80035a0:	f43f af41 	beq.w	8003426 <_printf_float+0xbe>
 80035a4:	f04f 0800 	mov.w	r8, #0
 80035a8:	f104 091a 	add.w	r9, r4, #26
 80035ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035ae:	3b01      	subs	r3, #1
 80035b0:	4543      	cmp	r3, r8
 80035b2:	dc09      	bgt.n	80035c8 <_printf_float+0x260>
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	079b      	lsls	r3, r3, #30
 80035b8:	f100 8107 	bmi.w	80037ca <_printf_float+0x462>
 80035bc:	68e0      	ldr	r0, [r4, #12]
 80035be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80035c0:	4298      	cmp	r0, r3
 80035c2:	bfb8      	it	lt
 80035c4:	4618      	movlt	r0, r3
 80035c6:	e730      	b.n	800342a <_printf_float+0xc2>
 80035c8:	2301      	movs	r3, #1
 80035ca:	464a      	mov	r2, r9
 80035cc:	4631      	mov	r1, r6
 80035ce:	4628      	mov	r0, r5
 80035d0:	47b8      	blx	r7
 80035d2:	3001      	adds	r0, #1
 80035d4:	f43f af27 	beq.w	8003426 <_printf_float+0xbe>
 80035d8:	f108 0801 	add.w	r8, r8, #1
 80035dc:	e7e6      	b.n	80035ac <_printf_float+0x244>
 80035de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	dc39      	bgt.n	8003658 <_printf_float+0x2f0>
 80035e4:	4a1b      	ldr	r2, [pc, #108]	; (8003654 <_printf_float+0x2ec>)
 80035e6:	2301      	movs	r3, #1
 80035e8:	4631      	mov	r1, r6
 80035ea:	4628      	mov	r0, r5
 80035ec:	47b8      	blx	r7
 80035ee:	3001      	adds	r0, #1
 80035f0:	f43f af19 	beq.w	8003426 <_printf_float+0xbe>
 80035f4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80035f8:	4313      	orrs	r3, r2
 80035fa:	d102      	bne.n	8003602 <_printf_float+0x29a>
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	07d9      	lsls	r1, r3, #31
 8003600:	d5d8      	bpl.n	80035b4 <_printf_float+0x24c>
 8003602:	ee18 3a10 	vmov	r3, s16
 8003606:	4652      	mov	r2, sl
 8003608:	4631      	mov	r1, r6
 800360a:	4628      	mov	r0, r5
 800360c:	47b8      	blx	r7
 800360e:	3001      	adds	r0, #1
 8003610:	f43f af09 	beq.w	8003426 <_printf_float+0xbe>
 8003614:	f04f 0900 	mov.w	r9, #0
 8003618:	f104 0a1a 	add.w	sl, r4, #26
 800361c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800361e:	425b      	negs	r3, r3
 8003620:	454b      	cmp	r3, r9
 8003622:	dc01      	bgt.n	8003628 <_printf_float+0x2c0>
 8003624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003626:	e792      	b.n	800354e <_printf_float+0x1e6>
 8003628:	2301      	movs	r3, #1
 800362a:	4652      	mov	r2, sl
 800362c:	4631      	mov	r1, r6
 800362e:	4628      	mov	r0, r5
 8003630:	47b8      	blx	r7
 8003632:	3001      	adds	r0, #1
 8003634:	f43f aef7 	beq.w	8003426 <_printf_float+0xbe>
 8003638:	f109 0901 	add.w	r9, r9, #1
 800363c:	e7ee      	b.n	800361c <_printf_float+0x2b4>
 800363e:	bf00      	nop
 8003640:	7fefffff 	.word	0x7fefffff
 8003644:	080063e7 	.word	0x080063e7
 8003648:	080063eb 	.word	0x080063eb
 800364c:	080063ef 	.word	0x080063ef
 8003650:	080063f3 	.word	0x080063f3
 8003654:	080063f7 	.word	0x080063f7
 8003658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800365a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800365c:	429a      	cmp	r2, r3
 800365e:	bfa8      	it	ge
 8003660:	461a      	movge	r2, r3
 8003662:	2a00      	cmp	r2, #0
 8003664:	4691      	mov	r9, r2
 8003666:	dc37      	bgt.n	80036d8 <_printf_float+0x370>
 8003668:	f04f 0b00 	mov.w	fp, #0
 800366c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003670:	f104 021a 	add.w	r2, r4, #26
 8003674:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003676:	9305      	str	r3, [sp, #20]
 8003678:	eba3 0309 	sub.w	r3, r3, r9
 800367c:	455b      	cmp	r3, fp
 800367e:	dc33      	bgt.n	80036e8 <_printf_float+0x380>
 8003680:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003684:	429a      	cmp	r2, r3
 8003686:	db3b      	blt.n	8003700 <_printf_float+0x398>
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	07da      	lsls	r2, r3, #31
 800368c:	d438      	bmi.n	8003700 <_printf_float+0x398>
 800368e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003692:	eba2 0903 	sub.w	r9, r2, r3
 8003696:	9b05      	ldr	r3, [sp, #20]
 8003698:	1ad2      	subs	r2, r2, r3
 800369a:	4591      	cmp	r9, r2
 800369c:	bfa8      	it	ge
 800369e:	4691      	movge	r9, r2
 80036a0:	f1b9 0f00 	cmp.w	r9, #0
 80036a4:	dc35      	bgt.n	8003712 <_printf_float+0x3aa>
 80036a6:	f04f 0800 	mov.w	r8, #0
 80036aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036ae:	f104 0a1a 	add.w	sl, r4, #26
 80036b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	eba3 0309 	sub.w	r3, r3, r9
 80036bc:	4543      	cmp	r3, r8
 80036be:	f77f af79 	ble.w	80035b4 <_printf_float+0x24c>
 80036c2:	2301      	movs	r3, #1
 80036c4:	4652      	mov	r2, sl
 80036c6:	4631      	mov	r1, r6
 80036c8:	4628      	mov	r0, r5
 80036ca:	47b8      	blx	r7
 80036cc:	3001      	adds	r0, #1
 80036ce:	f43f aeaa 	beq.w	8003426 <_printf_float+0xbe>
 80036d2:	f108 0801 	add.w	r8, r8, #1
 80036d6:	e7ec      	b.n	80036b2 <_printf_float+0x34a>
 80036d8:	4613      	mov	r3, r2
 80036da:	4631      	mov	r1, r6
 80036dc:	4642      	mov	r2, r8
 80036de:	4628      	mov	r0, r5
 80036e0:	47b8      	blx	r7
 80036e2:	3001      	adds	r0, #1
 80036e4:	d1c0      	bne.n	8003668 <_printf_float+0x300>
 80036e6:	e69e      	b.n	8003426 <_printf_float+0xbe>
 80036e8:	2301      	movs	r3, #1
 80036ea:	4631      	mov	r1, r6
 80036ec:	4628      	mov	r0, r5
 80036ee:	9205      	str	r2, [sp, #20]
 80036f0:	47b8      	blx	r7
 80036f2:	3001      	adds	r0, #1
 80036f4:	f43f ae97 	beq.w	8003426 <_printf_float+0xbe>
 80036f8:	9a05      	ldr	r2, [sp, #20]
 80036fa:	f10b 0b01 	add.w	fp, fp, #1
 80036fe:	e7b9      	b.n	8003674 <_printf_float+0x30c>
 8003700:	ee18 3a10 	vmov	r3, s16
 8003704:	4652      	mov	r2, sl
 8003706:	4631      	mov	r1, r6
 8003708:	4628      	mov	r0, r5
 800370a:	47b8      	blx	r7
 800370c:	3001      	adds	r0, #1
 800370e:	d1be      	bne.n	800368e <_printf_float+0x326>
 8003710:	e689      	b.n	8003426 <_printf_float+0xbe>
 8003712:	9a05      	ldr	r2, [sp, #20]
 8003714:	464b      	mov	r3, r9
 8003716:	4442      	add	r2, r8
 8003718:	4631      	mov	r1, r6
 800371a:	4628      	mov	r0, r5
 800371c:	47b8      	blx	r7
 800371e:	3001      	adds	r0, #1
 8003720:	d1c1      	bne.n	80036a6 <_printf_float+0x33e>
 8003722:	e680      	b.n	8003426 <_printf_float+0xbe>
 8003724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003726:	2a01      	cmp	r2, #1
 8003728:	dc01      	bgt.n	800372e <_printf_float+0x3c6>
 800372a:	07db      	lsls	r3, r3, #31
 800372c:	d53a      	bpl.n	80037a4 <_printf_float+0x43c>
 800372e:	2301      	movs	r3, #1
 8003730:	4642      	mov	r2, r8
 8003732:	4631      	mov	r1, r6
 8003734:	4628      	mov	r0, r5
 8003736:	47b8      	blx	r7
 8003738:	3001      	adds	r0, #1
 800373a:	f43f ae74 	beq.w	8003426 <_printf_float+0xbe>
 800373e:	ee18 3a10 	vmov	r3, s16
 8003742:	4652      	mov	r2, sl
 8003744:	4631      	mov	r1, r6
 8003746:	4628      	mov	r0, r5
 8003748:	47b8      	blx	r7
 800374a:	3001      	adds	r0, #1
 800374c:	f43f ae6b 	beq.w	8003426 <_printf_float+0xbe>
 8003750:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003754:	2200      	movs	r2, #0
 8003756:	2300      	movs	r3, #0
 8003758:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800375c:	f7fd f9b4 	bl	8000ac8 <__aeabi_dcmpeq>
 8003760:	b9d8      	cbnz	r0, 800379a <_printf_float+0x432>
 8003762:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003766:	f108 0201 	add.w	r2, r8, #1
 800376a:	4631      	mov	r1, r6
 800376c:	4628      	mov	r0, r5
 800376e:	47b8      	blx	r7
 8003770:	3001      	adds	r0, #1
 8003772:	d10e      	bne.n	8003792 <_printf_float+0x42a>
 8003774:	e657      	b.n	8003426 <_printf_float+0xbe>
 8003776:	2301      	movs	r3, #1
 8003778:	4652      	mov	r2, sl
 800377a:	4631      	mov	r1, r6
 800377c:	4628      	mov	r0, r5
 800377e:	47b8      	blx	r7
 8003780:	3001      	adds	r0, #1
 8003782:	f43f ae50 	beq.w	8003426 <_printf_float+0xbe>
 8003786:	f108 0801 	add.w	r8, r8, #1
 800378a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800378c:	3b01      	subs	r3, #1
 800378e:	4543      	cmp	r3, r8
 8003790:	dcf1      	bgt.n	8003776 <_printf_float+0x40e>
 8003792:	464b      	mov	r3, r9
 8003794:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003798:	e6da      	b.n	8003550 <_printf_float+0x1e8>
 800379a:	f04f 0800 	mov.w	r8, #0
 800379e:	f104 0a1a 	add.w	sl, r4, #26
 80037a2:	e7f2      	b.n	800378a <_printf_float+0x422>
 80037a4:	2301      	movs	r3, #1
 80037a6:	4642      	mov	r2, r8
 80037a8:	e7df      	b.n	800376a <_printf_float+0x402>
 80037aa:	2301      	movs	r3, #1
 80037ac:	464a      	mov	r2, r9
 80037ae:	4631      	mov	r1, r6
 80037b0:	4628      	mov	r0, r5
 80037b2:	47b8      	blx	r7
 80037b4:	3001      	adds	r0, #1
 80037b6:	f43f ae36 	beq.w	8003426 <_printf_float+0xbe>
 80037ba:	f108 0801 	add.w	r8, r8, #1
 80037be:	68e3      	ldr	r3, [r4, #12]
 80037c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80037c2:	1a5b      	subs	r3, r3, r1
 80037c4:	4543      	cmp	r3, r8
 80037c6:	dcf0      	bgt.n	80037aa <_printf_float+0x442>
 80037c8:	e6f8      	b.n	80035bc <_printf_float+0x254>
 80037ca:	f04f 0800 	mov.w	r8, #0
 80037ce:	f104 0919 	add.w	r9, r4, #25
 80037d2:	e7f4      	b.n	80037be <_printf_float+0x456>

080037d4 <_printf_common>:
 80037d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037d8:	4616      	mov	r6, r2
 80037da:	4699      	mov	r9, r3
 80037dc:	688a      	ldr	r2, [r1, #8]
 80037de:	690b      	ldr	r3, [r1, #16]
 80037e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037e4:	4293      	cmp	r3, r2
 80037e6:	bfb8      	it	lt
 80037e8:	4613      	movlt	r3, r2
 80037ea:	6033      	str	r3, [r6, #0]
 80037ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037f0:	4607      	mov	r7, r0
 80037f2:	460c      	mov	r4, r1
 80037f4:	b10a      	cbz	r2, 80037fa <_printf_common+0x26>
 80037f6:	3301      	adds	r3, #1
 80037f8:	6033      	str	r3, [r6, #0]
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	0699      	lsls	r1, r3, #26
 80037fe:	bf42      	ittt	mi
 8003800:	6833      	ldrmi	r3, [r6, #0]
 8003802:	3302      	addmi	r3, #2
 8003804:	6033      	strmi	r3, [r6, #0]
 8003806:	6825      	ldr	r5, [r4, #0]
 8003808:	f015 0506 	ands.w	r5, r5, #6
 800380c:	d106      	bne.n	800381c <_printf_common+0x48>
 800380e:	f104 0a19 	add.w	sl, r4, #25
 8003812:	68e3      	ldr	r3, [r4, #12]
 8003814:	6832      	ldr	r2, [r6, #0]
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	42ab      	cmp	r3, r5
 800381a:	dc26      	bgt.n	800386a <_printf_common+0x96>
 800381c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003820:	1e13      	subs	r3, r2, #0
 8003822:	6822      	ldr	r2, [r4, #0]
 8003824:	bf18      	it	ne
 8003826:	2301      	movne	r3, #1
 8003828:	0692      	lsls	r2, r2, #26
 800382a:	d42b      	bmi.n	8003884 <_printf_common+0xb0>
 800382c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003830:	4649      	mov	r1, r9
 8003832:	4638      	mov	r0, r7
 8003834:	47c0      	blx	r8
 8003836:	3001      	adds	r0, #1
 8003838:	d01e      	beq.n	8003878 <_printf_common+0xa4>
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	6922      	ldr	r2, [r4, #16]
 800383e:	f003 0306 	and.w	r3, r3, #6
 8003842:	2b04      	cmp	r3, #4
 8003844:	bf02      	ittt	eq
 8003846:	68e5      	ldreq	r5, [r4, #12]
 8003848:	6833      	ldreq	r3, [r6, #0]
 800384a:	1aed      	subeq	r5, r5, r3
 800384c:	68a3      	ldr	r3, [r4, #8]
 800384e:	bf0c      	ite	eq
 8003850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003854:	2500      	movne	r5, #0
 8003856:	4293      	cmp	r3, r2
 8003858:	bfc4      	itt	gt
 800385a:	1a9b      	subgt	r3, r3, r2
 800385c:	18ed      	addgt	r5, r5, r3
 800385e:	2600      	movs	r6, #0
 8003860:	341a      	adds	r4, #26
 8003862:	42b5      	cmp	r5, r6
 8003864:	d11a      	bne.n	800389c <_printf_common+0xc8>
 8003866:	2000      	movs	r0, #0
 8003868:	e008      	b.n	800387c <_printf_common+0xa8>
 800386a:	2301      	movs	r3, #1
 800386c:	4652      	mov	r2, sl
 800386e:	4649      	mov	r1, r9
 8003870:	4638      	mov	r0, r7
 8003872:	47c0      	blx	r8
 8003874:	3001      	adds	r0, #1
 8003876:	d103      	bne.n	8003880 <_printf_common+0xac>
 8003878:	f04f 30ff 	mov.w	r0, #4294967295
 800387c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003880:	3501      	adds	r5, #1
 8003882:	e7c6      	b.n	8003812 <_printf_common+0x3e>
 8003884:	18e1      	adds	r1, r4, r3
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	2030      	movs	r0, #48	; 0x30
 800388a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800388e:	4422      	add	r2, r4
 8003890:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003894:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003898:	3302      	adds	r3, #2
 800389a:	e7c7      	b.n	800382c <_printf_common+0x58>
 800389c:	2301      	movs	r3, #1
 800389e:	4622      	mov	r2, r4
 80038a0:	4649      	mov	r1, r9
 80038a2:	4638      	mov	r0, r7
 80038a4:	47c0      	blx	r8
 80038a6:	3001      	adds	r0, #1
 80038a8:	d0e6      	beq.n	8003878 <_printf_common+0xa4>
 80038aa:	3601      	adds	r6, #1
 80038ac:	e7d9      	b.n	8003862 <_printf_common+0x8e>
	...

080038b0 <_printf_i>:
 80038b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038b4:	7e0f      	ldrb	r7, [r1, #24]
 80038b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80038b8:	2f78      	cmp	r7, #120	; 0x78
 80038ba:	4691      	mov	r9, r2
 80038bc:	4680      	mov	r8, r0
 80038be:	460c      	mov	r4, r1
 80038c0:	469a      	mov	sl, r3
 80038c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80038c6:	d807      	bhi.n	80038d8 <_printf_i+0x28>
 80038c8:	2f62      	cmp	r7, #98	; 0x62
 80038ca:	d80a      	bhi.n	80038e2 <_printf_i+0x32>
 80038cc:	2f00      	cmp	r7, #0
 80038ce:	f000 80d4 	beq.w	8003a7a <_printf_i+0x1ca>
 80038d2:	2f58      	cmp	r7, #88	; 0x58
 80038d4:	f000 80c0 	beq.w	8003a58 <_printf_i+0x1a8>
 80038d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038e0:	e03a      	b.n	8003958 <_printf_i+0xa8>
 80038e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038e6:	2b15      	cmp	r3, #21
 80038e8:	d8f6      	bhi.n	80038d8 <_printf_i+0x28>
 80038ea:	a101      	add	r1, pc, #4	; (adr r1, 80038f0 <_printf_i+0x40>)
 80038ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038f0:	08003949 	.word	0x08003949
 80038f4:	0800395d 	.word	0x0800395d
 80038f8:	080038d9 	.word	0x080038d9
 80038fc:	080038d9 	.word	0x080038d9
 8003900:	080038d9 	.word	0x080038d9
 8003904:	080038d9 	.word	0x080038d9
 8003908:	0800395d 	.word	0x0800395d
 800390c:	080038d9 	.word	0x080038d9
 8003910:	080038d9 	.word	0x080038d9
 8003914:	080038d9 	.word	0x080038d9
 8003918:	080038d9 	.word	0x080038d9
 800391c:	08003a61 	.word	0x08003a61
 8003920:	08003989 	.word	0x08003989
 8003924:	08003a1b 	.word	0x08003a1b
 8003928:	080038d9 	.word	0x080038d9
 800392c:	080038d9 	.word	0x080038d9
 8003930:	08003a83 	.word	0x08003a83
 8003934:	080038d9 	.word	0x080038d9
 8003938:	08003989 	.word	0x08003989
 800393c:	080038d9 	.word	0x080038d9
 8003940:	080038d9 	.word	0x080038d9
 8003944:	08003a23 	.word	0x08003a23
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	1d1a      	adds	r2, r3, #4
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	602a      	str	r2, [r5, #0]
 8003950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003958:	2301      	movs	r3, #1
 800395a:	e09f      	b.n	8003a9c <_printf_i+0x1ec>
 800395c:	6820      	ldr	r0, [r4, #0]
 800395e:	682b      	ldr	r3, [r5, #0]
 8003960:	0607      	lsls	r7, r0, #24
 8003962:	f103 0104 	add.w	r1, r3, #4
 8003966:	6029      	str	r1, [r5, #0]
 8003968:	d501      	bpl.n	800396e <_printf_i+0xbe>
 800396a:	681e      	ldr	r6, [r3, #0]
 800396c:	e003      	b.n	8003976 <_printf_i+0xc6>
 800396e:	0646      	lsls	r6, r0, #25
 8003970:	d5fb      	bpl.n	800396a <_printf_i+0xba>
 8003972:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003976:	2e00      	cmp	r6, #0
 8003978:	da03      	bge.n	8003982 <_printf_i+0xd2>
 800397a:	232d      	movs	r3, #45	; 0x2d
 800397c:	4276      	negs	r6, r6
 800397e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003982:	485a      	ldr	r0, [pc, #360]	; (8003aec <_printf_i+0x23c>)
 8003984:	230a      	movs	r3, #10
 8003986:	e012      	b.n	80039ae <_printf_i+0xfe>
 8003988:	682b      	ldr	r3, [r5, #0]
 800398a:	6820      	ldr	r0, [r4, #0]
 800398c:	1d19      	adds	r1, r3, #4
 800398e:	6029      	str	r1, [r5, #0]
 8003990:	0605      	lsls	r5, r0, #24
 8003992:	d501      	bpl.n	8003998 <_printf_i+0xe8>
 8003994:	681e      	ldr	r6, [r3, #0]
 8003996:	e002      	b.n	800399e <_printf_i+0xee>
 8003998:	0641      	lsls	r1, r0, #25
 800399a:	d5fb      	bpl.n	8003994 <_printf_i+0xe4>
 800399c:	881e      	ldrh	r6, [r3, #0]
 800399e:	4853      	ldr	r0, [pc, #332]	; (8003aec <_printf_i+0x23c>)
 80039a0:	2f6f      	cmp	r7, #111	; 0x6f
 80039a2:	bf0c      	ite	eq
 80039a4:	2308      	moveq	r3, #8
 80039a6:	230a      	movne	r3, #10
 80039a8:	2100      	movs	r1, #0
 80039aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039ae:	6865      	ldr	r5, [r4, #4]
 80039b0:	60a5      	str	r5, [r4, #8]
 80039b2:	2d00      	cmp	r5, #0
 80039b4:	bfa2      	ittt	ge
 80039b6:	6821      	ldrge	r1, [r4, #0]
 80039b8:	f021 0104 	bicge.w	r1, r1, #4
 80039bc:	6021      	strge	r1, [r4, #0]
 80039be:	b90e      	cbnz	r6, 80039c4 <_printf_i+0x114>
 80039c0:	2d00      	cmp	r5, #0
 80039c2:	d04b      	beq.n	8003a5c <_printf_i+0x1ac>
 80039c4:	4615      	mov	r5, r2
 80039c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80039ca:	fb03 6711 	mls	r7, r3, r1, r6
 80039ce:	5dc7      	ldrb	r7, [r0, r7]
 80039d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80039d4:	4637      	mov	r7, r6
 80039d6:	42bb      	cmp	r3, r7
 80039d8:	460e      	mov	r6, r1
 80039da:	d9f4      	bls.n	80039c6 <_printf_i+0x116>
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d10b      	bne.n	80039f8 <_printf_i+0x148>
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	07de      	lsls	r6, r3, #31
 80039e4:	d508      	bpl.n	80039f8 <_printf_i+0x148>
 80039e6:	6923      	ldr	r3, [r4, #16]
 80039e8:	6861      	ldr	r1, [r4, #4]
 80039ea:	4299      	cmp	r1, r3
 80039ec:	bfde      	ittt	le
 80039ee:	2330      	movle	r3, #48	; 0x30
 80039f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039f8:	1b52      	subs	r2, r2, r5
 80039fa:	6122      	str	r2, [r4, #16]
 80039fc:	f8cd a000 	str.w	sl, [sp]
 8003a00:	464b      	mov	r3, r9
 8003a02:	aa03      	add	r2, sp, #12
 8003a04:	4621      	mov	r1, r4
 8003a06:	4640      	mov	r0, r8
 8003a08:	f7ff fee4 	bl	80037d4 <_printf_common>
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	d14a      	bne.n	8003aa6 <_printf_i+0x1f6>
 8003a10:	f04f 30ff 	mov.w	r0, #4294967295
 8003a14:	b004      	add	sp, #16
 8003a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	f043 0320 	orr.w	r3, r3, #32
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	4833      	ldr	r0, [pc, #204]	; (8003af0 <_printf_i+0x240>)
 8003a24:	2778      	movs	r7, #120	; 0x78
 8003a26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	6829      	ldr	r1, [r5, #0]
 8003a2e:	061f      	lsls	r7, r3, #24
 8003a30:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a34:	d402      	bmi.n	8003a3c <_printf_i+0x18c>
 8003a36:	065f      	lsls	r7, r3, #25
 8003a38:	bf48      	it	mi
 8003a3a:	b2b6      	uxthmi	r6, r6
 8003a3c:	07df      	lsls	r7, r3, #31
 8003a3e:	bf48      	it	mi
 8003a40:	f043 0320 	orrmi.w	r3, r3, #32
 8003a44:	6029      	str	r1, [r5, #0]
 8003a46:	bf48      	it	mi
 8003a48:	6023      	strmi	r3, [r4, #0]
 8003a4a:	b91e      	cbnz	r6, 8003a54 <_printf_i+0x1a4>
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	f023 0320 	bic.w	r3, r3, #32
 8003a52:	6023      	str	r3, [r4, #0]
 8003a54:	2310      	movs	r3, #16
 8003a56:	e7a7      	b.n	80039a8 <_printf_i+0xf8>
 8003a58:	4824      	ldr	r0, [pc, #144]	; (8003aec <_printf_i+0x23c>)
 8003a5a:	e7e4      	b.n	8003a26 <_printf_i+0x176>
 8003a5c:	4615      	mov	r5, r2
 8003a5e:	e7bd      	b.n	80039dc <_printf_i+0x12c>
 8003a60:	682b      	ldr	r3, [r5, #0]
 8003a62:	6826      	ldr	r6, [r4, #0]
 8003a64:	6961      	ldr	r1, [r4, #20]
 8003a66:	1d18      	adds	r0, r3, #4
 8003a68:	6028      	str	r0, [r5, #0]
 8003a6a:	0635      	lsls	r5, r6, #24
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	d501      	bpl.n	8003a74 <_printf_i+0x1c4>
 8003a70:	6019      	str	r1, [r3, #0]
 8003a72:	e002      	b.n	8003a7a <_printf_i+0x1ca>
 8003a74:	0670      	lsls	r0, r6, #25
 8003a76:	d5fb      	bpl.n	8003a70 <_printf_i+0x1c0>
 8003a78:	8019      	strh	r1, [r3, #0]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	6123      	str	r3, [r4, #16]
 8003a7e:	4615      	mov	r5, r2
 8003a80:	e7bc      	b.n	80039fc <_printf_i+0x14c>
 8003a82:	682b      	ldr	r3, [r5, #0]
 8003a84:	1d1a      	adds	r2, r3, #4
 8003a86:	602a      	str	r2, [r5, #0]
 8003a88:	681d      	ldr	r5, [r3, #0]
 8003a8a:	6862      	ldr	r2, [r4, #4]
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4628      	mov	r0, r5
 8003a90:	f7fc fb9e 	bl	80001d0 <memchr>
 8003a94:	b108      	cbz	r0, 8003a9a <_printf_i+0x1ea>
 8003a96:	1b40      	subs	r0, r0, r5
 8003a98:	6060      	str	r0, [r4, #4]
 8003a9a:	6863      	ldr	r3, [r4, #4]
 8003a9c:	6123      	str	r3, [r4, #16]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aa4:	e7aa      	b.n	80039fc <_printf_i+0x14c>
 8003aa6:	6923      	ldr	r3, [r4, #16]
 8003aa8:	462a      	mov	r2, r5
 8003aaa:	4649      	mov	r1, r9
 8003aac:	4640      	mov	r0, r8
 8003aae:	47d0      	blx	sl
 8003ab0:	3001      	adds	r0, #1
 8003ab2:	d0ad      	beq.n	8003a10 <_printf_i+0x160>
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	079b      	lsls	r3, r3, #30
 8003ab8:	d413      	bmi.n	8003ae2 <_printf_i+0x232>
 8003aba:	68e0      	ldr	r0, [r4, #12]
 8003abc:	9b03      	ldr	r3, [sp, #12]
 8003abe:	4298      	cmp	r0, r3
 8003ac0:	bfb8      	it	lt
 8003ac2:	4618      	movlt	r0, r3
 8003ac4:	e7a6      	b.n	8003a14 <_printf_i+0x164>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	4632      	mov	r2, r6
 8003aca:	4649      	mov	r1, r9
 8003acc:	4640      	mov	r0, r8
 8003ace:	47d0      	blx	sl
 8003ad0:	3001      	adds	r0, #1
 8003ad2:	d09d      	beq.n	8003a10 <_printf_i+0x160>
 8003ad4:	3501      	adds	r5, #1
 8003ad6:	68e3      	ldr	r3, [r4, #12]
 8003ad8:	9903      	ldr	r1, [sp, #12]
 8003ada:	1a5b      	subs	r3, r3, r1
 8003adc:	42ab      	cmp	r3, r5
 8003ade:	dcf2      	bgt.n	8003ac6 <_printf_i+0x216>
 8003ae0:	e7eb      	b.n	8003aba <_printf_i+0x20a>
 8003ae2:	2500      	movs	r5, #0
 8003ae4:	f104 0619 	add.w	r6, r4, #25
 8003ae8:	e7f5      	b.n	8003ad6 <_printf_i+0x226>
 8003aea:	bf00      	nop
 8003aec:	080063f9 	.word	0x080063f9
 8003af0:	0800640a 	.word	0x0800640a

08003af4 <std>:
 8003af4:	2300      	movs	r3, #0
 8003af6:	b510      	push	{r4, lr}
 8003af8:	4604      	mov	r4, r0
 8003afa:	e9c0 3300 	strd	r3, r3, [r0]
 8003afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b02:	6083      	str	r3, [r0, #8]
 8003b04:	8181      	strh	r1, [r0, #12]
 8003b06:	6643      	str	r3, [r0, #100]	; 0x64
 8003b08:	81c2      	strh	r2, [r0, #14]
 8003b0a:	6183      	str	r3, [r0, #24]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	2208      	movs	r2, #8
 8003b10:	305c      	adds	r0, #92	; 0x5c
 8003b12:	f000 f914 	bl	8003d3e <memset>
 8003b16:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <std+0x58>)
 8003b18:	6263      	str	r3, [r4, #36]	; 0x24
 8003b1a:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <std+0x5c>)
 8003b1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <std+0x60>)
 8003b20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b22:	4b0d      	ldr	r3, [pc, #52]	; (8003b58 <std+0x64>)
 8003b24:	6323      	str	r3, [r4, #48]	; 0x30
 8003b26:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <std+0x68>)
 8003b28:	6224      	str	r4, [r4, #32]
 8003b2a:	429c      	cmp	r4, r3
 8003b2c:	d006      	beq.n	8003b3c <std+0x48>
 8003b2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003b32:	4294      	cmp	r4, r2
 8003b34:	d002      	beq.n	8003b3c <std+0x48>
 8003b36:	33d0      	adds	r3, #208	; 0xd0
 8003b38:	429c      	cmp	r4, r3
 8003b3a:	d105      	bne.n	8003b48 <std+0x54>
 8003b3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b44:	f000 b978 	b.w	8003e38 <__retarget_lock_init_recursive>
 8003b48:	bd10      	pop	{r4, pc}
 8003b4a:	bf00      	nop
 8003b4c:	08003cb9 	.word	0x08003cb9
 8003b50:	08003cdb 	.word	0x08003cdb
 8003b54:	08003d13 	.word	0x08003d13
 8003b58:	08003d37 	.word	0x08003d37
 8003b5c:	20000470 	.word	0x20000470

08003b60 <stdio_exit_handler>:
 8003b60:	4a02      	ldr	r2, [pc, #8]	; (8003b6c <stdio_exit_handler+0xc>)
 8003b62:	4903      	ldr	r1, [pc, #12]	; (8003b70 <stdio_exit_handler+0x10>)
 8003b64:	4803      	ldr	r0, [pc, #12]	; (8003b74 <stdio_exit_handler+0x14>)
 8003b66:	f000 b869 	b.w	8003c3c <_fwalk_sglue>
 8003b6a:	bf00      	nop
 8003b6c:	20000004 	.word	0x20000004
 8003b70:	080057e9 	.word	0x080057e9
 8003b74:	20000010 	.word	0x20000010

08003b78 <cleanup_stdio>:
 8003b78:	6841      	ldr	r1, [r0, #4]
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <cleanup_stdio+0x34>)
 8003b7c:	4299      	cmp	r1, r3
 8003b7e:	b510      	push	{r4, lr}
 8003b80:	4604      	mov	r4, r0
 8003b82:	d001      	beq.n	8003b88 <cleanup_stdio+0x10>
 8003b84:	f001 fe30 	bl	80057e8 <_fflush_r>
 8003b88:	68a1      	ldr	r1, [r4, #8]
 8003b8a:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <cleanup_stdio+0x38>)
 8003b8c:	4299      	cmp	r1, r3
 8003b8e:	d002      	beq.n	8003b96 <cleanup_stdio+0x1e>
 8003b90:	4620      	mov	r0, r4
 8003b92:	f001 fe29 	bl	80057e8 <_fflush_r>
 8003b96:	68e1      	ldr	r1, [r4, #12]
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <cleanup_stdio+0x3c>)
 8003b9a:	4299      	cmp	r1, r3
 8003b9c:	d004      	beq.n	8003ba8 <cleanup_stdio+0x30>
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ba4:	f001 be20 	b.w	80057e8 <_fflush_r>
 8003ba8:	bd10      	pop	{r4, pc}
 8003baa:	bf00      	nop
 8003bac:	20000470 	.word	0x20000470
 8003bb0:	200004d8 	.word	0x200004d8
 8003bb4:	20000540 	.word	0x20000540

08003bb8 <global_stdio_init.part.0>:
 8003bb8:	b510      	push	{r4, lr}
 8003bba:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <global_stdio_init.part.0+0x30>)
 8003bbc:	4c0b      	ldr	r4, [pc, #44]	; (8003bec <global_stdio_init.part.0+0x34>)
 8003bbe:	4a0c      	ldr	r2, [pc, #48]	; (8003bf0 <global_stdio_init.part.0+0x38>)
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2104      	movs	r1, #4
 8003bc8:	f7ff ff94 	bl	8003af4 <std>
 8003bcc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	2109      	movs	r1, #9
 8003bd4:	f7ff ff8e 	bl	8003af4 <std>
 8003bd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003bdc:	2202      	movs	r2, #2
 8003bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003be2:	2112      	movs	r1, #18
 8003be4:	f7ff bf86 	b.w	8003af4 <std>
 8003be8:	200005a8 	.word	0x200005a8
 8003bec:	20000470 	.word	0x20000470
 8003bf0:	08003b61 	.word	0x08003b61

08003bf4 <__sfp_lock_acquire>:
 8003bf4:	4801      	ldr	r0, [pc, #4]	; (8003bfc <__sfp_lock_acquire+0x8>)
 8003bf6:	f000 b920 	b.w	8003e3a <__retarget_lock_acquire_recursive>
 8003bfa:	bf00      	nop
 8003bfc:	200005b1 	.word	0x200005b1

08003c00 <__sfp_lock_release>:
 8003c00:	4801      	ldr	r0, [pc, #4]	; (8003c08 <__sfp_lock_release+0x8>)
 8003c02:	f000 b91b 	b.w	8003e3c <__retarget_lock_release_recursive>
 8003c06:	bf00      	nop
 8003c08:	200005b1 	.word	0x200005b1

08003c0c <__sinit>:
 8003c0c:	b510      	push	{r4, lr}
 8003c0e:	4604      	mov	r4, r0
 8003c10:	f7ff fff0 	bl	8003bf4 <__sfp_lock_acquire>
 8003c14:	6a23      	ldr	r3, [r4, #32]
 8003c16:	b11b      	cbz	r3, 8003c20 <__sinit+0x14>
 8003c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c1c:	f7ff bff0 	b.w	8003c00 <__sfp_lock_release>
 8003c20:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <__sinit+0x28>)
 8003c22:	6223      	str	r3, [r4, #32]
 8003c24:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <__sinit+0x2c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1f5      	bne.n	8003c18 <__sinit+0xc>
 8003c2c:	f7ff ffc4 	bl	8003bb8 <global_stdio_init.part.0>
 8003c30:	e7f2      	b.n	8003c18 <__sinit+0xc>
 8003c32:	bf00      	nop
 8003c34:	08003b79 	.word	0x08003b79
 8003c38:	200005a8 	.word	0x200005a8

08003c3c <_fwalk_sglue>:
 8003c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c40:	4607      	mov	r7, r0
 8003c42:	4688      	mov	r8, r1
 8003c44:	4614      	mov	r4, r2
 8003c46:	2600      	movs	r6, #0
 8003c48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c4c:	f1b9 0901 	subs.w	r9, r9, #1
 8003c50:	d505      	bpl.n	8003c5e <_fwalk_sglue+0x22>
 8003c52:	6824      	ldr	r4, [r4, #0]
 8003c54:	2c00      	cmp	r4, #0
 8003c56:	d1f7      	bne.n	8003c48 <_fwalk_sglue+0xc>
 8003c58:	4630      	mov	r0, r6
 8003c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c5e:	89ab      	ldrh	r3, [r5, #12]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d907      	bls.n	8003c74 <_fwalk_sglue+0x38>
 8003c64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	d003      	beq.n	8003c74 <_fwalk_sglue+0x38>
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	4638      	mov	r0, r7
 8003c70:	47c0      	blx	r8
 8003c72:	4306      	orrs	r6, r0
 8003c74:	3568      	adds	r5, #104	; 0x68
 8003c76:	e7e9      	b.n	8003c4c <_fwalk_sglue+0x10>

08003c78 <siprintf>:
 8003c78:	b40e      	push	{r1, r2, r3}
 8003c7a:	b500      	push	{lr}
 8003c7c:	b09c      	sub	sp, #112	; 0x70
 8003c7e:	ab1d      	add	r3, sp, #116	; 0x74
 8003c80:	9002      	str	r0, [sp, #8]
 8003c82:	9006      	str	r0, [sp, #24]
 8003c84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c88:	4809      	ldr	r0, [pc, #36]	; (8003cb0 <siprintf+0x38>)
 8003c8a:	9107      	str	r1, [sp, #28]
 8003c8c:	9104      	str	r1, [sp, #16]
 8003c8e:	4909      	ldr	r1, [pc, #36]	; (8003cb4 <siprintf+0x3c>)
 8003c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c94:	9105      	str	r1, [sp, #20]
 8003c96:	6800      	ldr	r0, [r0, #0]
 8003c98:	9301      	str	r3, [sp, #4]
 8003c9a:	a902      	add	r1, sp, #8
 8003c9c:	f001 fc20 	bl	80054e0 <_svfiprintf_r>
 8003ca0:	9b02      	ldr	r3, [sp, #8]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	b01c      	add	sp, #112	; 0x70
 8003ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cac:	b003      	add	sp, #12
 8003cae:	4770      	bx	lr
 8003cb0:	2000005c 	.word	0x2000005c
 8003cb4:	ffff0208 	.word	0xffff0208

08003cb8 <__sread>:
 8003cb8:	b510      	push	{r4, lr}
 8003cba:	460c      	mov	r4, r1
 8003cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cc0:	f000 f86c 	bl	8003d9c <_read_r>
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	bfab      	itete	ge
 8003cc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cca:	89a3      	ldrhlt	r3, [r4, #12]
 8003ccc:	181b      	addge	r3, r3, r0
 8003cce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cd2:	bfac      	ite	ge
 8003cd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cd6:	81a3      	strhlt	r3, [r4, #12]
 8003cd8:	bd10      	pop	{r4, pc}

08003cda <__swrite>:
 8003cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cde:	461f      	mov	r7, r3
 8003ce0:	898b      	ldrh	r3, [r1, #12]
 8003ce2:	05db      	lsls	r3, r3, #23
 8003ce4:	4605      	mov	r5, r0
 8003ce6:	460c      	mov	r4, r1
 8003ce8:	4616      	mov	r6, r2
 8003cea:	d505      	bpl.n	8003cf8 <__swrite+0x1e>
 8003cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f000 f840 	bl	8003d78 <_lseek_r>
 8003cf8:	89a3      	ldrh	r3, [r4, #12]
 8003cfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d02:	81a3      	strh	r3, [r4, #12]
 8003d04:	4632      	mov	r2, r6
 8003d06:	463b      	mov	r3, r7
 8003d08:	4628      	mov	r0, r5
 8003d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d0e:	f000 b857 	b.w	8003dc0 <_write_r>

08003d12 <__sseek>:
 8003d12:	b510      	push	{r4, lr}
 8003d14:	460c      	mov	r4, r1
 8003d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d1a:	f000 f82d 	bl	8003d78 <_lseek_r>
 8003d1e:	1c43      	adds	r3, r0, #1
 8003d20:	89a3      	ldrh	r3, [r4, #12]
 8003d22:	bf15      	itete	ne
 8003d24:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d2e:	81a3      	strheq	r3, [r4, #12]
 8003d30:	bf18      	it	ne
 8003d32:	81a3      	strhne	r3, [r4, #12]
 8003d34:	bd10      	pop	{r4, pc}

08003d36 <__sclose>:
 8003d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d3a:	f000 b80d 	b.w	8003d58 <_close_r>

08003d3e <memset>:
 8003d3e:	4402      	add	r2, r0
 8003d40:	4603      	mov	r3, r0
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d100      	bne.n	8003d48 <memset+0xa>
 8003d46:	4770      	bx	lr
 8003d48:	f803 1b01 	strb.w	r1, [r3], #1
 8003d4c:	e7f9      	b.n	8003d42 <memset+0x4>
	...

08003d50 <_localeconv_r>:
 8003d50:	4800      	ldr	r0, [pc, #0]	; (8003d54 <_localeconv_r+0x4>)
 8003d52:	4770      	bx	lr
 8003d54:	20000150 	.word	0x20000150

08003d58 <_close_r>:
 8003d58:	b538      	push	{r3, r4, r5, lr}
 8003d5a:	4d06      	ldr	r5, [pc, #24]	; (8003d74 <_close_r+0x1c>)
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	4604      	mov	r4, r0
 8003d60:	4608      	mov	r0, r1
 8003d62:	602b      	str	r3, [r5, #0]
 8003d64:	f7fe fcdb 	bl	800271e <_close>
 8003d68:	1c43      	adds	r3, r0, #1
 8003d6a:	d102      	bne.n	8003d72 <_close_r+0x1a>
 8003d6c:	682b      	ldr	r3, [r5, #0]
 8003d6e:	b103      	cbz	r3, 8003d72 <_close_r+0x1a>
 8003d70:	6023      	str	r3, [r4, #0]
 8003d72:	bd38      	pop	{r3, r4, r5, pc}
 8003d74:	200005ac 	.word	0x200005ac

08003d78 <_lseek_r>:
 8003d78:	b538      	push	{r3, r4, r5, lr}
 8003d7a:	4d07      	ldr	r5, [pc, #28]	; (8003d98 <_lseek_r+0x20>)
 8003d7c:	4604      	mov	r4, r0
 8003d7e:	4608      	mov	r0, r1
 8003d80:	4611      	mov	r1, r2
 8003d82:	2200      	movs	r2, #0
 8003d84:	602a      	str	r2, [r5, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	f7fe fcf0 	bl	800276c <_lseek>
 8003d8c:	1c43      	adds	r3, r0, #1
 8003d8e:	d102      	bne.n	8003d96 <_lseek_r+0x1e>
 8003d90:	682b      	ldr	r3, [r5, #0]
 8003d92:	b103      	cbz	r3, 8003d96 <_lseek_r+0x1e>
 8003d94:	6023      	str	r3, [r4, #0]
 8003d96:	bd38      	pop	{r3, r4, r5, pc}
 8003d98:	200005ac 	.word	0x200005ac

08003d9c <_read_r>:
 8003d9c:	b538      	push	{r3, r4, r5, lr}
 8003d9e:	4d07      	ldr	r5, [pc, #28]	; (8003dbc <_read_r+0x20>)
 8003da0:	4604      	mov	r4, r0
 8003da2:	4608      	mov	r0, r1
 8003da4:	4611      	mov	r1, r2
 8003da6:	2200      	movs	r2, #0
 8003da8:	602a      	str	r2, [r5, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	f7fe fc7e 	bl	80026ac <_read>
 8003db0:	1c43      	adds	r3, r0, #1
 8003db2:	d102      	bne.n	8003dba <_read_r+0x1e>
 8003db4:	682b      	ldr	r3, [r5, #0]
 8003db6:	b103      	cbz	r3, 8003dba <_read_r+0x1e>
 8003db8:	6023      	str	r3, [r4, #0]
 8003dba:	bd38      	pop	{r3, r4, r5, pc}
 8003dbc:	200005ac 	.word	0x200005ac

08003dc0 <_write_r>:
 8003dc0:	b538      	push	{r3, r4, r5, lr}
 8003dc2:	4d07      	ldr	r5, [pc, #28]	; (8003de0 <_write_r+0x20>)
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	4608      	mov	r0, r1
 8003dc8:	4611      	mov	r1, r2
 8003dca:	2200      	movs	r2, #0
 8003dcc:	602a      	str	r2, [r5, #0]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f7fe fc89 	bl	80026e6 <_write>
 8003dd4:	1c43      	adds	r3, r0, #1
 8003dd6:	d102      	bne.n	8003dde <_write_r+0x1e>
 8003dd8:	682b      	ldr	r3, [r5, #0]
 8003dda:	b103      	cbz	r3, 8003dde <_write_r+0x1e>
 8003ddc:	6023      	str	r3, [r4, #0]
 8003dde:	bd38      	pop	{r3, r4, r5, pc}
 8003de0:	200005ac 	.word	0x200005ac

08003de4 <__errno>:
 8003de4:	4b01      	ldr	r3, [pc, #4]	; (8003dec <__errno+0x8>)
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	2000005c 	.word	0x2000005c

08003df0 <__libc_init_array>:
 8003df0:	b570      	push	{r4, r5, r6, lr}
 8003df2:	4d0d      	ldr	r5, [pc, #52]	; (8003e28 <__libc_init_array+0x38>)
 8003df4:	4c0d      	ldr	r4, [pc, #52]	; (8003e2c <__libc_init_array+0x3c>)
 8003df6:	1b64      	subs	r4, r4, r5
 8003df8:	10a4      	asrs	r4, r4, #2
 8003dfa:	2600      	movs	r6, #0
 8003dfc:	42a6      	cmp	r6, r4
 8003dfe:	d109      	bne.n	8003e14 <__libc_init_array+0x24>
 8003e00:	4d0b      	ldr	r5, [pc, #44]	; (8003e30 <__libc_init_array+0x40>)
 8003e02:	4c0c      	ldr	r4, [pc, #48]	; (8003e34 <__libc_init_array+0x44>)
 8003e04:	f002 fa96 	bl	8006334 <_init>
 8003e08:	1b64      	subs	r4, r4, r5
 8003e0a:	10a4      	asrs	r4, r4, #2
 8003e0c:	2600      	movs	r6, #0
 8003e0e:	42a6      	cmp	r6, r4
 8003e10:	d105      	bne.n	8003e1e <__libc_init_array+0x2e>
 8003e12:	bd70      	pop	{r4, r5, r6, pc}
 8003e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e18:	4798      	blx	r3
 8003e1a:	3601      	adds	r6, #1
 8003e1c:	e7ee      	b.n	8003dfc <__libc_init_array+0xc>
 8003e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e22:	4798      	blx	r3
 8003e24:	3601      	adds	r6, #1
 8003e26:	e7f2      	b.n	8003e0e <__libc_init_array+0x1e>
 8003e28:	0800675c 	.word	0x0800675c
 8003e2c:	0800675c 	.word	0x0800675c
 8003e30:	0800675c 	.word	0x0800675c
 8003e34:	08006760 	.word	0x08006760

08003e38 <__retarget_lock_init_recursive>:
 8003e38:	4770      	bx	lr

08003e3a <__retarget_lock_acquire_recursive>:
 8003e3a:	4770      	bx	lr

08003e3c <__retarget_lock_release_recursive>:
 8003e3c:	4770      	bx	lr

08003e3e <quorem>:
 8003e3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e42:	6903      	ldr	r3, [r0, #16]
 8003e44:	690c      	ldr	r4, [r1, #16]
 8003e46:	42a3      	cmp	r3, r4
 8003e48:	4607      	mov	r7, r0
 8003e4a:	db7e      	blt.n	8003f4a <quorem+0x10c>
 8003e4c:	3c01      	subs	r4, #1
 8003e4e:	f101 0814 	add.w	r8, r1, #20
 8003e52:	f100 0514 	add.w	r5, r0, #20
 8003e56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003e60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e64:	3301      	adds	r3, #1
 8003e66:	429a      	cmp	r2, r3
 8003e68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003e6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003e70:	fbb2 f6f3 	udiv	r6, r2, r3
 8003e74:	d331      	bcc.n	8003eda <quorem+0x9c>
 8003e76:	f04f 0e00 	mov.w	lr, #0
 8003e7a:	4640      	mov	r0, r8
 8003e7c:	46ac      	mov	ip, r5
 8003e7e:	46f2      	mov	sl, lr
 8003e80:	f850 2b04 	ldr.w	r2, [r0], #4
 8003e84:	b293      	uxth	r3, r2
 8003e86:	fb06 e303 	mla	r3, r6, r3, lr
 8003e8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003e8e:	0c1a      	lsrs	r2, r3, #16
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	ebaa 0303 	sub.w	r3, sl, r3
 8003e96:	f8dc a000 	ldr.w	sl, [ip]
 8003e9a:	fa13 f38a 	uxtah	r3, r3, sl
 8003e9e:	fb06 220e 	mla	r2, r6, lr, r2
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	9b00      	ldr	r3, [sp, #0]
 8003ea6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003eaa:	b292      	uxth	r2, r2
 8003eac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003eb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003eb4:	f8bd 3000 	ldrh.w	r3, [sp]
 8003eb8:	4581      	cmp	r9, r0
 8003eba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ebe:	f84c 3b04 	str.w	r3, [ip], #4
 8003ec2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003ec6:	d2db      	bcs.n	8003e80 <quorem+0x42>
 8003ec8:	f855 300b 	ldr.w	r3, [r5, fp]
 8003ecc:	b92b      	cbnz	r3, 8003eda <quorem+0x9c>
 8003ece:	9b01      	ldr	r3, [sp, #4]
 8003ed0:	3b04      	subs	r3, #4
 8003ed2:	429d      	cmp	r5, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	d32c      	bcc.n	8003f32 <quorem+0xf4>
 8003ed8:	613c      	str	r4, [r7, #16]
 8003eda:	4638      	mov	r0, r7
 8003edc:	f001 f9a6 	bl	800522c <__mcmp>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	db22      	blt.n	8003f2a <quorem+0xec>
 8003ee4:	3601      	adds	r6, #1
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	2000      	movs	r0, #0
 8003eea:	f858 2b04 	ldr.w	r2, [r8], #4
 8003eee:	f8d1 c000 	ldr.w	ip, [r1]
 8003ef2:	b293      	uxth	r3, r2
 8003ef4:	1ac3      	subs	r3, r0, r3
 8003ef6:	0c12      	lsrs	r2, r2, #16
 8003ef8:	fa13 f38c 	uxtah	r3, r3, ip
 8003efc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003f00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f0a:	45c1      	cmp	r9, r8
 8003f0c:	f841 3b04 	str.w	r3, [r1], #4
 8003f10:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003f14:	d2e9      	bcs.n	8003eea <quorem+0xac>
 8003f16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f1e:	b922      	cbnz	r2, 8003f2a <quorem+0xec>
 8003f20:	3b04      	subs	r3, #4
 8003f22:	429d      	cmp	r5, r3
 8003f24:	461a      	mov	r2, r3
 8003f26:	d30a      	bcc.n	8003f3e <quorem+0x100>
 8003f28:	613c      	str	r4, [r7, #16]
 8003f2a:	4630      	mov	r0, r6
 8003f2c:	b003      	add	sp, #12
 8003f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f32:	6812      	ldr	r2, [r2, #0]
 8003f34:	3b04      	subs	r3, #4
 8003f36:	2a00      	cmp	r2, #0
 8003f38:	d1ce      	bne.n	8003ed8 <quorem+0x9a>
 8003f3a:	3c01      	subs	r4, #1
 8003f3c:	e7c9      	b.n	8003ed2 <quorem+0x94>
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	3b04      	subs	r3, #4
 8003f42:	2a00      	cmp	r2, #0
 8003f44:	d1f0      	bne.n	8003f28 <quorem+0xea>
 8003f46:	3c01      	subs	r4, #1
 8003f48:	e7eb      	b.n	8003f22 <quorem+0xe4>
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	e7ee      	b.n	8003f2c <quorem+0xee>
	...

08003f50 <_dtoa_r>:
 8003f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f54:	ed2d 8b04 	vpush	{d8-d9}
 8003f58:	69c5      	ldr	r5, [r0, #28]
 8003f5a:	b093      	sub	sp, #76	; 0x4c
 8003f5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003f60:	ec57 6b10 	vmov	r6, r7, d0
 8003f64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003f68:	9107      	str	r1, [sp, #28]
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	920a      	str	r2, [sp, #40]	; 0x28
 8003f6e:	930d      	str	r3, [sp, #52]	; 0x34
 8003f70:	b975      	cbnz	r5, 8003f90 <_dtoa_r+0x40>
 8003f72:	2010      	movs	r0, #16
 8003f74:	f000 fe2a 	bl	8004bcc <malloc>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	61e0      	str	r0, [r4, #28]
 8003f7c:	b920      	cbnz	r0, 8003f88 <_dtoa_r+0x38>
 8003f7e:	4bae      	ldr	r3, [pc, #696]	; (8004238 <_dtoa_r+0x2e8>)
 8003f80:	21ef      	movs	r1, #239	; 0xef
 8003f82:	48ae      	ldr	r0, [pc, #696]	; (800423c <_dtoa_r+0x2ec>)
 8003f84:	f001 fc90 	bl	80058a8 <__assert_func>
 8003f88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003f8c:	6005      	str	r5, [r0, #0]
 8003f8e:	60c5      	str	r5, [r0, #12]
 8003f90:	69e3      	ldr	r3, [r4, #28]
 8003f92:	6819      	ldr	r1, [r3, #0]
 8003f94:	b151      	cbz	r1, 8003fac <_dtoa_r+0x5c>
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	604a      	str	r2, [r1, #4]
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	4093      	lsls	r3, r2
 8003f9e:	608b      	str	r3, [r1, #8]
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f000 ff07 	bl	8004db4 <_Bfree>
 8003fa6:	69e3      	ldr	r3, [r4, #28]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	1e3b      	subs	r3, r7, #0
 8003fae:	bfbb      	ittet	lt
 8003fb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003fb4:	9303      	strlt	r3, [sp, #12]
 8003fb6:	2300      	movge	r3, #0
 8003fb8:	2201      	movlt	r2, #1
 8003fba:	bfac      	ite	ge
 8003fbc:	f8c8 3000 	strge.w	r3, [r8]
 8003fc0:	f8c8 2000 	strlt.w	r2, [r8]
 8003fc4:	4b9e      	ldr	r3, [pc, #632]	; (8004240 <_dtoa_r+0x2f0>)
 8003fc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003fca:	ea33 0308 	bics.w	r3, r3, r8
 8003fce:	d11b      	bne.n	8004008 <_dtoa_r+0xb8>
 8003fd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003fd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003fdc:	4333      	orrs	r3, r6
 8003fde:	f000 8593 	beq.w	8004b08 <_dtoa_r+0xbb8>
 8003fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003fe4:	b963      	cbnz	r3, 8004000 <_dtoa_r+0xb0>
 8003fe6:	4b97      	ldr	r3, [pc, #604]	; (8004244 <_dtoa_r+0x2f4>)
 8003fe8:	e027      	b.n	800403a <_dtoa_r+0xea>
 8003fea:	4b97      	ldr	r3, [pc, #604]	; (8004248 <_dtoa_r+0x2f8>)
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	3308      	adds	r3, #8
 8003ff0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	9800      	ldr	r0, [sp, #0]
 8003ff6:	b013      	add	sp, #76	; 0x4c
 8003ff8:	ecbd 8b04 	vpop	{d8-d9}
 8003ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004000:	4b90      	ldr	r3, [pc, #576]	; (8004244 <_dtoa_r+0x2f4>)
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	3303      	adds	r3, #3
 8004006:	e7f3      	b.n	8003ff0 <_dtoa_r+0xa0>
 8004008:	ed9d 7b02 	vldr	d7, [sp, #8]
 800400c:	2200      	movs	r2, #0
 800400e:	ec51 0b17 	vmov	r0, r1, d7
 8004012:	eeb0 8a47 	vmov.f32	s16, s14
 8004016:	eef0 8a67 	vmov.f32	s17, s15
 800401a:	2300      	movs	r3, #0
 800401c:	f7fc fd54 	bl	8000ac8 <__aeabi_dcmpeq>
 8004020:	4681      	mov	r9, r0
 8004022:	b160      	cbz	r0, 800403e <_dtoa_r+0xee>
 8004024:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004026:	2301      	movs	r3, #1
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 8568 	beq.w	8004b02 <_dtoa_r+0xbb2>
 8004032:	4b86      	ldr	r3, [pc, #536]	; (800424c <_dtoa_r+0x2fc>)
 8004034:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	3b01      	subs	r3, #1
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	e7da      	b.n	8003ff4 <_dtoa_r+0xa4>
 800403e:	aa10      	add	r2, sp, #64	; 0x40
 8004040:	a911      	add	r1, sp, #68	; 0x44
 8004042:	4620      	mov	r0, r4
 8004044:	eeb0 0a48 	vmov.f32	s0, s16
 8004048:	eef0 0a68 	vmov.f32	s1, s17
 800404c:	f001 f994 	bl	8005378 <__d2b>
 8004050:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004054:	4682      	mov	sl, r0
 8004056:	2d00      	cmp	r5, #0
 8004058:	d07f      	beq.n	800415a <_dtoa_r+0x20a>
 800405a:	ee18 3a90 	vmov	r3, s17
 800405e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004062:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004066:	ec51 0b18 	vmov	r0, r1, d8
 800406a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800406e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004072:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004076:	4619      	mov	r1, r3
 8004078:	2200      	movs	r2, #0
 800407a:	4b75      	ldr	r3, [pc, #468]	; (8004250 <_dtoa_r+0x300>)
 800407c:	f7fc f904 	bl	8000288 <__aeabi_dsub>
 8004080:	a367      	add	r3, pc, #412	; (adr r3, 8004220 <_dtoa_r+0x2d0>)
 8004082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004086:	f7fc fab7 	bl	80005f8 <__aeabi_dmul>
 800408a:	a367      	add	r3, pc, #412	; (adr r3, 8004228 <_dtoa_r+0x2d8>)
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f7fc f8fc 	bl	800028c <__adddf3>
 8004094:	4606      	mov	r6, r0
 8004096:	4628      	mov	r0, r5
 8004098:	460f      	mov	r7, r1
 800409a:	f7fc fa43 	bl	8000524 <__aeabi_i2d>
 800409e:	a364      	add	r3, pc, #400	; (adr r3, 8004230 <_dtoa_r+0x2e0>)
 80040a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a4:	f7fc faa8 	bl	80005f8 <__aeabi_dmul>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4630      	mov	r0, r6
 80040ae:	4639      	mov	r1, r7
 80040b0:	f7fc f8ec 	bl	800028c <__adddf3>
 80040b4:	4606      	mov	r6, r0
 80040b6:	460f      	mov	r7, r1
 80040b8:	f7fc fd4e 	bl	8000b58 <__aeabi_d2iz>
 80040bc:	2200      	movs	r2, #0
 80040be:	4683      	mov	fp, r0
 80040c0:	2300      	movs	r3, #0
 80040c2:	4630      	mov	r0, r6
 80040c4:	4639      	mov	r1, r7
 80040c6:	f7fc fd09 	bl	8000adc <__aeabi_dcmplt>
 80040ca:	b148      	cbz	r0, 80040e0 <_dtoa_r+0x190>
 80040cc:	4658      	mov	r0, fp
 80040ce:	f7fc fa29 	bl	8000524 <__aeabi_i2d>
 80040d2:	4632      	mov	r2, r6
 80040d4:	463b      	mov	r3, r7
 80040d6:	f7fc fcf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80040da:	b908      	cbnz	r0, 80040e0 <_dtoa_r+0x190>
 80040dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80040e0:	f1bb 0f16 	cmp.w	fp, #22
 80040e4:	d857      	bhi.n	8004196 <_dtoa_r+0x246>
 80040e6:	4b5b      	ldr	r3, [pc, #364]	; (8004254 <_dtoa_r+0x304>)
 80040e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80040ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f0:	ec51 0b18 	vmov	r0, r1, d8
 80040f4:	f7fc fcf2 	bl	8000adc <__aeabi_dcmplt>
 80040f8:	2800      	cmp	r0, #0
 80040fa:	d04e      	beq.n	800419a <_dtoa_r+0x24a>
 80040fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004100:	2300      	movs	r3, #0
 8004102:	930c      	str	r3, [sp, #48]	; 0x30
 8004104:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004106:	1b5b      	subs	r3, r3, r5
 8004108:	1e5a      	subs	r2, r3, #1
 800410a:	bf45      	ittet	mi
 800410c:	f1c3 0301 	rsbmi	r3, r3, #1
 8004110:	9305      	strmi	r3, [sp, #20]
 8004112:	2300      	movpl	r3, #0
 8004114:	2300      	movmi	r3, #0
 8004116:	9206      	str	r2, [sp, #24]
 8004118:	bf54      	ite	pl
 800411a:	9305      	strpl	r3, [sp, #20]
 800411c:	9306      	strmi	r3, [sp, #24]
 800411e:	f1bb 0f00 	cmp.w	fp, #0
 8004122:	db3c      	blt.n	800419e <_dtoa_r+0x24e>
 8004124:	9b06      	ldr	r3, [sp, #24]
 8004126:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800412a:	445b      	add	r3, fp
 800412c:	9306      	str	r3, [sp, #24]
 800412e:	2300      	movs	r3, #0
 8004130:	9308      	str	r3, [sp, #32]
 8004132:	9b07      	ldr	r3, [sp, #28]
 8004134:	2b09      	cmp	r3, #9
 8004136:	d868      	bhi.n	800420a <_dtoa_r+0x2ba>
 8004138:	2b05      	cmp	r3, #5
 800413a:	bfc4      	itt	gt
 800413c:	3b04      	subgt	r3, #4
 800413e:	9307      	strgt	r3, [sp, #28]
 8004140:	9b07      	ldr	r3, [sp, #28]
 8004142:	f1a3 0302 	sub.w	r3, r3, #2
 8004146:	bfcc      	ite	gt
 8004148:	2500      	movgt	r5, #0
 800414a:	2501      	movle	r5, #1
 800414c:	2b03      	cmp	r3, #3
 800414e:	f200 8085 	bhi.w	800425c <_dtoa_r+0x30c>
 8004152:	e8df f003 	tbb	[pc, r3]
 8004156:	3b2e      	.short	0x3b2e
 8004158:	5839      	.short	0x5839
 800415a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800415e:	441d      	add	r5, r3
 8004160:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004164:	2b20      	cmp	r3, #32
 8004166:	bfc1      	itttt	gt
 8004168:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800416c:	fa08 f803 	lslgt.w	r8, r8, r3
 8004170:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8004174:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004178:	bfd6      	itet	le
 800417a:	f1c3 0320 	rsble	r3, r3, #32
 800417e:	ea48 0003 	orrgt.w	r0, r8, r3
 8004182:	fa06 f003 	lslle.w	r0, r6, r3
 8004186:	f7fc f9bd 	bl	8000504 <__aeabi_ui2d>
 800418a:	2201      	movs	r2, #1
 800418c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004190:	3d01      	subs	r5, #1
 8004192:	920e      	str	r2, [sp, #56]	; 0x38
 8004194:	e76f      	b.n	8004076 <_dtoa_r+0x126>
 8004196:	2301      	movs	r3, #1
 8004198:	e7b3      	b.n	8004102 <_dtoa_r+0x1b2>
 800419a:	900c      	str	r0, [sp, #48]	; 0x30
 800419c:	e7b2      	b.n	8004104 <_dtoa_r+0x1b4>
 800419e:	9b05      	ldr	r3, [sp, #20]
 80041a0:	eba3 030b 	sub.w	r3, r3, fp
 80041a4:	9305      	str	r3, [sp, #20]
 80041a6:	f1cb 0300 	rsb	r3, fp, #0
 80041aa:	9308      	str	r3, [sp, #32]
 80041ac:	2300      	movs	r3, #0
 80041ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80041b0:	e7bf      	b.n	8004132 <_dtoa_r+0x1e2>
 80041b2:	2300      	movs	r3, #0
 80041b4:	9309      	str	r3, [sp, #36]	; 0x24
 80041b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	dc52      	bgt.n	8004262 <_dtoa_r+0x312>
 80041bc:	2301      	movs	r3, #1
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	9304      	str	r3, [sp, #16]
 80041c2:	461a      	mov	r2, r3
 80041c4:	920a      	str	r2, [sp, #40]	; 0x28
 80041c6:	e00b      	b.n	80041e0 <_dtoa_r+0x290>
 80041c8:	2301      	movs	r3, #1
 80041ca:	e7f3      	b.n	80041b4 <_dtoa_r+0x264>
 80041cc:	2300      	movs	r3, #0
 80041ce:	9309      	str	r3, [sp, #36]	; 0x24
 80041d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041d2:	445b      	add	r3, fp
 80041d4:	9301      	str	r3, [sp, #4]
 80041d6:	3301      	adds	r3, #1
 80041d8:	2b01      	cmp	r3, #1
 80041da:	9304      	str	r3, [sp, #16]
 80041dc:	bfb8      	it	lt
 80041de:	2301      	movlt	r3, #1
 80041e0:	69e0      	ldr	r0, [r4, #28]
 80041e2:	2100      	movs	r1, #0
 80041e4:	2204      	movs	r2, #4
 80041e6:	f102 0614 	add.w	r6, r2, #20
 80041ea:	429e      	cmp	r6, r3
 80041ec:	d93d      	bls.n	800426a <_dtoa_r+0x31a>
 80041ee:	6041      	str	r1, [r0, #4]
 80041f0:	4620      	mov	r0, r4
 80041f2:	f000 fd9f 	bl	8004d34 <_Balloc>
 80041f6:	9000      	str	r0, [sp, #0]
 80041f8:	2800      	cmp	r0, #0
 80041fa:	d139      	bne.n	8004270 <_dtoa_r+0x320>
 80041fc:	4b16      	ldr	r3, [pc, #88]	; (8004258 <_dtoa_r+0x308>)
 80041fe:	4602      	mov	r2, r0
 8004200:	f240 11af 	movw	r1, #431	; 0x1af
 8004204:	e6bd      	b.n	8003f82 <_dtoa_r+0x32>
 8004206:	2301      	movs	r3, #1
 8004208:	e7e1      	b.n	80041ce <_dtoa_r+0x27e>
 800420a:	2501      	movs	r5, #1
 800420c:	2300      	movs	r3, #0
 800420e:	9307      	str	r3, [sp, #28]
 8004210:	9509      	str	r5, [sp, #36]	; 0x24
 8004212:	f04f 33ff 	mov.w	r3, #4294967295
 8004216:	9301      	str	r3, [sp, #4]
 8004218:	9304      	str	r3, [sp, #16]
 800421a:	2200      	movs	r2, #0
 800421c:	2312      	movs	r3, #18
 800421e:	e7d1      	b.n	80041c4 <_dtoa_r+0x274>
 8004220:	636f4361 	.word	0x636f4361
 8004224:	3fd287a7 	.word	0x3fd287a7
 8004228:	8b60c8b3 	.word	0x8b60c8b3
 800422c:	3fc68a28 	.word	0x3fc68a28
 8004230:	509f79fb 	.word	0x509f79fb
 8004234:	3fd34413 	.word	0x3fd34413
 8004238:	08006428 	.word	0x08006428
 800423c:	0800643f 	.word	0x0800643f
 8004240:	7ff00000 	.word	0x7ff00000
 8004244:	08006424 	.word	0x08006424
 8004248:	0800641b 	.word	0x0800641b
 800424c:	080063f8 	.word	0x080063f8
 8004250:	3ff80000 	.word	0x3ff80000
 8004254:	08006530 	.word	0x08006530
 8004258:	08006497 	.word	0x08006497
 800425c:	2301      	movs	r3, #1
 800425e:	9309      	str	r3, [sp, #36]	; 0x24
 8004260:	e7d7      	b.n	8004212 <_dtoa_r+0x2c2>
 8004262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004264:	9301      	str	r3, [sp, #4]
 8004266:	9304      	str	r3, [sp, #16]
 8004268:	e7ba      	b.n	80041e0 <_dtoa_r+0x290>
 800426a:	3101      	adds	r1, #1
 800426c:	0052      	lsls	r2, r2, #1
 800426e:	e7ba      	b.n	80041e6 <_dtoa_r+0x296>
 8004270:	69e3      	ldr	r3, [r4, #28]
 8004272:	9a00      	ldr	r2, [sp, #0]
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	9b04      	ldr	r3, [sp, #16]
 8004278:	2b0e      	cmp	r3, #14
 800427a:	f200 80a8 	bhi.w	80043ce <_dtoa_r+0x47e>
 800427e:	2d00      	cmp	r5, #0
 8004280:	f000 80a5 	beq.w	80043ce <_dtoa_r+0x47e>
 8004284:	f1bb 0f00 	cmp.w	fp, #0
 8004288:	dd38      	ble.n	80042fc <_dtoa_r+0x3ac>
 800428a:	4bc0      	ldr	r3, [pc, #768]	; (800458c <_dtoa_r+0x63c>)
 800428c:	f00b 020f 	and.w	r2, fp, #15
 8004290:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004294:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004298:	e9d3 6700 	ldrd	r6, r7, [r3]
 800429c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80042a0:	d019      	beq.n	80042d6 <_dtoa_r+0x386>
 80042a2:	4bbb      	ldr	r3, [pc, #748]	; (8004590 <_dtoa_r+0x640>)
 80042a4:	ec51 0b18 	vmov	r0, r1, d8
 80042a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80042ac:	f7fc face 	bl	800084c <__aeabi_ddiv>
 80042b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042b4:	f008 080f 	and.w	r8, r8, #15
 80042b8:	2503      	movs	r5, #3
 80042ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004590 <_dtoa_r+0x640>
 80042be:	f1b8 0f00 	cmp.w	r8, #0
 80042c2:	d10a      	bne.n	80042da <_dtoa_r+0x38a>
 80042c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042c8:	4632      	mov	r2, r6
 80042ca:	463b      	mov	r3, r7
 80042cc:	f7fc fabe 	bl	800084c <__aeabi_ddiv>
 80042d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042d4:	e02b      	b.n	800432e <_dtoa_r+0x3de>
 80042d6:	2502      	movs	r5, #2
 80042d8:	e7ef      	b.n	80042ba <_dtoa_r+0x36a>
 80042da:	f018 0f01 	tst.w	r8, #1
 80042de:	d008      	beq.n	80042f2 <_dtoa_r+0x3a2>
 80042e0:	4630      	mov	r0, r6
 80042e2:	4639      	mov	r1, r7
 80042e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80042e8:	f7fc f986 	bl	80005f8 <__aeabi_dmul>
 80042ec:	3501      	adds	r5, #1
 80042ee:	4606      	mov	r6, r0
 80042f0:	460f      	mov	r7, r1
 80042f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80042f6:	f109 0908 	add.w	r9, r9, #8
 80042fa:	e7e0      	b.n	80042be <_dtoa_r+0x36e>
 80042fc:	f000 809f 	beq.w	800443e <_dtoa_r+0x4ee>
 8004300:	f1cb 0600 	rsb	r6, fp, #0
 8004304:	4ba1      	ldr	r3, [pc, #644]	; (800458c <_dtoa_r+0x63c>)
 8004306:	4fa2      	ldr	r7, [pc, #648]	; (8004590 <_dtoa_r+0x640>)
 8004308:	f006 020f 	and.w	r2, r6, #15
 800430c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	ec51 0b18 	vmov	r0, r1, d8
 8004318:	f7fc f96e 	bl	80005f8 <__aeabi_dmul>
 800431c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004320:	1136      	asrs	r6, r6, #4
 8004322:	2300      	movs	r3, #0
 8004324:	2502      	movs	r5, #2
 8004326:	2e00      	cmp	r6, #0
 8004328:	d17e      	bne.n	8004428 <_dtoa_r+0x4d8>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1d0      	bne.n	80042d0 <_dtoa_r+0x380>
 800432e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004330:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 8084 	beq.w	8004442 <_dtoa_r+0x4f2>
 800433a:	4b96      	ldr	r3, [pc, #600]	; (8004594 <_dtoa_r+0x644>)
 800433c:	2200      	movs	r2, #0
 800433e:	4640      	mov	r0, r8
 8004340:	4649      	mov	r1, r9
 8004342:	f7fc fbcb 	bl	8000adc <__aeabi_dcmplt>
 8004346:	2800      	cmp	r0, #0
 8004348:	d07b      	beq.n	8004442 <_dtoa_r+0x4f2>
 800434a:	9b04      	ldr	r3, [sp, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d078      	beq.n	8004442 <_dtoa_r+0x4f2>
 8004350:	9b01      	ldr	r3, [sp, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	dd39      	ble.n	80043ca <_dtoa_r+0x47a>
 8004356:	4b90      	ldr	r3, [pc, #576]	; (8004598 <_dtoa_r+0x648>)
 8004358:	2200      	movs	r2, #0
 800435a:	4640      	mov	r0, r8
 800435c:	4649      	mov	r1, r9
 800435e:	f7fc f94b 	bl	80005f8 <__aeabi_dmul>
 8004362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004366:	9e01      	ldr	r6, [sp, #4]
 8004368:	f10b 37ff 	add.w	r7, fp, #4294967295
 800436c:	3501      	adds	r5, #1
 800436e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004372:	4628      	mov	r0, r5
 8004374:	f7fc f8d6 	bl	8000524 <__aeabi_i2d>
 8004378:	4642      	mov	r2, r8
 800437a:	464b      	mov	r3, r9
 800437c:	f7fc f93c 	bl	80005f8 <__aeabi_dmul>
 8004380:	4b86      	ldr	r3, [pc, #536]	; (800459c <_dtoa_r+0x64c>)
 8004382:	2200      	movs	r2, #0
 8004384:	f7fb ff82 	bl	800028c <__adddf3>
 8004388:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800438c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004390:	9303      	str	r3, [sp, #12]
 8004392:	2e00      	cmp	r6, #0
 8004394:	d158      	bne.n	8004448 <_dtoa_r+0x4f8>
 8004396:	4b82      	ldr	r3, [pc, #520]	; (80045a0 <_dtoa_r+0x650>)
 8004398:	2200      	movs	r2, #0
 800439a:	4640      	mov	r0, r8
 800439c:	4649      	mov	r1, r9
 800439e:	f7fb ff73 	bl	8000288 <__aeabi_dsub>
 80043a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043a6:	4680      	mov	r8, r0
 80043a8:	4689      	mov	r9, r1
 80043aa:	f7fc fbb5 	bl	8000b18 <__aeabi_dcmpgt>
 80043ae:	2800      	cmp	r0, #0
 80043b0:	f040 8296 	bne.w	80048e0 <_dtoa_r+0x990>
 80043b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80043b8:	4640      	mov	r0, r8
 80043ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043be:	4649      	mov	r1, r9
 80043c0:	f7fc fb8c 	bl	8000adc <__aeabi_dcmplt>
 80043c4:	2800      	cmp	r0, #0
 80043c6:	f040 8289 	bne.w	80048dc <_dtoa_r+0x98c>
 80043ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80043ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f2c0 814e 	blt.w	8004672 <_dtoa_r+0x722>
 80043d6:	f1bb 0f0e 	cmp.w	fp, #14
 80043da:	f300 814a 	bgt.w	8004672 <_dtoa_r+0x722>
 80043de:	4b6b      	ldr	r3, [pc, #428]	; (800458c <_dtoa_r+0x63c>)
 80043e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80043e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80043e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f280 80dc 	bge.w	80045a8 <_dtoa_r+0x658>
 80043f0:	9b04      	ldr	r3, [sp, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f300 80d8 	bgt.w	80045a8 <_dtoa_r+0x658>
 80043f8:	f040 826f 	bne.w	80048da <_dtoa_r+0x98a>
 80043fc:	4b68      	ldr	r3, [pc, #416]	; (80045a0 <_dtoa_r+0x650>)
 80043fe:	2200      	movs	r2, #0
 8004400:	4640      	mov	r0, r8
 8004402:	4649      	mov	r1, r9
 8004404:	f7fc f8f8 	bl	80005f8 <__aeabi_dmul>
 8004408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800440c:	f7fc fb7a 	bl	8000b04 <__aeabi_dcmpge>
 8004410:	9e04      	ldr	r6, [sp, #16]
 8004412:	4637      	mov	r7, r6
 8004414:	2800      	cmp	r0, #0
 8004416:	f040 8245 	bne.w	80048a4 <_dtoa_r+0x954>
 800441a:	9d00      	ldr	r5, [sp, #0]
 800441c:	2331      	movs	r3, #49	; 0x31
 800441e:	f805 3b01 	strb.w	r3, [r5], #1
 8004422:	f10b 0b01 	add.w	fp, fp, #1
 8004426:	e241      	b.n	80048ac <_dtoa_r+0x95c>
 8004428:	07f2      	lsls	r2, r6, #31
 800442a:	d505      	bpl.n	8004438 <_dtoa_r+0x4e8>
 800442c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004430:	f7fc f8e2 	bl	80005f8 <__aeabi_dmul>
 8004434:	3501      	adds	r5, #1
 8004436:	2301      	movs	r3, #1
 8004438:	1076      	asrs	r6, r6, #1
 800443a:	3708      	adds	r7, #8
 800443c:	e773      	b.n	8004326 <_dtoa_r+0x3d6>
 800443e:	2502      	movs	r5, #2
 8004440:	e775      	b.n	800432e <_dtoa_r+0x3de>
 8004442:	9e04      	ldr	r6, [sp, #16]
 8004444:	465f      	mov	r7, fp
 8004446:	e792      	b.n	800436e <_dtoa_r+0x41e>
 8004448:	9900      	ldr	r1, [sp, #0]
 800444a:	4b50      	ldr	r3, [pc, #320]	; (800458c <_dtoa_r+0x63c>)
 800444c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004450:	4431      	add	r1, r6
 8004452:	9102      	str	r1, [sp, #8]
 8004454:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004456:	eeb0 9a47 	vmov.f32	s18, s14
 800445a:	eef0 9a67 	vmov.f32	s19, s15
 800445e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004462:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004466:	2900      	cmp	r1, #0
 8004468:	d044      	beq.n	80044f4 <_dtoa_r+0x5a4>
 800446a:	494e      	ldr	r1, [pc, #312]	; (80045a4 <_dtoa_r+0x654>)
 800446c:	2000      	movs	r0, #0
 800446e:	f7fc f9ed 	bl	800084c <__aeabi_ddiv>
 8004472:	ec53 2b19 	vmov	r2, r3, d9
 8004476:	f7fb ff07 	bl	8000288 <__aeabi_dsub>
 800447a:	9d00      	ldr	r5, [sp, #0]
 800447c:	ec41 0b19 	vmov	d9, r0, r1
 8004480:	4649      	mov	r1, r9
 8004482:	4640      	mov	r0, r8
 8004484:	f7fc fb68 	bl	8000b58 <__aeabi_d2iz>
 8004488:	4606      	mov	r6, r0
 800448a:	f7fc f84b 	bl	8000524 <__aeabi_i2d>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4640      	mov	r0, r8
 8004494:	4649      	mov	r1, r9
 8004496:	f7fb fef7 	bl	8000288 <__aeabi_dsub>
 800449a:	3630      	adds	r6, #48	; 0x30
 800449c:	f805 6b01 	strb.w	r6, [r5], #1
 80044a0:	ec53 2b19 	vmov	r2, r3, d9
 80044a4:	4680      	mov	r8, r0
 80044a6:	4689      	mov	r9, r1
 80044a8:	f7fc fb18 	bl	8000adc <__aeabi_dcmplt>
 80044ac:	2800      	cmp	r0, #0
 80044ae:	d164      	bne.n	800457a <_dtoa_r+0x62a>
 80044b0:	4642      	mov	r2, r8
 80044b2:	464b      	mov	r3, r9
 80044b4:	4937      	ldr	r1, [pc, #220]	; (8004594 <_dtoa_r+0x644>)
 80044b6:	2000      	movs	r0, #0
 80044b8:	f7fb fee6 	bl	8000288 <__aeabi_dsub>
 80044bc:	ec53 2b19 	vmov	r2, r3, d9
 80044c0:	f7fc fb0c 	bl	8000adc <__aeabi_dcmplt>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	f040 80b6 	bne.w	8004636 <_dtoa_r+0x6e6>
 80044ca:	9b02      	ldr	r3, [sp, #8]
 80044cc:	429d      	cmp	r5, r3
 80044ce:	f43f af7c 	beq.w	80043ca <_dtoa_r+0x47a>
 80044d2:	4b31      	ldr	r3, [pc, #196]	; (8004598 <_dtoa_r+0x648>)
 80044d4:	ec51 0b19 	vmov	r0, r1, d9
 80044d8:	2200      	movs	r2, #0
 80044da:	f7fc f88d 	bl	80005f8 <__aeabi_dmul>
 80044de:	4b2e      	ldr	r3, [pc, #184]	; (8004598 <_dtoa_r+0x648>)
 80044e0:	ec41 0b19 	vmov	d9, r0, r1
 80044e4:	2200      	movs	r2, #0
 80044e6:	4640      	mov	r0, r8
 80044e8:	4649      	mov	r1, r9
 80044ea:	f7fc f885 	bl	80005f8 <__aeabi_dmul>
 80044ee:	4680      	mov	r8, r0
 80044f0:	4689      	mov	r9, r1
 80044f2:	e7c5      	b.n	8004480 <_dtoa_r+0x530>
 80044f4:	ec51 0b17 	vmov	r0, r1, d7
 80044f8:	f7fc f87e 	bl	80005f8 <__aeabi_dmul>
 80044fc:	9b02      	ldr	r3, [sp, #8]
 80044fe:	9d00      	ldr	r5, [sp, #0]
 8004500:	930f      	str	r3, [sp, #60]	; 0x3c
 8004502:	ec41 0b19 	vmov	d9, r0, r1
 8004506:	4649      	mov	r1, r9
 8004508:	4640      	mov	r0, r8
 800450a:	f7fc fb25 	bl	8000b58 <__aeabi_d2iz>
 800450e:	4606      	mov	r6, r0
 8004510:	f7fc f808 	bl	8000524 <__aeabi_i2d>
 8004514:	3630      	adds	r6, #48	; 0x30
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	4640      	mov	r0, r8
 800451c:	4649      	mov	r1, r9
 800451e:	f7fb feb3 	bl	8000288 <__aeabi_dsub>
 8004522:	f805 6b01 	strb.w	r6, [r5], #1
 8004526:	9b02      	ldr	r3, [sp, #8]
 8004528:	429d      	cmp	r5, r3
 800452a:	4680      	mov	r8, r0
 800452c:	4689      	mov	r9, r1
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	d124      	bne.n	800457e <_dtoa_r+0x62e>
 8004534:	4b1b      	ldr	r3, [pc, #108]	; (80045a4 <_dtoa_r+0x654>)
 8004536:	ec51 0b19 	vmov	r0, r1, d9
 800453a:	f7fb fea7 	bl	800028c <__adddf3>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4640      	mov	r0, r8
 8004544:	4649      	mov	r1, r9
 8004546:	f7fc fae7 	bl	8000b18 <__aeabi_dcmpgt>
 800454a:	2800      	cmp	r0, #0
 800454c:	d173      	bne.n	8004636 <_dtoa_r+0x6e6>
 800454e:	ec53 2b19 	vmov	r2, r3, d9
 8004552:	4914      	ldr	r1, [pc, #80]	; (80045a4 <_dtoa_r+0x654>)
 8004554:	2000      	movs	r0, #0
 8004556:	f7fb fe97 	bl	8000288 <__aeabi_dsub>
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	4640      	mov	r0, r8
 8004560:	4649      	mov	r1, r9
 8004562:	f7fc fabb 	bl	8000adc <__aeabi_dcmplt>
 8004566:	2800      	cmp	r0, #0
 8004568:	f43f af2f 	beq.w	80043ca <_dtoa_r+0x47a>
 800456c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800456e:	1e6b      	subs	r3, r5, #1
 8004570:	930f      	str	r3, [sp, #60]	; 0x3c
 8004572:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004576:	2b30      	cmp	r3, #48	; 0x30
 8004578:	d0f8      	beq.n	800456c <_dtoa_r+0x61c>
 800457a:	46bb      	mov	fp, r7
 800457c:	e04a      	b.n	8004614 <_dtoa_r+0x6c4>
 800457e:	4b06      	ldr	r3, [pc, #24]	; (8004598 <_dtoa_r+0x648>)
 8004580:	f7fc f83a 	bl	80005f8 <__aeabi_dmul>
 8004584:	4680      	mov	r8, r0
 8004586:	4689      	mov	r9, r1
 8004588:	e7bd      	b.n	8004506 <_dtoa_r+0x5b6>
 800458a:	bf00      	nop
 800458c:	08006530 	.word	0x08006530
 8004590:	08006508 	.word	0x08006508
 8004594:	3ff00000 	.word	0x3ff00000
 8004598:	40240000 	.word	0x40240000
 800459c:	401c0000 	.word	0x401c0000
 80045a0:	40140000 	.word	0x40140000
 80045a4:	3fe00000 	.word	0x3fe00000
 80045a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80045ac:	9d00      	ldr	r5, [sp, #0]
 80045ae:	4642      	mov	r2, r8
 80045b0:	464b      	mov	r3, r9
 80045b2:	4630      	mov	r0, r6
 80045b4:	4639      	mov	r1, r7
 80045b6:	f7fc f949 	bl	800084c <__aeabi_ddiv>
 80045ba:	f7fc facd 	bl	8000b58 <__aeabi_d2iz>
 80045be:	9001      	str	r0, [sp, #4]
 80045c0:	f7fb ffb0 	bl	8000524 <__aeabi_i2d>
 80045c4:	4642      	mov	r2, r8
 80045c6:	464b      	mov	r3, r9
 80045c8:	f7fc f816 	bl	80005f8 <__aeabi_dmul>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4630      	mov	r0, r6
 80045d2:	4639      	mov	r1, r7
 80045d4:	f7fb fe58 	bl	8000288 <__aeabi_dsub>
 80045d8:	9e01      	ldr	r6, [sp, #4]
 80045da:	9f04      	ldr	r7, [sp, #16]
 80045dc:	3630      	adds	r6, #48	; 0x30
 80045de:	f805 6b01 	strb.w	r6, [r5], #1
 80045e2:	9e00      	ldr	r6, [sp, #0]
 80045e4:	1bae      	subs	r6, r5, r6
 80045e6:	42b7      	cmp	r7, r6
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	d134      	bne.n	8004658 <_dtoa_r+0x708>
 80045ee:	f7fb fe4d 	bl	800028c <__adddf3>
 80045f2:	4642      	mov	r2, r8
 80045f4:	464b      	mov	r3, r9
 80045f6:	4606      	mov	r6, r0
 80045f8:	460f      	mov	r7, r1
 80045fa:	f7fc fa8d 	bl	8000b18 <__aeabi_dcmpgt>
 80045fe:	b9c8      	cbnz	r0, 8004634 <_dtoa_r+0x6e4>
 8004600:	4642      	mov	r2, r8
 8004602:	464b      	mov	r3, r9
 8004604:	4630      	mov	r0, r6
 8004606:	4639      	mov	r1, r7
 8004608:	f7fc fa5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800460c:	b110      	cbz	r0, 8004614 <_dtoa_r+0x6c4>
 800460e:	9b01      	ldr	r3, [sp, #4]
 8004610:	07db      	lsls	r3, r3, #31
 8004612:	d40f      	bmi.n	8004634 <_dtoa_r+0x6e4>
 8004614:	4651      	mov	r1, sl
 8004616:	4620      	mov	r0, r4
 8004618:	f000 fbcc 	bl	8004db4 <_Bfree>
 800461c:	2300      	movs	r3, #0
 800461e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004620:	702b      	strb	r3, [r5, #0]
 8004622:	f10b 0301 	add.w	r3, fp, #1
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800462a:	2b00      	cmp	r3, #0
 800462c:	f43f ace2 	beq.w	8003ff4 <_dtoa_r+0xa4>
 8004630:	601d      	str	r5, [r3, #0]
 8004632:	e4df      	b.n	8003ff4 <_dtoa_r+0xa4>
 8004634:	465f      	mov	r7, fp
 8004636:	462b      	mov	r3, r5
 8004638:	461d      	mov	r5, r3
 800463a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800463e:	2a39      	cmp	r2, #57	; 0x39
 8004640:	d106      	bne.n	8004650 <_dtoa_r+0x700>
 8004642:	9a00      	ldr	r2, [sp, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d1f7      	bne.n	8004638 <_dtoa_r+0x6e8>
 8004648:	9900      	ldr	r1, [sp, #0]
 800464a:	2230      	movs	r2, #48	; 0x30
 800464c:	3701      	adds	r7, #1
 800464e:	700a      	strb	r2, [r1, #0]
 8004650:	781a      	ldrb	r2, [r3, #0]
 8004652:	3201      	adds	r2, #1
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	e790      	b.n	800457a <_dtoa_r+0x62a>
 8004658:	4ba3      	ldr	r3, [pc, #652]	; (80048e8 <_dtoa_r+0x998>)
 800465a:	2200      	movs	r2, #0
 800465c:	f7fb ffcc 	bl	80005f8 <__aeabi_dmul>
 8004660:	2200      	movs	r2, #0
 8004662:	2300      	movs	r3, #0
 8004664:	4606      	mov	r6, r0
 8004666:	460f      	mov	r7, r1
 8004668:	f7fc fa2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800466c:	2800      	cmp	r0, #0
 800466e:	d09e      	beq.n	80045ae <_dtoa_r+0x65e>
 8004670:	e7d0      	b.n	8004614 <_dtoa_r+0x6c4>
 8004672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004674:	2a00      	cmp	r2, #0
 8004676:	f000 80ca 	beq.w	800480e <_dtoa_r+0x8be>
 800467a:	9a07      	ldr	r2, [sp, #28]
 800467c:	2a01      	cmp	r2, #1
 800467e:	f300 80ad 	bgt.w	80047dc <_dtoa_r+0x88c>
 8004682:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004684:	2a00      	cmp	r2, #0
 8004686:	f000 80a5 	beq.w	80047d4 <_dtoa_r+0x884>
 800468a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800468e:	9e08      	ldr	r6, [sp, #32]
 8004690:	9d05      	ldr	r5, [sp, #20]
 8004692:	9a05      	ldr	r2, [sp, #20]
 8004694:	441a      	add	r2, r3
 8004696:	9205      	str	r2, [sp, #20]
 8004698:	9a06      	ldr	r2, [sp, #24]
 800469a:	2101      	movs	r1, #1
 800469c:	441a      	add	r2, r3
 800469e:	4620      	mov	r0, r4
 80046a0:	9206      	str	r2, [sp, #24]
 80046a2:	f000 fc3d 	bl	8004f20 <__i2b>
 80046a6:	4607      	mov	r7, r0
 80046a8:	b165      	cbz	r5, 80046c4 <_dtoa_r+0x774>
 80046aa:	9b06      	ldr	r3, [sp, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	dd09      	ble.n	80046c4 <_dtoa_r+0x774>
 80046b0:	42ab      	cmp	r3, r5
 80046b2:	9a05      	ldr	r2, [sp, #20]
 80046b4:	bfa8      	it	ge
 80046b6:	462b      	movge	r3, r5
 80046b8:	1ad2      	subs	r2, r2, r3
 80046ba:	9205      	str	r2, [sp, #20]
 80046bc:	9a06      	ldr	r2, [sp, #24]
 80046be:	1aed      	subs	r5, r5, r3
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	9306      	str	r3, [sp, #24]
 80046c4:	9b08      	ldr	r3, [sp, #32]
 80046c6:	b1f3      	cbz	r3, 8004706 <_dtoa_r+0x7b6>
 80046c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 80a3 	beq.w	8004816 <_dtoa_r+0x8c6>
 80046d0:	2e00      	cmp	r6, #0
 80046d2:	dd10      	ble.n	80046f6 <_dtoa_r+0x7a6>
 80046d4:	4639      	mov	r1, r7
 80046d6:	4632      	mov	r2, r6
 80046d8:	4620      	mov	r0, r4
 80046da:	f000 fce1 	bl	80050a0 <__pow5mult>
 80046de:	4652      	mov	r2, sl
 80046e0:	4601      	mov	r1, r0
 80046e2:	4607      	mov	r7, r0
 80046e4:	4620      	mov	r0, r4
 80046e6:	f000 fc31 	bl	8004f4c <__multiply>
 80046ea:	4651      	mov	r1, sl
 80046ec:	4680      	mov	r8, r0
 80046ee:	4620      	mov	r0, r4
 80046f0:	f000 fb60 	bl	8004db4 <_Bfree>
 80046f4:	46c2      	mov	sl, r8
 80046f6:	9b08      	ldr	r3, [sp, #32]
 80046f8:	1b9a      	subs	r2, r3, r6
 80046fa:	d004      	beq.n	8004706 <_dtoa_r+0x7b6>
 80046fc:	4651      	mov	r1, sl
 80046fe:	4620      	mov	r0, r4
 8004700:	f000 fcce 	bl	80050a0 <__pow5mult>
 8004704:	4682      	mov	sl, r0
 8004706:	2101      	movs	r1, #1
 8004708:	4620      	mov	r0, r4
 800470a:	f000 fc09 	bl	8004f20 <__i2b>
 800470e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004710:	2b00      	cmp	r3, #0
 8004712:	4606      	mov	r6, r0
 8004714:	f340 8081 	ble.w	800481a <_dtoa_r+0x8ca>
 8004718:	461a      	mov	r2, r3
 800471a:	4601      	mov	r1, r0
 800471c:	4620      	mov	r0, r4
 800471e:	f000 fcbf 	bl	80050a0 <__pow5mult>
 8004722:	9b07      	ldr	r3, [sp, #28]
 8004724:	2b01      	cmp	r3, #1
 8004726:	4606      	mov	r6, r0
 8004728:	dd7a      	ble.n	8004820 <_dtoa_r+0x8d0>
 800472a:	f04f 0800 	mov.w	r8, #0
 800472e:	6933      	ldr	r3, [r6, #16]
 8004730:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004734:	6918      	ldr	r0, [r3, #16]
 8004736:	f000 fba5 	bl	8004e84 <__hi0bits>
 800473a:	f1c0 0020 	rsb	r0, r0, #32
 800473e:	9b06      	ldr	r3, [sp, #24]
 8004740:	4418      	add	r0, r3
 8004742:	f010 001f 	ands.w	r0, r0, #31
 8004746:	f000 8094 	beq.w	8004872 <_dtoa_r+0x922>
 800474a:	f1c0 0320 	rsb	r3, r0, #32
 800474e:	2b04      	cmp	r3, #4
 8004750:	f340 8085 	ble.w	800485e <_dtoa_r+0x90e>
 8004754:	9b05      	ldr	r3, [sp, #20]
 8004756:	f1c0 001c 	rsb	r0, r0, #28
 800475a:	4403      	add	r3, r0
 800475c:	9305      	str	r3, [sp, #20]
 800475e:	9b06      	ldr	r3, [sp, #24]
 8004760:	4403      	add	r3, r0
 8004762:	4405      	add	r5, r0
 8004764:	9306      	str	r3, [sp, #24]
 8004766:	9b05      	ldr	r3, [sp, #20]
 8004768:	2b00      	cmp	r3, #0
 800476a:	dd05      	ble.n	8004778 <_dtoa_r+0x828>
 800476c:	4651      	mov	r1, sl
 800476e:	461a      	mov	r2, r3
 8004770:	4620      	mov	r0, r4
 8004772:	f000 fcef 	bl	8005154 <__lshift>
 8004776:	4682      	mov	sl, r0
 8004778:	9b06      	ldr	r3, [sp, #24]
 800477a:	2b00      	cmp	r3, #0
 800477c:	dd05      	ble.n	800478a <_dtoa_r+0x83a>
 800477e:	4631      	mov	r1, r6
 8004780:	461a      	mov	r2, r3
 8004782:	4620      	mov	r0, r4
 8004784:	f000 fce6 	bl	8005154 <__lshift>
 8004788:	4606      	mov	r6, r0
 800478a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800478c:	2b00      	cmp	r3, #0
 800478e:	d072      	beq.n	8004876 <_dtoa_r+0x926>
 8004790:	4631      	mov	r1, r6
 8004792:	4650      	mov	r0, sl
 8004794:	f000 fd4a 	bl	800522c <__mcmp>
 8004798:	2800      	cmp	r0, #0
 800479a:	da6c      	bge.n	8004876 <_dtoa_r+0x926>
 800479c:	2300      	movs	r3, #0
 800479e:	4651      	mov	r1, sl
 80047a0:	220a      	movs	r2, #10
 80047a2:	4620      	mov	r0, r4
 80047a4:	f000 fb28 	bl	8004df8 <__multadd>
 80047a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80047ae:	4682      	mov	sl, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 81b0 	beq.w	8004b16 <_dtoa_r+0xbc6>
 80047b6:	2300      	movs	r3, #0
 80047b8:	4639      	mov	r1, r7
 80047ba:	220a      	movs	r2, #10
 80047bc:	4620      	mov	r0, r4
 80047be:	f000 fb1b 	bl	8004df8 <__multadd>
 80047c2:	9b01      	ldr	r3, [sp, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	4607      	mov	r7, r0
 80047c8:	f300 8096 	bgt.w	80048f8 <_dtoa_r+0x9a8>
 80047cc:	9b07      	ldr	r3, [sp, #28]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	dc59      	bgt.n	8004886 <_dtoa_r+0x936>
 80047d2:	e091      	b.n	80048f8 <_dtoa_r+0x9a8>
 80047d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80047d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80047da:	e758      	b.n	800468e <_dtoa_r+0x73e>
 80047dc:	9b04      	ldr	r3, [sp, #16]
 80047de:	1e5e      	subs	r6, r3, #1
 80047e0:	9b08      	ldr	r3, [sp, #32]
 80047e2:	42b3      	cmp	r3, r6
 80047e4:	bfbf      	itttt	lt
 80047e6:	9b08      	ldrlt	r3, [sp, #32]
 80047e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80047ea:	9608      	strlt	r6, [sp, #32]
 80047ec:	1af3      	sublt	r3, r6, r3
 80047ee:	bfb4      	ite	lt
 80047f0:	18d2      	addlt	r2, r2, r3
 80047f2:	1b9e      	subge	r6, r3, r6
 80047f4:	9b04      	ldr	r3, [sp, #16]
 80047f6:	bfbc      	itt	lt
 80047f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80047fa:	2600      	movlt	r6, #0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	bfb7      	itett	lt
 8004800:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8004804:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004808:	1a9d      	sublt	r5, r3, r2
 800480a:	2300      	movlt	r3, #0
 800480c:	e741      	b.n	8004692 <_dtoa_r+0x742>
 800480e:	9e08      	ldr	r6, [sp, #32]
 8004810:	9d05      	ldr	r5, [sp, #20]
 8004812:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004814:	e748      	b.n	80046a8 <_dtoa_r+0x758>
 8004816:	9a08      	ldr	r2, [sp, #32]
 8004818:	e770      	b.n	80046fc <_dtoa_r+0x7ac>
 800481a:	9b07      	ldr	r3, [sp, #28]
 800481c:	2b01      	cmp	r3, #1
 800481e:	dc19      	bgt.n	8004854 <_dtoa_r+0x904>
 8004820:	9b02      	ldr	r3, [sp, #8]
 8004822:	b9bb      	cbnz	r3, 8004854 <_dtoa_r+0x904>
 8004824:	9b03      	ldr	r3, [sp, #12]
 8004826:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800482a:	b99b      	cbnz	r3, 8004854 <_dtoa_r+0x904>
 800482c:	9b03      	ldr	r3, [sp, #12]
 800482e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004832:	0d1b      	lsrs	r3, r3, #20
 8004834:	051b      	lsls	r3, r3, #20
 8004836:	b183      	cbz	r3, 800485a <_dtoa_r+0x90a>
 8004838:	9b05      	ldr	r3, [sp, #20]
 800483a:	3301      	adds	r3, #1
 800483c:	9305      	str	r3, [sp, #20]
 800483e:	9b06      	ldr	r3, [sp, #24]
 8004840:	3301      	adds	r3, #1
 8004842:	9306      	str	r3, [sp, #24]
 8004844:	f04f 0801 	mov.w	r8, #1
 8004848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800484a:	2b00      	cmp	r3, #0
 800484c:	f47f af6f 	bne.w	800472e <_dtoa_r+0x7de>
 8004850:	2001      	movs	r0, #1
 8004852:	e774      	b.n	800473e <_dtoa_r+0x7ee>
 8004854:	f04f 0800 	mov.w	r8, #0
 8004858:	e7f6      	b.n	8004848 <_dtoa_r+0x8f8>
 800485a:	4698      	mov	r8, r3
 800485c:	e7f4      	b.n	8004848 <_dtoa_r+0x8f8>
 800485e:	d082      	beq.n	8004766 <_dtoa_r+0x816>
 8004860:	9a05      	ldr	r2, [sp, #20]
 8004862:	331c      	adds	r3, #28
 8004864:	441a      	add	r2, r3
 8004866:	9205      	str	r2, [sp, #20]
 8004868:	9a06      	ldr	r2, [sp, #24]
 800486a:	441a      	add	r2, r3
 800486c:	441d      	add	r5, r3
 800486e:	9206      	str	r2, [sp, #24]
 8004870:	e779      	b.n	8004766 <_dtoa_r+0x816>
 8004872:	4603      	mov	r3, r0
 8004874:	e7f4      	b.n	8004860 <_dtoa_r+0x910>
 8004876:	9b04      	ldr	r3, [sp, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	dc37      	bgt.n	80048ec <_dtoa_r+0x99c>
 800487c:	9b07      	ldr	r3, [sp, #28]
 800487e:	2b02      	cmp	r3, #2
 8004880:	dd34      	ble.n	80048ec <_dtoa_r+0x99c>
 8004882:	9b04      	ldr	r3, [sp, #16]
 8004884:	9301      	str	r3, [sp, #4]
 8004886:	9b01      	ldr	r3, [sp, #4]
 8004888:	b963      	cbnz	r3, 80048a4 <_dtoa_r+0x954>
 800488a:	4631      	mov	r1, r6
 800488c:	2205      	movs	r2, #5
 800488e:	4620      	mov	r0, r4
 8004890:	f000 fab2 	bl	8004df8 <__multadd>
 8004894:	4601      	mov	r1, r0
 8004896:	4606      	mov	r6, r0
 8004898:	4650      	mov	r0, sl
 800489a:	f000 fcc7 	bl	800522c <__mcmp>
 800489e:	2800      	cmp	r0, #0
 80048a0:	f73f adbb 	bgt.w	800441a <_dtoa_r+0x4ca>
 80048a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048a6:	9d00      	ldr	r5, [sp, #0]
 80048a8:	ea6f 0b03 	mvn.w	fp, r3
 80048ac:	f04f 0800 	mov.w	r8, #0
 80048b0:	4631      	mov	r1, r6
 80048b2:	4620      	mov	r0, r4
 80048b4:	f000 fa7e 	bl	8004db4 <_Bfree>
 80048b8:	2f00      	cmp	r7, #0
 80048ba:	f43f aeab 	beq.w	8004614 <_dtoa_r+0x6c4>
 80048be:	f1b8 0f00 	cmp.w	r8, #0
 80048c2:	d005      	beq.n	80048d0 <_dtoa_r+0x980>
 80048c4:	45b8      	cmp	r8, r7
 80048c6:	d003      	beq.n	80048d0 <_dtoa_r+0x980>
 80048c8:	4641      	mov	r1, r8
 80048ca:	4620      	mov	r0, r4
 80048cc:	f000 fa72 	bl	8004db4 <_Bfree>
 80048d0:	4639      	mov	r1, r7
 80048d2:	4620      	mov	r0, r4
 80048d4:	f000 fa6e 	bl	8004db4 <_Bfree>
 80048d8:	e69c      	b.n	8004614 <_dtoa_r+0x6c4>
 80048da:	2600      	movs	r6, #0
 80048dc:	4637      	mov	r7, r6
 80048de:	e7e1      	b.n	80048a4 <_dtoa_r+0x954>
 80048e0:	46bb      	mov	fp, r7
 80048e2:	4637      	mov	r7, r6
 80048e4:	e599      	b.n	800441a <_dtoa_r+0x4ca>
 80048e6:	bf00      	nop
 80048e8:	40240000 	.word	0x40240000
 80048ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 80c8 	beq.w	8004a84 <_dtoa_r+0xb34>
 80048f4:	9b04      	ldr	r3, [sp, #16]
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	2d00      	cmp	r5, #0
 80048fa:	dd05      	ble.n	8004908 <_dtoa_r+0x9b8>
 80048fc:	4639      	mov	r1, r7
 80048fe:	462a      	mov	r2, r5
 8004900:	4620      	mov	r0, r4
 8004902:	f000 fc27 	bl	8005154 <__lshift>
 8004906:	4607      	mov	r7, r0
 8004908:	f1b8 0f00 	cmp.w	r8, #0
 800490c:	d05b      	beq.n	80049c6 <_dtoa_r+0xa76>
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	4620      	mov	r0, r4
 8004912:	f000 fa0f 	bl	8004d34 <_Balloc>
 8004916:	4605      	mov	r5, r0
 8004918:	b928      	cbnz	r0, 8004926 <_dtoa_r+0x9d6>
 800491a:	4b83      	ldr	r3, [pc, #524]	; (8004b28 <_dtoa_r+0xbd8>)
 800491c:	4602      	mov	r2, r0
 800491e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004922:	f7ff bb2e 	b.w	8003f82 <_dtoa_r+0x32>
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	3202      	adds	r2, #2
 800492a:	0092      	lsls	r2, r2, #2
 800492c:	f107 010c 	add.w	r1, r7, #12
 8004930:	300c      	adds	r0, #12
 8004932:	f000 ffab 	bl	800588c <memcpy>
 8004936:	2201      	movs	r2, #1
 8004938:	4629      	mov	r1, r5
 800493a:	4620      	mov	r0, r4
 800493c:	f000 fc0a 	bl	8005154 <__lshift>
 8004940:	9b00      	ldr	r3, [sp, #0]
 8004942:	3301      	adds	r3, #1
 8004944:	9304      	str	r3, [sp, #16]
 8004946:	e9dd 2300 	ldrd	r2, r3, [sp]
 800494a:	4413      	add	r3, r2
 800494c:	9308      	str	r3, [sp, #32]
 800494e:	9b02      	ldr	r3, [sp, #8]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	46b8      	mov	r8, r7
 8004956:	9306      	str	r3, [sp, #24]
 8004958:	4607      	mov	r7, r0
 800495a:	9b04      	ldr	r3, [sp, #16]
 800495c:	4631      	mov	r1, r6
 800495e:	3b01      	subs	r3, #1
 8004960:	4650      	mov	r0, sl
 8004962:	9301      	str	r3, [sp, #4]
 8004964:	f7ff fa6b 	bl	8003e3e <quorem>
 8004968:	4641      	mov	r1, r8
 800496a:	9002      	str	r0, [sp, #8]
 800496c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004970:	4650      	mov	r0, sl
 8004972:	f000 fc5b 	bl	800522c <__mcmp>
 8004976:	463a      	mov	r2, r7
 8004978:	9005      	str	r0, [sp, #20]
 800497a:	4631      	mov	r1, r6
 800497c:	4620      	mov	r0, r4
 800497e:	f000 fc71 	bl	8005264 <__mdiff>
 8004982:	68c2      	ldr	r2, [r0, #12]
 8004984:	4605      	mov	r5, r0
 8004986:	bb02      	cbnz	r2, 80049ca <_dtoa_r+0xa7a>
 8004988:	4601      	mov	r1, r0
 800498a:	4650      	mov	r0, sl
 800498c:	f000 fc4e 	bl	800522c <__mcmp>
 8004990:	4602      	mov	r2, r0
 8004992:	4629      	mov	r1, r5
 8004994:	4620      	mov	r0, r4
 8004996:	9209      	str	r2, [sp, #36]	; 0x24
 8004998:	f000 fa0c 	bl	8004db4 <_Bfree>
 800499c:	9b07      	ldr	r3, [sp, #28]
 800499e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049a0:	9d04      	ldr	r5, [sp, #16]
 80049a2:	ea43 0102 	orr.w	r1, r3, r2
 80049a6:	9b06      	ldr	r3, [sp, #24]
 80049a8:	4319      	orrs	r1, r3
 80049aa:	d110      	bne.n	80049ce <_dtoa_r+0xa7e>
 80049ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80049b0:	d029      	beq.n	8004a06 <_dtoa_r+0xab6>
 80049b2:	9b05      	ldr	r3, [sp, #20]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	dd02      	ble.n	80049be <_dtoa_r+0xa6e>
 80049b8:	9b02      	ldr	r3, [sp, #8]
 80049ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80049be:	9b01      	ldr	r3, [sp, #4]
 80049c0:	f883 9000 	strb.w	r9, [r3]
 80049c4:	e774      	b.n	80048b0 <_dtoa_r+0x960>
 80049c6:	4638      	mov	r0, r7
 80049c8:	e7ba      	b.n	8004940 <_dtoa_r+0x9f0>
 80049ca:	2201      	movs	r2, #1
 80049cc:	e7e1      	b.n	8004992 <_dtoa_r+0xa42>
 80049ce:	9b05      	ldr	r3, [sp, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	db04      	blt.n	80049de <_dtoa_r+0xa8e>
 80049d4:	9907      	ldr	r1, [sp, #28]
 80049d6:	430b      	orrs	r3, r1
 80049d8:	9906      	ldr	r1, [sp, #24]
 80049da:	430b      	orrs	r3, r1
 80049dc:	d120      	bne.n	8004a20 <_dtoa_r+0xad0>
 80049de:	2a00      	cmp	r2, #0
 80049e0:	dded      	ble.n	80049be <_dtoa_r+0xa6e>
 80049e2:	4651      	mov	r1, sl
 80049e4:	2201      	movs	r2, #1
 80049e6:	4620      	mov	r0, r4
 80049e8:	f000 fbb4 	bl	8005154 <__lshift>
 80049ec:	4631      	mov	r1, r6
 80049ee:	4682      	mov	sl, r0
 80049f0:	f000 fc1c 	bl	800522c <__mcmp>
 80049f4:	2800      	cmp	r0, #0
 80049f6:	dc03      	bgt.n	8004a00 <_dtoa_r+0xab0>
 80049f8:	d1e1      	bne.n	80049be <_dtoa_r+0xa6e>
 80049fa:	f019 0f01 	tst.w	r9, #1
 80049fe:	d0de      	beq.n	80049be <_dtoa_r+0xa6e>
 8004a00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004a04:	d1d8      	bne.n	80049b8 <_dtoa_r+0xa68>
 8004a06:	9a01      	ldr	r2, [sp, #4]
 8004a08:	2339      	movs	r3, #57	; 0x39
 8004a0a:	7013      	strb	r3, [r2, #0]
 8004a0c:	462b      	mov	r3, r5
 8004a0e:	461d      	mov	r5, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004a16:	2a39      	cmp	r2, #57	; 0x39
 8004a18:	d06c      	beq.n	8004af4 <_dtoa_r+0xba4>
 8004a1a:	3201      	adds	r2, #1
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	e747      	b.n	80048b0 <_dtoa_r+0x960>
 8004a20:	2a00      	cmp	r2, #0
 8004a22:	dd07      	ble.n	8004a34 <_dtoa_r+0xae4>
 8004a24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004a28:	d0ed      	beq.n	8004a06 <_dtoa_r+0xab6>
 8004a2a:	9a01      	ldr	r2, [sp, #4]
 8004a2c:	f109 0301 	add.w	r3, r9, #1
 8004a30:	7013      	strb	r3, [r2, #0]
 8004a32:	e73d      	b.n	80048b0 <_dtoa_r+0x960>
 8004a34:	9b04      	ldr	r3, [sp, #16]
 8004a36:	9a08      	ldr	r2, [sp, #32]
 8004a38:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d043      	beq.n	8004ac8 <_dtoa_r+0xb78>
 8004a40:	4651      	mov	r1, sl
 8004a42:	2300      	movs	r3, #0
 8004a44:	220a      	movs	r2, #10
 8004a46:	4620      	mov	r0, r4
 8004a48:	f000 f9d6 	bl	8004df8 <__multadd>
 8004a4c:	45b8      	cmp	r8, r7
 8004a4e:	4682      	mov	sl, r0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	f04f 020a 	mov.w	r2, #10
 8004a58:	4641      	mov	r1, r8
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	d107      	bne.n	8004a6e <_dtoa_r+0xb1e>
 8004a5e:	f000 f9cb 	bl	8004df8 <__multadd>
 8004a62:	4680      	mov	r8, r0
 8004a64:	4607      	mov	r7, r0
 8004a66:	9b04      	ldr	r3, [sp, #16]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	9304      	str	r3, [sp, #16]
 8004a6c:	e775      	b.n	800495a <_dtoa_r+0xa0a>
 8004a6e:	f000 f9c3 	bl	8004df8 <__multadd>
 8004a72:	4639      	mov	r1, r7
 8004a74:	4680      	mov	r8, r0
 8004a76:	2300      	movs	r3, #0
 8004a78:	220a      	movs	r2, #10
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f000 f9bc 	bl	8004df8 <__multadd>
 8004a80:	4607      	mov	r7, r0
 8004a82:	e7f0      	b.n	8004a66 <_dtoa_r+0xb16>
 8004a84:	9b04      	ldr	r3, [sp, #16]
 8004a86:	9301      	str	r3, [sp, #4]
 8004a88:	9d00      	ldr	r5, [sp, #0]
 8004a8a:	4631      	mov	r1, r6
 8004a8c:	4650      	mov	r0, sl
 8004a8e:	f7ff f9d6 	bl	8003e3e <quorem>
 8004a92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004a96:	9b00      	ldr	r3, [sp, #0]
 8004a98:	f805 9b01 	strb.w	r9, [r5], #1
 8004a9c:	1aea      	subs	r2, r5, r3
 8004a9e:	9b01      	ldr	r3, [sp, #4]
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	dd07      	ble.n	8004ab4 <_dtoa_r+0xb64>
 8004aa4:	4651      	mov	r1, sl
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	220a      	movs	r2, #10
 8004aaa:	4620      	mov	r0, r4
 8004aac:	f000 f9a4 	bl	8004df8 <__multadd>
 8004ab0:	4682      	mov	sl, r0
 8004ab2:	e7ea      	b.n	8004a8a <_dtoa_r+0xb3a>
 8004ab4:	9b01      	ldr	r3, [sp, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	bfc8      	it	gt
 8004aba:	461d      	movgt	r5, r3
 8004abc:	9b00      	ldr	r3, [sp, #0]
 8004abe:	bfd8      	it	le
 8004ac0:	2501      	movle	r5, #1
 8004ac2:	441d      	add	r5, r3
 8004ac4:	f04f 0800 	mov.w	r8, #0
 8004ac8:	4651      	mov	r1, sl
 8004aca:	2201      	movs	r2, #1
 8004acc:	4620      	mov	r0, r4
 8004ace:	f000 fb41 	bl	8005154 <__lshift>
 8004ad2:	4631      	mov	r1, r6
 8004ad4:	4682      	mov	sl, r0
 8004ad6:	f000 fba9 	bl	800522c <__mcmp>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	dc96      	bgt.n	8004a0c <_dtoa_r+0xabc>
 8004ade:	d102      	bne.n	8004ae6 <_dtoa_r+0xb96>
 8004ae0:	f019 0f01 	tst.w	r9, #1
 8004ae4:	d192      	bne.n	8004a0c <_dtoa_r+0xabc>
 8004ae6:	462b      	mov	r3, r5
 8004ae8:	461d      	mov	r5, r3
 8004aea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004aee:	2a30      	cmp	r2, #48	; 0x30
 8004af0:	d0fa      	beq.n	8004ae8 <_dtoa_r+0xb98>
 8004af2:	e6dd      	b.n	80048b0 <_dtoa_r+0x960>
 8004af4:	9a00      	ldr	r2, [sp, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d189      	bne.n	8004a0e <_dtoa_r+0xabe>
 8004afa:	f10b 0b01 	add.w	fp, fp, #1
 8004afe:	2331      	movs	r3, #49	; 0x31
 8004b00:	e796      	b.n	8004a30 <_dtoa_r+0xae0>
 8004b02:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <_dtoa_r+0xbdc>)
 8004b04:	f7ff ba99 	b.w	800403a <_dtoa_r+0xea>
 8004b08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f47f aa6d 	bne.w	8003fea <_dtoa_r+0x9a>
 8004b10:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <_dtoa_r+0xbe0>)
 8004b12:	f7ff ba92 	b.w	800403a <_dtoa_r+0xea>
 8004b16:	9b01      	ldr	r3, [sp, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	dcb5      	bgt.n	8004a88 <_dtoa_r+0xb38>
 8004b1c:	9b07      	ldr	r3, [sp, #28]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	f73f aeb1 	bgt.w	8004886 <_dtoa_r+0x936>
 8004b24:	e7b0      	b.n	8004a88 <_dtoa_r+0xb38>
 8004b26:	bf00      	nop
 8004b28:	08006497 	.word	0x08006497
 8004b2c:	080063f7 	.word	0x080063f7
 8004b30:	0800641b 	.word	0x0800641b

08004b34 <_free_r>:
 8004b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b36:	2900      	cmp	r1, #0
 8004b38:	d044      	beq.n	8004bc4 <_free_r+0x90>
 8004b3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b3e:	9001      	str	r0, [sp, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f1a1 0404 	sub.w	r4, r1, #4
 8004b46:	bfb8      	it	lt
 8004b48:	18e4      	addlt	r4, r4, r3
 8004b4a:	f000 f8e7 	bl	8004d1c <__malloc_lock>
 8004b4e:	4a1e      	ldr	r2, [pc, #120]	; (8004bc8 <_free_r+0x94>)
 8004b50:	9801      	ldr	r0, [sp, #4]
 8004b52:	6813      	ldr	r3, [r2, #0]
 8004b54:	b933      	cbnz	r3, 8004b64 <_free_r+0x30>
 8004b56:	6063      	str	r3, [r4, #4]
 8004b58:	6014      	str	r4, [r2, #0]
 8004b5a:	b003      	add	sp, #12
 8004b5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b60:	f000 b8e2 	b.w	8004d28 <__malloc_unlock>
 8004b64:	42a3      	cmp	r3, r4
 8004b66:	d908      	bls.n	8004b7a <_free_r+0x46>
 8004b68:	6825      	ldr	r5, [r4, #0]
 8004b6a:	1961      	adds	r1, r4, r5
 8004b6c:	428b      	cmp	r3, r1
 8004b6e:	bf01      	itttt	eq
 8004b70:	6819      	ldreq	r1, [r3, #0]
 8004b72:	685b      	ldreq	r3, [r3, #4]
 8004b74:	1949      	addeq	r1, r1, r5
 8004b76:	6021      	streq	r1, [r4, #0]
 8004b78:	e7ed      	b.n	8004b56 <_free_r+0x22>
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	b10b      	cbz	r3, 8004b84 <_free_r+0x50>
 8004b80:	42a3      	cmp	r3, r4
 8004b82:	d9fa      	bls.n	8004b7a <_free_r+0x46>
 8004b84:	6811      	ldr	r1, [r2, #0]
 8004b86:	1855      	adds	r5, r2, r1
 8004b88:	42a5      	cmp	r5, r4
 8004b8a:	d10b      	bne.n	8004ba4 <_free_r+0x70>
 8004b8c:	6824      	ldr	r4, [r4, #0]
 8004b8e:	4421      	add	r1, r4
 8004b90:	1854      	adds	r4, r2, r1
 8004b92:	42a3      	cmp	r3, r4
 8004b94:	6011      	str	r1, [r2, #0]
 8004b96:	d1e0      	bne.n	8004b5a <_free_r+0x26>
 8004b98:	681c      	ldr	r4, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	6053      	str	r3, [r2, #4]
 8004b9e:	440c      	add	r4, r1
 8004ba0:	6014      	str	r4, [r2, #0]
 8004ba2:	e7da      	b.n	8004b5a <_free_r+0x26>
 8004ba4:	d902      	bls.n	8004bac <_free_r+0x78>
 8004ba6:	230c      	movs	r3, #12
 8004ba8:	6003      	str	r3, [r0, #0]
 8004baa:	e7d6      	b.n	8004b5a <_free_r+0x26>
 8004bac:	6825      	ldr	r5, [r4, #0]
 8004bae:	1961      	adds	r1, r4, r5
 8004bb0:	428b      	cmp	r3, r1
 8004bb2:	bf04      	itt	eq
 8004bb4:	6819      	ldreq	r1, [r3, #0]
 8004bb6:	685b      	ldreq	r3, [r3, #4]
 8004bb8:	6063      	str	r3, [r4, #4]
 8004bba:	bf04      	itt	eq
 8004bbc:	1949      	addeq	r1, r1, r5
 8004bbe:	6021      	streq	r1, [r4, #0]
 8004bc0:	6054      	str	r4, [r2, #4]
 8004bc2:	e7ca      	b.n	8004b5a <_free_r+0x26>
 8004bc4:	b003      	add	sp, #12
 8004bc6:	bd30      	pop	{r4, r5, pc}
 8004bc8:	200005b4 	.word	0x200005b4

08004bcc <malloc>:
 8004bcc:	4b02      	ldr	r3, [pc, #8]	; (8004bd8 <malloc+0xc>)
 8004bce:	4601      	mov	r1, r0
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	f000 b823 	b.w	8004c1c <_malloc_r>
 8004bd6:	bf00      	nop
 8004bd8:	2000005c 	.word	0x2000005c

08004bdc <sbrk_aligned>:
 8004bdc:	b570      	push	{r4, r5, r6, lr}
 8004bde:	4e0e      	ldr	r6, [pc, #56]	; (8004c18 <sbrk_aligned+0x3c>)
 8004be0:	460c      	mov	r4, r1
 8004be2:	6831      	ldr	r1, [r6, #0]
 8004be4:	4605      	mov	r5, r0
 8004be6:	b911      	cbnz	r1, 8004bee <sbrk_aligned+0x12>
 8004be8:	f000 fe40 	bl	800586c <_sbrk_r>
 8004bec:	6030      	str	r0, [r6, #0]
 8004bee:	4621      	mov	r1, r4
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	f000 fe3b 	bl	800586c <_sbrk_r>
 8004bf6:	1c43      	adds	r3, r0, #1
 8004bf8:	d00a      	beq.n	8004c10 <sbrk_aligned+0x34>
 8004bfa:	1cc4      	adds	r4, r0, #3
 8004bfc:	f024 0403 	bic.w	r4, r4, #3
 8004c00:	42a0      	cmp	r0, r4
 8004c02:	d007      	beq.n	8004c14 <sbrk_aligned+0x38>
 8004c04:	1a21      	subs	r1, r4, r0
 8004c06:	4628      	mov	r0, r5
 8004c08:	f000 fe30 	bl	800586c <_sbrk_r>
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d101      	bne.n	8004c14 <sbrk_aligned+0x38>
 8004c10:	f04f 34ff 	mov.w	r4, #4294967295
 8004c14:	4620      	mov	r0, r4
 8004c16:	bd70      	pop	{r4, r5, r6, pc}
 8004c18:	200005b8 	.word	0x200005b8

08004c1c <_malloc_r>:
 8004c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c20:	1ccd      	adds	r5, r1, #3
 8004c22:	f025 0503 	bic.w	r5, r5, #3
 8004c26:	3508      	adds	r5, #8
 8004c28:	2d0c      	cmp	r5, #12
 8004c2a:	bf38      	it	cc
 8004c2c:	250c      	movcc	r5, #12
 8004c2e:	2d00      	cmp	r5, #0
 8004c30:	4607      	mov	r7, r0
 8004c32:	db01      	blt.n	8004c38 <_malloc_r+0x1c>
 8004c34:	42a9      	cmp	r1, r5
 8004c36:	d905      	bls.n	8004c44 <_malloc_r+0x28>
 8004c38:	230c      	movs	r3, #12
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	2600      	movs	r6, #0
 8004c3e:	4630      	mov	r0, r6
 8004c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d18 <_malloc_r+0xfc>
 8004c48:	f000 f868 	bl	8004d1c <__malloc_lock>
 8004c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8004c50:	461c      	mov	r4, r3
 8004c52:	bb5c      	cbnz	r4, 8004cac <_malloc_r+0x90>
 8004c54:	4629      	mov	r1, r5
 8004c56:	4638      	mov	r0, r7
 8004c58:	f7ff ffc0 	bl	8004bdc <sbrk_aligned>
 8004c5c:	1c43      	adds	r3, r0, #1
 8004c5e:	4604      	mov	r4, r0
 8004c60:	d155      	bne.n	8004d0e <_malloc_r+0xf2>
 8004c62:	f8d8 4000 	ldr.w	r4, [r8]
 8004c66:	4626      	mov	r6, r4
 8004c68:	2e00      	cmp	r6, #0
 8004c6a:	d145      	bne.n	8004cf8 <_malloc_r+0xdc>
 8004c6c:	2c00      	cmp	r4, #0
 8004c6e:	d048      	beq.n	8004d02 <_malloc_r+0xe6>
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	4631      	mov	r1, r6
 8004c74:	4638      	mov	r0, r7
 8004c76:	eb04 0903 	add.w	r9, r4, r3
 8004c7a:	f000 fdf7 	bl	800586c <_sbrk_r>
 8004c7e:	4581      	cmp	r9, r0
 8004c80:	d13f      	bne.n	8004d02 <_malloc_r+0xe6>
 8004c82:	6821      	ldr	r1, [r4, #0]
 8004c84:	1a6d      	subs	r5, r5, r1
 8004c86:	4629      	mov	r1, r5
 8004c88:	4638      	mov	r0, r7
 8004c8a:	f7ff ffa7 	bl	8004bdc <sbrk_aligned>
 8004c8e:	3001      	adds	r0, #1
 8004c90:	d037      	beq.n	8004d02 <_malloc_r+0xe6>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	442b      	add	r3, r5
 8004c96:	6023      	str	r3, [r4, #0]
 8004c98:	f8d8 3000 	ldr.w	r3, [r8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d038      	beq.n	8004d12 <_malloc_r+0xf6>
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	42a2      	cmp	r2, r4
 8004ca4:	d12b      	bne.n	8004cfe <_malloc_r+0xe2>
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	605a      	str	r2, [r3, #4]
 8004caa:	e00f      	b.n	8004ccc <_malloc_r+0xb0>
 8004cac:	6822      	ldr	r2, [r4, #0]
 8004cae:	1b52      	subs	r2, r2, r5
 8004cb0:	d41f      	bmi.n	8004cf2 <_malloc_r+0xd6>
 8004cb2:	2a0b      	cmp	r2, #11
 8004cb4:	d917      	bls.n	8004ce6 <_malloc_r+0xca>
 8004cb6:	1961      	adds	r1, r4, r5
 8004cb8:	42a3      	cmp	r3, r4
 8004cba:	6025      	str	r5, [r4, #0]
 8004cbc:	bf18      	it	ne
 8004cbe:	6059      	strne	r1, [r3, #4]
 8004cc0:	6863      	ldr	r3, [r4, #4]
 8004cc2:	bf08      	it	eq
 8004cc4:	f8c8 1000 	streq.w	r1, [r8]
 8004cc8:	5162      	str	r2, [r4, r5]
 8004cca:	604b      	str	r3, [r1, #4]
 8004ccc:	4638      	mov	r0, r7
 8004cce:	f104 060b 	add.w	r6, r4, #11
 8004cd2:	f000 f829 	bl	8004d28 <__malloc_unlock>
 8004cd6:	f026 0607 	bic.w	r6, r6, #7
 8004cda:	1d23      	adds	r3, r4, #4
 8004cdc:	1af2      	subs	r2, r6, r3
 8004cde:	d0ae      	beq.n	8004c3e <_malloc_r+0x22>
 8004ce0:	1b9b      	subs	r3, r3, r6
 8004ce2:	50a3      	str	r3, [r4, r2]
 8004ce4:	e7ab      	b.n	8004c3e <_malloc_r+0x22>
 8004ce6:	42a3      	cmp	r3, r4
 8004ce8:	6862      	ldr	r2, [r4, #4]
 8004cea:	d1dd      	bne.n	8004ca8 <_malloc_r+0x8c>
 8004cec:	f8c8 2000 	str.w	r2, [r8]
 8004cf0:	e7ec      	b.n	8004ccc <_malloc_r+0xb0>
 8004cf2:	4623      	mov	r3, r4
 8004cf4:	6864      	ldr	r4, [r4, #4]
 8004cf6:	e7ac      	b.n	8004c52 <_malloc_r+0x36>
 8004cf8:	4634      	mov	r4, r6
 8004cfa:	6876      	ldr	r6, [r6, #4]
 8004cfc:	e7b4      	b.n	8004c68 <_malloc_r+0x4c>
 8004cfe:	4613      	mov	r3, r2
 8004d00:	e7cc      	b.n	8004c9c <_malloc_r+0x80>
 8004d02:	230c      	movs	r3, #12
 8004d04:	603b      	str	r3, [r7, #0]
 8004d06:	4638      	mov	r0, r7
 8004d08:	f000 f80e 	bl	8004d28 <__malloc_unlock>
 8004d0c:	e797      	b.n	8004c3e <_malloc_r+0x22>
 8004d0e:	6025      	str	r5, [r4, #0]
 8004d10:	e7dc      	b.n	8004ccc <_malloc_r+0xb0>
 8004d12:	605b      	str	r3, [r3, #4]
 8004d14:	deff      	udf	#255	; 0xff
 8004d16:	bf00      	nop
 8004d18:	200005b4 	.word	0x200005b4

08004d1c <__malloc_lock>:
 8004d1c:	4801      	ldr	r0, [pc, #4]	; (8004d24 <__malloc_lock+0x8>)
 8004d1e:	f7ff b88c 	b.w	8003e3a <__retarget_lock_acquire_recursive>
 8004d22:	bf00      	nop
 8004d24:	200005b0 	.word	0x200005b0

08004d28 <__malloc_unlock>:
 8004d28:	4801      	ldr	r0, [pc, #4]	; (8004d30 <__malloc_unlock+0x8>)
 8004d2a:	f7ff b887 	b.w	8003e3c <__retarget_lock_release_recursive>
 8004d2e:	bf00      	nop
 8004d30:	200005b0 	.word	0x200005b0

08004d34 <_Balloc>:
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	69c6      	ldr	r6, [r0, #28]
 8004d38:	4604      	mov	r4, r0
 8004d3a:	460d      	mov	r5, r1
 8004d3c:	b976      	cbnz	r6, 8004d5c <_Balloc+0x28>
 8004d3e:	2010      	movs	r0, #16
 8004d40:	f7ff ff44 	bl	8004bcc <malloc>
 8004d44:	4602      	mov	r2, r0
 8004d46:	61e0      	str	r0, [r4, #28]
 8004d48:	b920      	cbnz	r0, 8004d54 <_Balloc+0x20>
 8004d4a:	4b18      	ldr	r3, [pc, #96]	; (8004dac <_Balloc+0x78>)
 8004d4c:	4818      	ldr	r0, [pc, #96]	; (8004db0 <_Balloc+0x7c>)
 8004d4e:	216b      	movs	r1, #107	; 0x6b
 8004d50:	f000 fdaa 	bl	80058a8 <__assert_func>
 8004d54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d58:	6006      	str	r6, [r0, #0]
 8004d5a:	60c6      	str	r6, [r0, #12]
 8004d5c:	69e6      	ldr	r6, [r4, #28]
 8004d5e:	68f3      	ldr	r3, [r6, #12]
 8004d60:	b183      	cbz	r3, 8004d84 <_Balloc+0x50>
 8004d62:	69e3      	ldr	r3, [r4, #28]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004d6a:	b9b8      	cbnz	r0, 8004d9c <_Balloc+0x68>
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	fa01 f605 	lsl.w	r6, r1, r5
 8004d72:	1d72      	adds	r2, r6, #5
 8004d74:	0092      	lsls	r2, r2, #2
 8004d76:	4620      	mov	r0, r4
 8004d78:	f000 fdb4 	bl	80058e4 <_calloc_r>
 8004d7c:	b160      	cbz	r0, 8004d98 <_Balloc+0x64>
 8004d7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004d82:	e00e      	b.n	8004da2 <_Balloc+0x6e>
 8004d84:	2221      	movs	r2, #33	; 0x21
 8004d86:	2104      	movs	r1, #4
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f000 fdab 	bl	80058e4 <_calloc_r>
 8004d8e:	69e3      	ldr	r3, [r4, #28]
 8004d90:	60f0      	str	r0, [r6, #12]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e4      	bne.n	8004d62 <_Balloc+0x2e>
 8004d98:	2000      	movs	r0, #0
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
 8004d9c:	6802      	ldr	r2, [r0, #0]
 8004d9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004da2:	2300      	movs	r3, #0
 8004da4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004da8:	e7f7      	b.n	8004d9a <_Balloc+0x66>
 8004daa:	bf00      	nop
 8004dac:	08006428 	.word	0x08006428
 8004db0:	080064a8 	.word	0x080064a8

08004db4 <_Bfree>:
 8004db4:	b570      	push	{r4, r5, r6, lr}
 8004db6:	69c6      	ldr	r6, [r0, #28]
 8004db8:	4605      	mov	r5, r0
 8004dba:	460c      	mov	r4, r1
 8004dbc:	b976      	cbnz	r6, 8004ddc <_Bfree+0x28>
 8004dbe:	2010      	movs	r0, #16
 8004dc0:	f7ff ff04 	bl	8004bcc <malloc>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	61e8      	str	r0, [r5, #28]
 8004dc8:	b920      	cbnz	r0, 8004dd4 <_Bfree+0x20>
 8004dca:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <_Bfree+0x3c>)
 8004dcc:	4809      	ldr	r0, [pc, #36]	; (8004df4 <_Bfree+0x40>)
 8004dce:	218f      	movs	r1, #143	; 0x8f
 8004dd0:	f000 fd6a 	bl	80058a8 <__assert_func>
 8004dd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004dd8:	6006      	str	r6, [r0, #0]
 8004dda:	60c6      	str	r6, [r0, #12]
 8004ddc:	b13c      	cbz	r4, 8004dee <_Bfree+0x3a>
 8004dde:	69eb      	ldr	r3, [r5, #28]
 8004de0:	6862      	ldr	r2, [r4, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004de8:	6021      	str	r1, [r4, #0]
 8004dea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004dee:	bd70      	pop	{r4, r5, r6, pc}
 8004df0:	08006428 	.word	0x08006428
 8004df4:	080064a8 	.word	0x080064a8

08004df8 <__multadd>:
 8004df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dfc:	690d      	ldr	r5, [r1, #16]
 8004dfe:	4607      	mov	r7, r0
 8004e00:	460c      	mov	r4, r1
 8004e02:	461e      	mov	r6, r3
 8004e04:	f101 0c14 	add.w	ip, r1, #20
 8004e08:	2000      	movs	r0, #0
 8004e0a:	f8dc 3000 	ldr.w	r3, [ip]
 8004e0e:	b299      	uxth	r1, r3
 8004e10:	fb02 6101 	mla	r1, r2, r1, r6
 8004e14:	0c1e      	lsrs	r6, r3, #16
 8004e16:	0c0b      	lsrs	r3, r1, #16
 8004e18:	fb02 3306 	mla	r3, r2, r6, r3
 8004e1c:	b289      	uxth	r1, r1
 8004e1e:	3001      	adds	r0, #1
 8004e20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004e24:	4285      	cmp	r5, r0
 8004e26:	f84c 1b04 	str.w	r1, [ip], #4
 8004e2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004e2e:	dcec      	bgt.n	8004e0a <__multadd+0x12>
 8004e30:	b30e      	cbz	r6, 8004e76 <__multadd+0x7e>
 8004e32:	68a3      	ldr	r3, [r4, #8]
 8004e34:	42ab      	cmp	r3, r5
 8004e36:	dc19      	bgt.n	8004e6c <__multadd+0x74>
 8004e38:	6861      	ldr	r1, [r4, #4]
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	3101      	adds	r1, #1
 8004e3e:	f7ff ff79 	bl	8004d34 <_Balloc>
 8004e42:	4680      	mov	r8, r0
 8004e44:	b928      	cbnz	r0, 8004e52 <__multadd+0x5a>
 8004e46:	4602      	mov	r2, r0
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <__multadd+0x84>)
 8004e4a:	480d      	ldr	r0, [pc, #52]	; (8004e80 <__multadd+0x88>)
 8004e4c:	21ba      	movs	r1, #186	; 0xba
 8004e4e:	f000 fd2b 	bl	80058a8 <__assert_func>
 8004e52:	6922      	ldr	r2, [r4, #16]
 8004e54:	3202      	adds	r2, #2
 8004e56:	f104 010c 	add.w	r1, r4, #12
 8004e5a:	0092      	lsls	r2, r2, #2
 8004e5c:	300c      	adds	r0, #12
 8004e5e:	f000 fd15 	bl	800588c <memcpy>
 8004e62:	4621      	mov	r1, r4
 8004e64:	4638      	mov	r0, r7
 8004e66:	f7ff ffa5 	bl	8004db4 <_Bfree>
 8004e6a:	4644      	mov	r4, r8
 8004e6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004e70:	3501      	adds	r5, #1
 8004e72:	615e      	str	r6, [r3, #20]
 8004e74:	6125      	str	r5, [r4, #16]
 8004e76:	4620      	mov	r0, r4
 8004e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e7c:	08006497 	.word	0x08006497
 8004e80:	080064a8 	.word	0x080064a8

08004e84 <__hi0bits>:
 8004e84:	0c03      	lsrs	r3, r0, #16
 8004e86:	041b      	lsls	r3, r3, #16
 8004e88:	b9d3      	cbnz	r3, 8004ec0 <__hi0bits+0x3c>
 8004e8a:	0400      	lsls	r0, r0, #16
 8004e8c:	2310      	movs	r3, #16
 8004e8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004e92:	bf04      	itt	eq
 8004e94:	0200      	lsleq	r0, r0, #8
 8004e96:	3308      	addeq	r3, #8
 8004e98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004e9c:	bf04      	itt	eq
 8004e9e:	0100      	lsleq	r0, r0, #4
 8004ea0:	3304      	addeq	r3, #4
 8004ea2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004ea6:	bf04      	itt	eq
 8004ea8:	0080      	lsleq	r0, r0, #2
 8004eaa:	3302      	addeq	r3, #2
 8004eac:	2800      	cmp	r0, #0
 8004eae:	db05      	blt.n	8004ebc <__hi0bits+0x38>
 8004eb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004eb4:	f103 0301 	add.w	r3, r3, #1
 8004eb8:	bf08      	it	eq
 8004eba:	2320      	moveq	r3, #32
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	4770      	bx	lr
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	e7e4      	b.n	8004e8e <__hi0bits+0xa>

08004ec4 <__lo0bits>:
 8004ec4:	6803      	ldr	r3, [r0, #0]
 8004ec6:	f013 0207 	ands.w	r2, r3, #7
 8004eca:	d00c      	beq.n	8004ee6 <__lo0bits+0x22>
 8004ecc:	07d9      	lsls	r1, r3, #31
 8004ece:	d422      	bmi.n	8004f16 <__lo0bits+0x52>
 8004ed0:	079a      	lsls	r2, r3, #30
 8004ed2:	bf49      	itett	mi
 8004ed4:	085b      	lsrmi	r3, r3, #1
 8004ed6:	089b      	lsrpl	r3, r3, #2
 8004ed8:	6003      	strmi	r3, [r0, #0]
 8004eda:	2201      	movmi	r2, #1
 8004edc:	bf5c      	itt	pl
 8004ede:	6003      	strpl	r3, [r0, #0]
 8004ee0:	2202      	movpl	r2, #2
 8004ee2:	4610      	mov	r0, r2
 8004ee4:	4770      	bx	lr
 8004ee6:	b299      	uxth	r1, r3
 8004ee8:	b909      	cbnz	r1, 8004eee <__lo0bits+0x2a>
 8004eea:	0c1b      	lsrs	r3, r3, #16
 8004eec:	2210      	movs	r2, #16
 8004eee:	b2d9      	uxtb	r1, r3
 8004ef0:	b909      	cbnz	r1, 8004ef6 <__lo0bits+0x32>
 8004ef2:	3208      	adds	r2, #8
 8004ef4:	0a1b      	lsrs	r3, r3, #8
 8004ef6:	0719      	lsls	r1, r3, #28
 8004ef8:	bf04      	itt	eq
 8004efa:	091b      	lsreq	r3, r3, #4
 8004efc:	3204      	addeq	r2, #4
 8004efe:	0799      	lsls	r1, r3, #30
 8004f00:	bf04      	itt	eq
 8004f02:	089b      	lsreq	r3, r3, #2
 8004f04:	3202      	addeq	r2, #2
 8004f06:	07d9      	lsls	r1, r3, #31
 8004f08:	d403      	bmi.n	8004f12 <__lo0bits+0x4e>
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	f102 0201 	add.w	r2, r2, #1
 8004f10:	d003      	beq.n	8004f1a <__lo0bits+0x56>
 8004f12:	6003      	str	r3, [r0, #0]
 8004f14:	e7e5      	b.n	8004ee2 <__lo0bits+0x1e>
 8004f16:	2200      	movs	r2, #0
 8004f18:	e7e3      	b.n	8004ee2 <__lo0bits+0x1e>
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	e7e1      	b.n	8004ee2 <__lo0bits+0x1e>
	...

08004f20 <__i2b>:
 8004f20:	b510      	push	{r4, lr}
 8004f22:	460c      	mov	r4, r1
 8004f24:	2101      	movs	r1, #1
 8004f26:	f7ff ff05 	bl	8004d34 <_Balloc>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	b928      	cbnz	r0, 8004f3a <__i2b+0x1a>
 8004f2e:	4b05      	ldr	r3, [pc, #20]	; (8004f44 <__i2b+0x24>)
 8004f30:	4805      	ldr	r0, [pc, #20]	; (8004f48 <__i2b+0x28>)
 8004f32:	f240 1145 	movw	r1, #325	; 0x145
 8004f36:	f000 fcb7 	bl	80058a8 <__assert_func>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	6144      	str	r4, [r0, #20]
 8004f3e:	6103      	str	r3, [r0, #16]
 8004f40:	bd10      	pop	{r4, pc}
 8004f42:	bf00      	nop
 8004f44:	08006497 	.word	0x08006497
 8004f48:	080064a8 	.word	0x080064a8

08004f4c <__multiply>:
 8004f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f50:	4691      	mov	r9, r2
 8004f52:	690a      	ldr	r2, [r1, #16]
 8004f54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	bfb8      	it	lt
 8004f5c:	460b      	movlt	r3, r1
 8004f5e:	460c      	mov	r4, r1
 8004f60:	bfbc      	itt	lt
 8004f62:	464c      	movlt	r4, r9
 8004f64:	4699      	movlt	r9, r3
 8004f66:	6927      	ldr	r7, [r4, #16]
 8004f68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004f6c:	68a3      	ldr	r3, [r4, #8]
 8004f6e:	6861      	ldr	r1, [r4, #4]
 8004f70:	eb07 060a 	add.w	r6, r7, sl
 8004f74:	42b3      	cmp	r3, r6
 8004f76:	b085      	sub	sp, #20
 8004f78:	bfb8      	it	lt
 8004f7a:	3101      	addlt	r1, #1
 8004f7c:	f7ff feda 	bl	8004d34 <_Balloc>
 8004f80:	b930      	cbnz	r0, 8004f90 <__multiply+0x44>
 8004f82:	4602      	mov	r2, r0
 8004f84:	4b44      	ldr	r3, [pc, #272]	; (8005098 <__multiply+0x14c>)
 8004f86:	4845      	ldr	r0, [pc, #276]	; (800509c <__multiply+0x150>)
 8004f88:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004f8c:	f000 fc8c 	bl	80058a8 <__assert_func>
 8004f90:	f100 0514 	add.w	r5, r0, #20
 8004f94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004f98:	462b      	mov	r3, r5
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	4543      	cmp	r3, r8
 8004f9e:	d321      	bcc.n	8004fe4 <__multiply+0x98>
 8004fa0:	f104 0314 	add.w	r3, r4, #20
 8004fa4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004fa8:	f109 0314 	add.w	r3, r9, #20
 8004fac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004fb0:	9202      	str	r2, [sp, #8]
 8004fb2:	1b3a      	subs	r2, r7, r4
 8004fb4:	3a15      	subs	r2, #21
 8004fb6:	f022 0203 	bic.w	r2, r2, #3
 8004fba:	3204      	adds	r2, #4
 8004fbc:	f104 0115 	add.w	r1, r4, #21
 8004fc0:	428f      	cmp	r7, r1
 8004fc2:	bf38      	it	cc
 8004fc4:	2204      	movcc	r2, #4
 8004fc6:	9201      	str	r2, [sp, #4]
 8004fc8:	9a02      	ldr	r2, [sp, #8]
 8004fca:	9303      	str	r3, [sp, #12]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d80c      	bhi.n	8004fea <__multiply+0x9e>
 8004fd0:	2e00      	cmp	r6, #0
 8004fd2:	dd03      	ble.n	8004fdc <__multiply+0x90>
 8004fd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d05b      	beq.n	8005094 <__multiply+0x148>
 8004fdc:	6106      	str	r6, [r0, #16]
 8004fde:	b005      	add	sp, #20
 8004fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe4:	f843 2b04 	str.w	r2, [r3], #4
 8004fe8:	e7d8      	b.n	8004f9c <__multiply+0x50>
 8004fea:	f8b3 a000 	ldrh.w	sl, [r3]
 8004fee:	f1ba 0f00 	cmp.w	sl, #0
 8004ff2:	d024      	beq.n	800503e <__multiply+0xf2>
 8004ff4:	f104 0e14 	add.w	lr, r4, #20
 8004ff8:	46a9      	mov	r9, r5
 8004ffa:	f04f 0c00 	mov.w	ip, #0
 8004ffe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005002:	f8d9 1000 	ldr.w	r1, [r9]
 8005006:	fa1f fb82 	uxth.w	fp, r2
 800500a:	b289      	uxth	r1, r1
 800500c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005010:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005014:	f8d9 2000 	ldr.w	r2, [r9]
 8005018:	4461      	add	r1, ip
 800501a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800501e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005022:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005026:	b289      	uxth	r1, r1
 8005028:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800502c:	4577      	cmp	r7, lr
 800502e:	f849 1b04 	str.w	r1, [r9], #4
 8005032:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005036:	d8e2      	bhi.n	8004ffe <__multiply+0xb2>
 8005038:	9a01      	ldr	r2, [sp, #4]
 800503a:	f845 c002 	str.w	ip, [r5, r2]
 800503e:	9a03      	ldr	r2, [sp, #12]
 8005040:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005044:	3304      	adds	r3, #4
 8005046:	f1b9 0f00 	cmp.w	r9, #0
 800504a:	d021      	beq.n	8005090 <__multiply+0x144>
 800504c:	6829      	ldr	r1, [r5, #0]
 800504e:	f104 0c14 	add.w	ip, r4, #20
 8005052:	46ae      	mov	lr, r5
 8005054:	f04f 0a00 	mov.w	sl, #0
 8005058:	f8bc b000 	ldrh.w	fp, [ip]
 800505c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005060:	fb09 220b 	mla	r2, r9, fp, r2
 8005064:	4452      	add	r2, sl
 8005066:	b289      	uxth	r1, r1
 8005068:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800506c:	f84e 1b04 	str.w	r1, [lr], #4
 8005070:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005074:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005078:	f8be 1000 	ldrh.w	r1, [lr]
 800507c:	fb09 110a 	mla	r1, r9, sl, r1
 8005080:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005084:	4567      	cmp	r7, ip
 8005086:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800508a:	d8e5      	bhi.n	8005058 <__multiply+0x10c>
 800508c:	9a01      	ldr	r2, [sp, #4]
 800508e:	50a9      	str	r1, [r5, r2]
 8005090:	3504      	adds	r5, #4
 8005092:	e799      	b.n	8004fc8 <__multiply+0x7c>
 8005094:	3e01      	subs	r6, #1
 8005096:	e79b      	b.n	8004fd0 <__multiply+0x84>
 8005098:	08006497 	.word	0x08006497
 800509c:	080064a8 	.word	0x080064a8

080050a0 <__pow5mult>:
 80050a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050a4:	4615      	mov	r5, r2
 80050a6:	f012 0203 	ands.w	r2, r2, #3
 80050aa:	4606      	mov	r6, r0
 80050ac:	460f      	mov	r7, r1
 80050ae:	d007      	beq.n	80050c0 <__pow5mult+0x20>
 80050b0:	4c25      	ldr	r4, [pc, #148]	; (8005148 <__pow5mult+0xa8>)
 80050b2:	3a01      	subs	r2, #1
 80050b4:	2300      	movs	r3, #0
 80050b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80050ba:	f7ff fe9d 	bl	8004df8 <__multadd>
 80050be:	4607      	mov	r7, r0
 80050c0:	10ad      	asrs	r5, r5, #2
 80050c2:	d03d      	beq.n	8005140 <__pow5mult+0xa0>
 80050c4:	69f4      	ldr	r4, [r6, #28]
 80050c6:	b97c      	cbnz	r4, 80050e8 <__pow5mult+0x48>
 80050c8:	2010      	movs	r0, #16
 80050ca:	f7ff fd7f 	bl	8004bcc <malloc>
 80050ce:	4602      	mov	r2, r0
 80050d0:	61f0      	str	r0, [r6, #28]
 80050d2:	b928      	cbnz	r0, 80050e0 <__pow5mult+0x40>
 80050d4:	4b1d      	ldr	r3, [pc, #116]	; (800514c <__pow5mult+0xac>)
 80050d6:	481e      	ldr	r0, [pc, #120]	; (8005150 <__pow5mult+0xb0>)
 80050d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80050dc:	f000 fbe4 	bl	80058a8 <__assert_func>
 80050e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80050e4:	6004      	str	r4, [r0, #0]
 80050e6:	60c4      	str	r4, [r0, #12]
 80050e8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80050ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80050f0:	b94c      	cbnz	r4, 8005106 <__pow5mult+0x66>
 80050f2:	f240 2171 	movw	r1, #625	; 0x271
 80050f6:	4630      	mov	r0, r6
 80050f8:	f7ff ff12 	bl	8004f20 <__i2b>
 80050fc:	2300      	movs	r3, #0
 80050fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8005102:	4604      	mov	r4, r0
 8005104:	6003      	str	r3, [r0, #0]
 8005106:	f04f 0900 	mov.w	r9, #0
 800510a:	07eb      	lsls	r3, r5, #31
 800510c:	d50a      	bpl.n	8005124 <__pow5mult+0x84>
 800510e:	4639      	mov	r1, r7
 8005110:	4622      	mov	r2, r4
 8005112:	4630      	mov	r0, r6
 8005114:	f7ff ff1a 	bl	8004f4c <__multiply>
 8005118:	4639      	mov	r1, r7
 800511a:	4680      	mov	r8, r0
 800511c:	4630      	mov	r0, r6
 800511e:	f7ff fe49 	bl	8004db4 <_Bfree>
 8005122:	4647      	mov	r7, r8
 8005124:	106d      	asrs	r5, r5, #1
 8005126:	d00b      	beq.n	8005140 <__pow5mult+0xa0>
 8005128:	6820      	ldr	r0, [r4, #0]
 800512a:	b938      	cbnz	r0, 800513c <__pow5mult+0x9c>
 800512c:	4622      	mov	r2, r4
 800512e:	4621      	mov	r1, r4
 8005130:	4630      	mov	r0, r6
 8005132:	f7ff ff0b 	bl	8004f4c <__multiply>
 8005136:	6020      	str	r0, [r4, #0]
 8005138:	f8c0 9000 	str.w	r9, [r0]
 800513c:	4604      	mov	r4, r0
 800513e:	e7e4      	b.n	800510a <__pow5mult+0x6a>
 8005140:	4638      	mov	r0, r7
 8005142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005146:	bf00      	nop
 8005148:	080065f8 	.word	0x080065f8
 800514c:	08006428 	.word	0x08006428
 8005150:	080064a8 	.word	0x080064a8

08005154 <__lshift>:
 8005154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005158:	460c      	mov	r4, r1
 800515a:	6849      	ldr	r1, [r1, #4]
 800515c:	6923      	ldr	r3, [r4, #16]
 800515e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005162:	68a3      	ldr	r3, [r4, #8]
 8005164:	4607      	mov	r7, r0
 8005166:	4691      	mov	r9, r2
 8005168:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800516c:	f108 0601 	add.w	r6, r8, #1
 8005170:	42b3      	cmp	r3, r6
 8005172:	db0b      	blt.n	800518c <__lshift+0x38>
 8005174:	4638      	mov	r0, r7
 8005176:	f7ff fddd 	bl	8004d34 <_Balloc>
 800517a:	4605      	mov	r5, r0
 800517c:	b948      	cbnz	r0, 8005192 <__lshift+0x3e>
 800517e:	4602      	mov	r2, r0
 8005180:	4b28      	ldr	r3, [pc, #160]	; (8005224 <__lshift+0xd0>)
 8005182:	4829      	ldr	r0, [pc, #164]	; (8005228 <__lshift+0xd4>)
 8005184:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005188:	f000 fb8e 	bl	80058a8 <__assert_func>
 800518c:	3101      	adds	r1, #1
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	e7ee      	b.n	8005170 <__lshift+0x1c>
 8005192:	2300      	movs	r3, #0
 8005194:	f100 0114 	add.w	r1, r0, #20
 8005198:	f100 0210 	add.w	r2, r0, #16
 800519c:	4618      	mov	r0, r3
 800519e:	4553      	cmp	r3, sl
 80051a0:	db33      	blt.n	800520a <__lshift+0xb6>
 80051a2:	6920      	ldr	r0, [r4, #16]
 80051a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80051a8:	f104 0314 	add.w	r3, r4, #20
 80051ac:	f019 091f 	ands.w	r9, r9, #31
 80051b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80051b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80051b8:	d02b      	beq.n	8005212 <__lshift+0xbe>
 80051ba:	f1c9 0e20 	rsb	lr, r9, #32
 80051be:	468a      	mov	sl, r1
 80051c0:	2200      	movs	r2, #0
 80051c2:	6818      	ldr	r0, [r3, #0]
 80051c4:	fa00 f009 	lsl.w	r0, r0, r9
 80051c8:	4310      	orrs	r0, r2
 80051ca:	f84a 0b04 	str.w	r0, [sl], #4
 80051ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80051d2:	459c      	cmp	ip, r3
 80051d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80051d8:	d8f3      	bhi.n	80051c2 <__lshift+0x6e>
 80051da:	ebac 0304 	sub.w	r3, ip, r4
 80051de:	3b15      	subs	r3, #21
 80051e0:	f023 0303 	bic.w	r3, r3, #3
 80051e4:	3304      	adds	r3, #4
 80051e6:	f104 0015 	add.w	r0, r4, #21
 80051ea:	4584      	cmp	ip, r0
 80051ec:	bf38      	it	cc
 80051ee:	2304      	movcc	r3, #4
 80051f0:	50ca      	str	r2, [r1, r3]
 80051f2:	b10a      	cbz	r2, 80051f8 <__lshift+0xa4>
 80051f4:	f108 0602 	add.w	r6, r8, #2
 80051f8:	3e01      	subs	r6, #1
 80051fa:	4638      	mov	r0, r7
 80051fc:	612e      	str	r6, [r5, #16]
 80051fe:	4621      	mov	r1, r4
 8005200:	f7ff fdd8 	bl	8004db4 <_Bfree>
 8005204:	4628      	mov	r0, r5
 8005206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520a:	f842 0f04 	str.w	r0, [r2, #4]!
 800520e:	3301      	adds	r3, #1
 8005210:	e7c5      	b.n	800519e <__lshift+0x4a>
 8005212:	3904      	subs	r1, #4
 8005214:	f853 2b04 	ldr.w	r2, [r3], #4
 8005218:	f841 2f04 	str.w	r2, [r1, #4]!
 800521c:	459c      	cmp	ip, r3
 800521e:	d8f9      	bhi.n	8005214 <__lshift+0xc0>
 8005220:	e7ea      	b.n	80051f8 <__lshift+0xa4>
 8005222:	bf00      	nop
 8005224:	08006497 	.word	0x08006497
 8005228:	080064a8 	.word	0x080064a8

0800522c <__mcmp>:
 800522c:	b530      	push	{r4, r5, lr}
 800522e:	6902      	ldr	r2, [r0, #16]
 8005230:	690c      	ldr	r4, [r1, #16]
 8005232:	1b12      	subs	r2, r2, r4
 8005234:	d10e      	bne.n	8005254 <__mcmp+0x28>
 8005236:	f100 0314 	add.w	r3, r0, #20
 800523a:	3114      	adds	r1, #20
 800523c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005240:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005244:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005248:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800524c:	42a5      	cmp	r5, r4
 800524e:	d003      	beq.n	8005258 <__mcmp+0x2c>
 8005250:	d305      	bcc.n	800525e <__mcmp+0x32>
 8005252:	2201      	movs	r2, #1
 8005254:	4610      	mov	r0, r2
 8005256:	bd30      	pop	{r4, r5, pc}
 8005258:	4283      	cmp	r3, r0
 800525a:	d3f3      	bcc.n	8005244 <__mcmp+0x18>
 800525c:	e7fa      	b.n	8005254 <__mcmp+0x28>
 800525e:	f04f 32ff 	mov.w	r2, #4294967295
 8005262:	e7f7      	b.n	8005254 <__mcmp+0x28>

08005264 <__mdiff>:
 8005264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005268:	460c      	mov	r4, r1
 800526a:	4606      	mov	r6, r0
 800526c:	4611      	mov	r1, r2
 800526e:	4620      	mov	r0, r4
 8005270:	4690      	mov	r8, r2
 8005272:	f7ff ffdb 	bl	800522c <__mcmp>
 8005276:	1e05      	subs	r5, r0, #0
 8005278:	d110      	bne.n	800529c <__mdiff+0x38>
 800527a:	4629      	mov	r1, r5
 800527c:	4630      	mov	r0, r6
 800527e:	f7ff fd59 	bl	8004d34 <_Balloc>
 8005282:	b930      	cbnz	r0, 8005292 <__mdiff+0x2e>
 8005284:	4b3a      	ldr	r3, [pc, #232]	; (8005370 <__mdiff+0x10c>)
 8005286:	4602      	mov	r2, r0
 8005288:	f240 2137 	movw	r1, #567	; 0x237
 800528c:	4839      	ldr	r0, [pc, #228]	; (8005374 <__mdiff+0x110>)
 800528e:	f000 fb0b 	bl	80058a8 <__assert_func>
 8005292:	2301      	movs	r3, #1
 8005294:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005298:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529c:	bfa4      	itt	ge
 800529e:	4643      	movge	r3, r8
 80052a0:	46a0      	movge	r8, r4
 80052a2:	4630      	mov	r0, r6
 80052a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80052a8:	bfa6      	itte	ge
 80052aa:	461c      	movge	r4, r3
 80052ac:	2500      	movge	r5, #0
 80052ae:	2501      	movlt	r5, #1
 80052b0:	f7ff fd40 	bl	8004d34 <_Balloc>
 80052b4:	b920      	cbnz	r0, 80052c0 <__mdiff+0x5c>
 80052b6:	4b2e      	ldr	r3, [pc, #184]	; (8005370 <__mdiff+0x10c>)
 80052b8:	4602      	mov	r2, r0
 80052ba:	f240 2145 	movw	r1, #581	; 0x245
 80052be:	e7e5      	b.n	800528c <__mdiff+0x28>
 80052c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80052c4:	6926      	ldr	r6, [r4, #16]
 80052c6:	60c5      	str	r5, [r0, #12]
 80052c8:	f104 0914 	add.w	r9, r4, #20
 80052cc:	f108 0514 	add.w	r5, r8, #20
 80052d0:	f100 0e14 	add.w	lr, r0, #20
 80052d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80052d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80052dc:	f108 0210 	add.w	r2, r8, #16
 80052e0:	46f2      	mov	sl, lr
 80052e2:	2100      	movs	r1, #0
 80052e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80052e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80052ec:	fa11 f88b 	uxtah	r8, r1, fp
 80052f0:	b299      	uxth	r1, r3
 80052f2:	0c1b      	lsrs	r3, r3, #16
 80052f4:	eba8 0801 	sub.w	r8, r8, r1
 80052f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80052fc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005300:	fa1f f888 	uxth.w	r8, r8
 8005304:	1419      	asrs	r1, r3, #16
 8005306:	454e      	cmp	r6, r9
 8005308:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800530c:	f84a 3b04 	str.w	r3, [sl], #4
 8005310:	d8e8      	bhi.n	80052e4 <__mdiff+0x80>
 8005312:	1b33      	subs	r3, r6, r4
 8005314:	3b15      	subs	r3, #21
 8005316:	f023 0303 	bic.w	r3, r3, #3
 800531a:	3304      	adds	r3, #4
 800531c:	3415      	adds	r4, #21
 800531e:	42a6      	cmp	r6, r4
 8005320:	bf38      	it	cc
 8005322:	2304      	movcc	r3, #4
 8005324:	441d      	add	r5, r3
 8005326:	4473      	add	r3, lr
 8005328:	469e      	mov	lr, r3
 800532a:	462e      	mov	r6, r5
 800532c:	4566      	cmp	r6, ip
 800532e:	d30e      	bcc.n	800534e <__mdiff+0xea>
 8005330:	f10c 0203 	add.w	r2, ip, #3
 8005334:	1b52      	subs	r2, r2, r5
 8005336:	f022 0203 	bic.w	r2, r2, #3
 800533a:	3d03      	subs	r5, #3
 800533c:	45ac      	cmp	ip, r5
 800533e:	bf38      	it	cc
 8005340:	2200      	movcc	r2, #0
 8005342:	4413      	add	r3, r2
 8005344:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005348:	b17a      	cbz	r2, 800536a <__mdiff+0x106>
 800534a:	6107      	str	r7, [r0, #16]
 800534c:	e7a4      	b.n	8005298 <__mdiff+0x34>
 800534e:	f856 8b04 	ldr.w	r8, [r6], #4
 8005352:	fa11 f288 	uxtah	r2, r1, r8
 8005356:	1414      	asrs	r4, r2, #16
 8005358:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800535c:	b292      	uxth	r2, r2
 800535e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005362:	f84e 2b04 	str.w	r2, [lr], #4
 8005366:	1421      	asrs	r1, r4, #16
 8005368:	e7e0      	b.n	800532c <__mdiff+0xc8>
 800536a:	3f01      	subs	r7, #1
 800536c:	e7ea      	b.n	8005344 <__mdiff+0xe0>
 800536e:	bf00      	nop
 8005370:	08006497 	.word	0x08006497
 8005374:	080064a8 	.word	0x080064a8

08005378 <__d2b>:
 8005378:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800537c:	460f      	mov	r7, r1
 800537e:	2101      	movs	r1, #1
 8005380:	ec59 8b10 	vmov	r8, r9, d0
 8005384:	4616      	mov	r6, r2
 8005386:	f7ff fcd5 	bl	8004d34 <_Balloc>
 800538a:	4604      	mov	r4, r0
 800538c:	b930      	cbnz	r0, 800539c <__d2b+0x24>
 800538e:	4602      	mov	r2, r0
 8005390:	4b24      	ldr	r3, [pc, #144]	; (8005424 <__d2b+0xac>)
 8005392:	4825      	ldr	r0, [pc, #148]	; (8005428 <__d2b+0xb0>)
 8005394:	f240 310f 	movw	r1, #783	; 0x30f
 8005398:	f000 fa86 	bl	80058a8 <__assert_func>
 800539c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80053a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80053a4:	bb2d      	cbnz	r5, 80053f2 <__d2b+0x7a>
 80053a6:	9301      	str	r3, [sp, #4]
 80053a8:	f1b8 0300 	subs.w	r3, r8, #0
 80053ac:	d026      	beq.n	80053fc <__d2b+0x84>
 80053ae:	4668      	mov	r0, sp
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	f7ff fd87 	bl	8004ec4 <__lo0bits>
 80053b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80053ba:	b1e8      	cbz	r0, 80053f8 <__d2b+0x80>
 80053bc:	f1c0 0320 	rsb	r3, r0, #32
 80053c0:	fa02 f303 	lsl.w	r3, r2, r3
 80053c4:	430b      	orrs	r3, r1
 80053c6:	40c2      	lsrs	r2, r0
 80053c8:	6163      	str	r3, [r4, #20]
 80053ca:	9201      	str	r2, [sp, #4]
 80053cc:	9b01      	ldr	r3, [sp, #4]
 80053ce:	61a3      	str	r3, [r4, #24]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	bf14      	ite	ne
 80053d4:	2202      	movne	r2, #2
 80053d6:	2201      	moveq	r2, #1
 80053d8:	6122      	str	r2, [r4, #16]
 80053da:	b1bd      	cbz	r5, 800540c <__d2b+0x94>
 80053dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80053e0:	4405      	add	r5, r0
 80053e2:	603d      	str	r5, [r7, #0]
 80053e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80053e8:	6030      	str	r0, [r6, #0]
 80053ea:	4620      	mov	r0, r4
 80053ec:	b003      	add	sp, #12
 80053ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053f6:	e7d6      	b.n	80053a6 <__d2b+0x2e>
 80053f8:	6161      	str	r1, [r4, #20]
 80053fa:	e7e7      	b.n	80053cc <__d2b+0x54>
 80053fc:	a801      	add	r0, sp, #4
 80053fe:	f7ff fd61 	bl	8004ec4 <__lo0bits>
 8005402:	9b01      	ldr	r3, [sp, #4]
 8005404:	6163      	str	r3, [r4, #20]
 8005406:	3020      	adds	r0, #32
 8005408:	2201      	movs	r2, #1
 800540a:	e7e5      	b.n	80053d8 <__d2b+0x60>
 800540c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005410:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005414:	6038      	str	r0, [r7, #0]
 8005416:	6918      	ldr	r0, [r3, #16]
 8005418:	f7ff fd34 	bl	8004e84 <__hi0bits>
 800541c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005420:	e7e2      	b.n	80053e8 <__d2b+0x70>
 8005422:	bf00      	nop
 8005424:	08006497 	.word	0x08006497
 8005428:	080064a8 	.word	0x080064a8

0800542c <__ssputs_r>:
 800542c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005430:	688e      	ldr	r6, [r1, #8]
 8005432:	461f      	mov	r7, r3
 8005434:	42be      	cmp	r6, r7
 8005436:	680b      	ldr	r3, [r1, #0]
 8005438:	4682      	mov	sl, r0
 800543a:	460c      	mov	r4, r1
 800543c:	4690      	mov	r8, r2
 800543e:	d82c      	bhi.n	800549a <__ssputs_r+0x6e>
 8005440:	898a      	ldrh	r2, [r1, #12]
 8005442:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005446:	d026      	beq.n	8005496 <__ssputs_r+0x6a>
 8005448:	6965      	ldr	r5, [r4, #20]
 800544a:	6909      	ldr	r1, [r1, #16]
 800544c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005450:	eba3 0901 	sub.w	r9, r3, r1
 8005454:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005458:	1c7b      	adds	r3, r7, #1
 800545a:	444b      	add	r3, r9
 800545c:	106d      	asrs	r5, r5, #1
 800545e:	429d      	cmp	r5, r3
 8005460:	bf38      	it	cc
 8005462:	461d      	movcc	r5, r3
 8005464:	0553      	lsls	r3, r2, #21
 8005466:	d527      	bpl.n	80054b8 <__ssputs_r+0x8c>
 8005468:	4629      	mov	r1, r5
 800546a:	f7ff fbd7 	bl	8004c1c <_malloc_r>
 800546e:	4606      	mov	r6, r0
 8005470:	b360      	cbz	r0, 80054cc <__ssputs_r+0xa0>
 8005472:	6921      	ldr	r1, [r4, #16]
 8005474:	464a      	mov	r2, r9
 8005476:	f000 fa09 	bl	800588c <memcpy>
 800547a:	89a3      	ldrh	r3, [r4, #12]
 800547c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005484:	81a3      	strh	r3, [r4, #12]
 8005486:	6126      	str	r6, [r4, #16]
 8005488:	6165      	str	r5, [r4, #20]
 800548a:	444e      	add	r6, r9
 800548c:	eba5 0509 	sub.w	r5, r5, r9
 8005490:	6026      	str	r6, [r4, #0]
 8005492:	60a5      	str	r5, [r4, #8]
 8005494:	463e      	mov	r6, r7
 8005496:	42be      	cmp	r6, r7
 8005498:	d900      	bls.n	800549c <__ssputs_r+0x70>
 800549a:	463e      	mov	r6, r7
 800549c:	6820      	ldr	r0, [r4, #0]
 800549e:	4632      	mov	r2, r6
 80054a0:	4641      	mov	r1, r8
 80054a2:	f000 f9c9 	bl	8005838 <memmove>
 80054a6:	68a3      	ldr	r3, [r4, #8]
 80054a8:	1b9b      	subs	r3, r3, r6
 80054aa:	60a3      	str	r3, [r4, #8]
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	4433      	add	r3, r6
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	2000      	movs	r0, #0
 80054b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b8:	462a      	mov	r2, r5
 80054ba:	f000 fa3b 	bl	8005934 <_realloc_r>
 80054be:	4606      	mov	r6, r0
 80054c0:	2800      	cmp	r0, #0
 80054c2:	d1e0      	bne.n	8005486 <__ssputs_r+0x5a>
 80054c4:	6921      	ldr	r1, [r4, #16]
 80054c6:	4650      	mov	r0, sl
 80054c8:	f7ff fb34 	bl	8004b34 <_free_r>
 80054cc:	230c      	movs	r3, #12
 80054ce:	f8ca 3000 	str.w	r3, [sl]
 80054d2:	89a3      	ldrh	r3, [r4, #12]
 80054d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054d8:	81a3      	strh	r3, [r4, #12]
 80054da:	f04f 30ff 	mov.w	r0, #4294967295
 80054de:	e7e9      	b.n	80054b4 <__ssputs_r+0x88>

080054e0 <_svfiprintf_r>:
 80054e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e4:	4698      	mov	r8, r3
 80054e6:	898b      	ldrh	r3, [r1, #12]
 80054e8:	061b      	lsls	r3, r3, #24
 80054ea:	b09d      	sub	sp, #116	; 0x74
 80054ec:	4607      	mov	r7, r0
 80054ee:	460d      	mov	r5, r1
 80054f0:	4614      	mov	r4, r2
 80054f2:	d50e      	bpl.n	8005512 <_svfiprintf_r+0x32>
 80054f4:	690b      	ldr	r3, [r1, #16]
 80054f6:	b963      	cbnz	r3, 8005512 <_svfiprintf_r+0x32>
 80054f8:	2140      	movs	r1, #64	; 0x40
 80054fa:	f7ff fb8f 	bl	8004c1c <_malloc_r>
 80054fe:	6028      	str	r0, [r5, #0]
 8005500:	6128      	str	r0, [r5, #16]
 8005502:	b920      	cbnz	r0, 800550e <_svfiprintf_r+0x2e>
 8005504:	230c      	movs	r3, #12
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	f04f 30ff 	mov.w	r0, #4294967295
 800550c:	e0d0      	b.n	80056b0 <_svfiprintf_r+0x1d0>
 800550e:	2340      	movs	r3, #64	; 0x40
 8005510:	616b      	str	r3, [r5, #20]
 8005512:	2300      	movs	r3, #0
 8005514:	9309      	str	r3, [sp, #36]	; 0x24
 8005516:	2320      	movs	r3, #32
 8005518:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800551c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005520:	2330      	movs	r3, #48	; 0x30
 8005522:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80056c8 <_svfiprintf_r+0x1e8>
 8005526:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800552a:	f04f 0901 	mov.w	r9, #1
 800552e:	4623      	mov	r3, r4
 8005530:	469a      	mov	sl, r3
 8005532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005536:	b10a      	cbz	r2, 800553c <_svfiprintf_r+0x5c>
 8005538:	2a25      	cmp	r2, #37	; 0x25
 800553a:	d1f9      	bne.n	8005530 <_svfiprintf_r+0x50>
 800553c:	ebba 0b04 	subs.w	fp, sl, r4
 8005540:	d00b      	beq.n	800555a <_svfiprintf_r+0x7a>
 8005542:	465b      	mov	r3, fp
 8005544:	4622      	mov	r2, r4
 8005546:	4629      	mov	r1, r5
 8005548:	4638      	mov	r0, r7
 800554a:	f7ff ff6f 	bl	800542c <__ssputs_r>
 800554e:	3001      	adds	r0, #1
 8005550:	f000 80a9 	beq.w	80056a6 <_svfiprintf_r+0x1c6>
 8005554:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005556:	445a      	add	r2, fp
 8005558:	9209      	str	r2, [sp, #36]	; 0x24
 800555a:	f89a 3000 	ldrb.w	r3, [sl]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 80a1 	beq.w	80056a6 <_svfiprintf_r+0x1c6>
 8005564:	2300      	movs	r3, #0
 8005566:	f04f 32ff 	mov.w	r2, #4294967295
 800556a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800556e:	f10a 0a01 	add.w	sl, sl, #1
 8005572:	9304      	str	r3, [sp, #16]
 8005574:	9307      	str	r3, [sp, #28]
 8005576:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800557a:	931a      	str	r3, [sp, #104]	; 0x68
 800557c:	4654      	mov	r4, sl
 800557e:	2205      	movs	r2, #5
 8005580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005584:	4850      	ldr	r0, [pc, #320]	; (80056c8 <_svfiprintf_r+0x1e8>)
 8005586:	f7fa fe23 	bl	80001d0 <memchr>
 800558a:	9a04      	ldr	r2, [sp, #16]
 800558c:	b9d8      	cbnz	r0, 80055c6 <_svfiprintf_r+0xe6>
 800558e:	06d0      	lsls	r0, r2, #27
 8005590:	bf44      	itt	mi
 8005592:	2320      	movmi	r3, #32
 8005594:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005598:	0711      	lsls	r1, r2, #28
 800559a:	bf44      	itt	mi
 800559c:	232b      	movmi	r3, #43	; 0x2b
 800559e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055a2:	f89a 3000 	ldrb.w	r3, [sl]
 80055a6:	2b2a      	cmp	r3, #42	; 0x2a
 80055a8:	d015      	beq.n	80055d6 <_svfiprintf_r+0xf6>
 80055aa:	9a07      	ldr	r2, [sp, #28]
 80055ac:	4654      	mov	r4, sl
 80055ae:	2000      	movs	r0, #0
 80055b0:	f04f 0c0a 	mov.w	ip, #10
 80055b4:	4621      	mov	r1, r4
 80055b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055ba:	3b30      	subs	r3, #48	; 0x30
 80055bc:	2b09      	cmp	r3, #9
 80055be:	d94d      	bls.n	800565c <_svfiprintf_r+0x17c>
 80055c0:	b1b0      	cbz	r0, 80055f0 <_svfiprintf_r+0x110>
 80055c2:	9207      	str	r2, [sp, #28]
 80055c4:	e014      	b.n	80055f0 <_svfiprintf_r+0x110>
 80055c6:	eba0 0308 	sub.w	r3, r0, r8
 80055ca:	fa09 f303 	lsl.w	r3, r9, r3
 80055ce:	4313      	orrs	r3, r2
 80055d0:	9304      	str	r3, [sp, #16]
 80055d2:	46a2      	mov	sl, r4
 80055d4:	e7d2      	b.n	800557c <_svfiprintf_r+0x9c>
 80055d6:	9b03      	ldr	r3, [sp, #12]
 80055d8:	1d19      	adds	r1, r3, #4
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	9103      	str	r1, [sp, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	bfbb      	ittet	lt
 80055e2:	425b      	neglt	r3, r3
 80055e4:	f042 0202 	orrlt.w	r2, r2, #2
 80055e8:	9307      	strge	r3, [sp, #28]
 80055ea:	9307      	strlt	r3, [sp, #28]
 80055ec:	bfb8      	it	lt
 80055ee:	9204      	strlt	r2, [sp, #16]
 80055f0:	7823      	ldrb	r3, [r4, #0]
 80055f2:	2b2e      	cmp	r3, #46	; 0x2e
 80055f4:	d10c      	bne.n	8005610 <_svfiprintf_r+0x130>
 80055f6:	7863      	ldrb	r3, [r4, #1]
 80055f8:	2b2a      	cmp	r3, #42	; 0x2a
 80055fa:	d134      	bne.n	8005666 <_svfiprintf_r+0x186>
 80055fc:	9b03      	ldr	r3, [sp, #12]
 80055fe:	1d1a      	adds	r2, r3, #4
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	9203      	str	r2, [sp, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	bfb8      	it	lt
 8005608:	f04f 33ff 	movlt.w	r3, #4294967295
 800560c:	3402      	adds	r4, #2
 800560e:	9305      	str	r3, [sp, #20]
 8005610:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80056d8 <_svfiprintf_r+0x1f8>
 8005614:	7821      	ldrb	r1, [r4, #0]
 8005616:	2203      	movs	r2, #3
 8005618:	4650      	mov	r0, sl
 800561a:	f7fa fdd9 	bl	80001d0 <memchr>
 800561e:	b138      	cbz	r0, 8005630 <_svfiprintf_r+0x150>
 8005620:	9b04      	ldr	r3, [sp, #16]
 8005622:	eba0 000a 	sub.w	r0, r0, sl
 8005626:	2240      	movs	r2, #64	; 0x40
 8005628:	4082      	lsls	r2, r0
 800562a:	4313      	orrs	r3, r2
 800562c:	3401      	adds	r4, #1
 800562e:	9304      	str	r3, [sp, #16]
 8005630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005634:	4825      	ldr	r0, [pc, #148]	; (80056cc <_svfiprintf_r+0x1ec>)
 8005636:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800563a:	2206      	movs	r2, #6
 800563c:	f7fa fdc8 	bl	80001d0 <memchr>
 8005640:	2800      	cmp	r0, #0
 8005642:	d038      	beq.n	80056b6 <_svfiprintf_r+0x1d6>
 8005644:	4b22      	ldr	r3, [pc, #136]	; (80056d0 <_svfiprintf_r+0x1f0>)
 8005646:	bb1b      	cbnz	r3, 8005690 <_svfiprintf_r+0x1b0>
 8005648:	9b03      	ldr	r3, [sp, #12]
 800564a:	3307      	adds	r3, #7
 800564c:	f023 0307 	bic.w	r3, r3, #7
 8005650:	3308      	adds	r3, #8
 8005652:	9303      	str	r3, [sp, #12]
 8005654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005656:	4433      	add	r3, r6
 8005658:	9309      	str	r3, [sp, #36]	; 0x24
 800565a:	e768      	b.n	800552e <_svfiprintf_r+0x4e>
 800565c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005660:	460c      	mov	r4, r1
 8005662:	2001      	movs	r0, #1
 8005664:	e7a6      	b.n	80055b4 <_svfiprintf_r+0xd4>
 8005666:	2300      	movs	r3, #0
 8005668:	3401      	adds	r4, #1
 800566a:	9305      	str	r3, [sp, #20]
 800566c:	4619      	mov	r1, r3
 800566e:	f04f 0c0a 	mov.w	ip, #10
 8005672:	4620      	mov	r0, r4
 8005674:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005678:	3a30      	subs	r2, #48	; 0x30
 800567a:	2a09      	cmp	r2, #9
 800567c:	d903      	bls.n	8005686 <_svfiprintf_r+0x1a6>
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0c6      	beq.n	8005610 <_svfiprintf_r+0x130>
 8005682:	9105      	str	r1, [sp, #20]
 8005684:	e7c4      	b.n	8005610 <_svfiprintf_r+0x130>
 8005686:	fb0c 2101 	mla	r1, ip, r1, r2
 800568a:	4604      	mov	r4, r0
 800568c:	2301      	movs	r3, #1
 800568e:	e7f0      	b.n	8005672 <_svfiprintf_r+0x192>
 8005690:	ab03      	add	r3, sp, #12
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	462a      	mov	r2, r5
 8005696:	4b0f      	ldr	r3, [pc, #60]	; (80056d4 <_svfiprintf_r+0x1f4>)
 8005698:	a904      	add	r1, sp, #16
 800569a:	4638      	mov	r0, r7
 800569c:	f7fd fe64 	bl	8003368 <_printf_float>
 80056a0:	1c42      	adds	r2, r0, #1
 80056a2:	4606      	mov	r6, r0
 80056a4:	d1d6      	bne.n	8005654 <_svfiprintf_r+0x174>
 80056a6:	89ab      	ldrh	r3, [r5, #12]
 80056a8:	065b      	lsls	r3, r3, #25
 80056aa:	f53f af2d 	bmi.w	8005508 <_svfiprintf_r+0x28>
 80056ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056b0:	b01d      	add	sp, #116	; 0x74
 80056b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056b6:	ab03      	add	r3, sp, #12
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	462a      	mov	r2, r5
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <_svfiprintf_r+0x1f4>)
 80056be:	a904      	add	r1, sp, #16
 80056c0:	4638      	mov	r0, r7
 80056c2:	f7fe f8f5 	bl	80038b0 <_printf_i>
 80056c6:	e7eb      	b.n	80056a0 <_svfiprintf_r+0x1c0>
 80056c8:	08006604 	.word	0x08006604
 80056cc:	0800660e 	.word	0x0800660e
 80056d0:	08003369 	.word	0x08003369
 80056d4:	0800542d 	.word	0x0800542d
 80056d8:	0800660a 	.word	0x0800660a

080056dc <__sflush_r>:
 80056dc:	898a      	ldrh	r2, [r1, #12]
 80056de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056e2:	4605      	mov	r5, r0
 80056e4:	0710      	lsls	r0, r2, #28
 80056e6:	460c      	mov	r4, r1
 80056e8:	d458      	bmi.n	800579c <__sflush_r+0xc0>
 80056ea:	684b      	ldr	r3, [r1, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	dc05      	bgt.n	80056fc <__sflush_r+0x20>
 80056f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	dc02      	bgt.n	80056fc <__sflush_r+0x20>
 80056f6:	2000      	movs	r0, #0
 80056f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056fe:	2e00      	cmp	r6, #0
 8005700:	d0f9      	beq.n	80056f6 <__sflush_r+0x1a>
 8005702:	2300      	movs	r3, #0
 8005704:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005708:	682f      	ldr	r7, [r5, #0]
 800570a:	6a21      	ldr	r1, [r4, #32]
 800570c:	602b      	str	r3, [r5, #0]
 800570e:	d032      	beq.n	8005776 <__sflush_r+0x9a>
 8005710:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005712:	89a3      	ldrh	r3, [r4, #12]
 8005714:	075a      	lsls	r2, r3, #29
 8005716:	d505      	bpl.n	8005724 <__sflush_r+0x48>
 8005718:	6863      	ldr	r3, [r4, #4]
 800571a:	1ac0      	subs	r0, r0, r3
 800571c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800571e:	b10b      	cbz	r3, 8005724 <__sflush_r+0x48>
 8005720:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005722:	1ac0      	subs	r0, r0, r3
 8005724:	2300      	movs	r3, #0
 8005726:	4602      	mov	r2, r0
 8005728:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800572a:	6a21      	ldr	r1, [r4, #32]
 800572c:	4628      	mov	r0, r5
 800572e:	47b0      	blx	r6
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	89a3      	ldrh	r3, [r4, #12]
 8005734:	d106      	bne.n	8005744 <__sflush_r+0x68>
 8005736:	6829      	ldr	r1, [r5, #0]
 8005738:	291d      	cmp	r1, #29
 800573a:	d82b      	bhi.n	8005794 <__sflush_r+0xb8>
 800573c:	4a29      	ldr	r2, [pc, #164]	; (80057e4 <__sflush_r+0x108>)
 800573e:	410a      	asrs	r2, r1
 8005740:	07d6      	lsls	r6, r2, #31
 8005742:	d427      	bmi.n	8005794 <__sflush_r+0xb8>
 8005744:	2200      	movs	r2, #0
 8005746:	6062      	str	r2, [r4, #4]
 8005748:	04d9      	lsls	r1, r3, #19
 800574a:	6922      	ldr	r2, [r4, #16]
 800574c:	6022      	str	r2, [r4, #0]
 800574e:	d504      	bpl.n	800575a <__sflush_r+0x7e>
 8005750:	1c42      	adds	r2, r0, #1
 8005752:	d101      	bne.n	8005758 <__sflush_r+0x7c>
 8005754:	682b      	ldr	r3, [r5, #0]
 8005756:	b903      	cbnz	r3, 800575a <__sflush_r+0x7e>
 8005758:	6560      	str	r0, [r4, #84]	; 0x54
 800575a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800575c:	602f      	str	r7, [r5, #0]
 800575e:	2900      	cmp	r1, #0
 8005760:	d0c9      	beq.n	80056f6 <__sflush_r+0x1a>
 8005762:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005766:	4299      	cmp	r1, r3
 8005768:	d002      	beq.n	8005770 <__sflush_r+0x94>
 800576a:	4628      	mov	r0, r5
 800576c:	f7ff f9e2 	bl	8004b34 <_free_r>
 8005770:	2000      	movs	r0, #0
 8005772:	6360      	str	r0, [r4, #52]	; 0x34
 8005774:	e7c0      	b.n	80056f8 <__sflush_r+0x1c>
 8005776:	2301      	movs	r3, #1
 8005778:	4628      	mov	r0, r5
 800577a:	47b0      	blx	r6
 800577c:	1c41      	adds	r1, r0, #1
 800577e:	d1c8      	bne.n	8005712 <__sflush_r+0x36>
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0c5      	beq.n	8005712 <__sflush_r+0x36>
 8005786:	2b1d      	cmp	r3, #29
 8005788:	d001      	beq.n	800578e <__sflush_r+0xb2>
 800578a:	2b16      	cmp	r3, #22
 800578c:	d101      	bne.n	8005792 <__sflush_r+0xb6>
 800578e:	602f      	str	r7, [r5, #0]
 8005790:	e7b1      	b.n	80056f6 <__sflush_r+0x1a>
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005798:	81a3      	strh	r3, [r4, #12]
 800579a:	e7ad      	b.n	80056f8 <__sflush_r+0x1c>
 800579c:	690f      	ldr	r7, [r1, #16]
 800579e:	2f00      	cmp	r7, #0
 80057a0:	d0a9      	beq.n	80056f6 <__sflush_r+0x1a>
 80057a2:	0793      	lsls	r3, r2, #30
 80057a4:	680e      	ldr	r6, [r1, #0]
 80057a6:	bf08      	it	eq
 80057a8:	694b      	ldreq	r3, [r1, #20]
 80057aa:	600f      	str	r7, [r1, #0]
 80057ac:	bf18      	it	ne
 80057ae:	2300      	movne	r3, #0
 80057b0:	eba6 0807 	sub.w	r8, r6, r7
 80057b4:	608b      	str	r3, [r1, #8]
 80057b6:	f1b8 0f00 	cmp.w	r8, #0
 80057ba:	dd9c      	ble.n	80056f6 <__sflush_r+0x1a>
 80057bc:	6a21      	ldr	r1, [r4, #32]
 80057be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057c0:	4643      	mov	r3, r8
 80057c2:	463a      	mov	r2, r7
 80057c4:	4628      	mov	r0, r5
 80057c6:	47b0      	blx	r6
 80057c8:	2800      	cmp	r0, #0
 80057ca:	dc06      	bgt.n	80057da <__sflush_r+0xfe>
 80057cc:	89a3      	ldrh	r3, [r4, #12]
 80057ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057d2:	81a3      	strh	r3, [r4, #12]
 80057d4:	f04f 30ff 	mov.w	r0, #4294967295
 80057d8:	e78e      	b.n	80056f8 <__sflush_r+0x1c>
 80057da:	4407      	add	r7, r0
 80057dc:	eba8 0800 	sub.w	r8, r8, r0
 80057e0:	e7e9      	b.n	80057b6 <__sflush_r+0xda>
 80057e2:	bf00      	nop
 80057e4:	dfbffffe 	.word	0xdfbffffe

080057e8 <_fflush_r>:
 80057e8:	b538      	push	{r3, r4, r5, lr}
 80057ea:	690b      	ldr	r3, [r1, #16]
 80057ec:	4605      	mov	r5, r0
 80057ee:	460c      	mov	r4, r1
 80057f0:	b913      	cbnz	r3, 80057f8 <_fflush_r+0x10>
 80057f2:	2500      	movs	r5, #0
 80057f4:	4628      	mov	r0, r5
 80057f6:	bd38      	pop	{r3, r4, r5, pc}
 80057f8:	b118      	cbz	r0, 8005802 <_fflush_r+0x1a>
 80057fa:	6a03      	ldr	r3, [r0, #32]
 80057fc:	b90b      	cbnz	r3, 8005802 <_fflush_r+0x1a>
 80057fe:	f7fe fa05 	bl	8003c0c <__sinit>
 8005802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0f3      	beq.n	80057f2 <_fflush_r+0xa>
 800580a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800580c:	07d0      	lsls	r0, r2, #31
 800580e:	d404      	bmi.n	800581a <_fflush_r+0x32>
 8005810:	0599      	lsls	r1, r3, #22
 8005812:	d402      	bmi.n	800581a <_fflush_r+0x32>
 8005814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005816:	f7fe fb10 	bl	8003e3a <__retarget_lock_acquire_recursive>
 800581a:	4628      	mov	r0, r5
 800581c:	4621      	mov	r1, r4
 800581e:	f7ff ff5d 	bl	80056dc <__sflush_r>
 8005822:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005824:	07da      	lsls	r2, r3, #31
 8005826:	4605      	mov	r5, r0
 8005828:	d4e4      	bmi.n	80057f4 <_fflush_r+0xc>
 800582a:	89a3      	ldrh	r3, [r4, #12]
 800582c:	059b      	lsls	r3, r3, #22
 800582e:	d4e1      	bmi.n	80057f4 <_fflush_r+0xc>
 8005830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005832:	f7fe fb03 	bl	8003e3c <__retarget_lock_release_recursive>
 8005836:	e7dd      	b.n	80057f4 <_fflush_r+0xc>

08005838 <memmove>:
 8005838:	4288      	cmp	r0, r1
 800583a:	b510      	push	{r4, lr}
 800583c:	eb01 0402 	add.w	r4, r1, r2
 8005840:	d902      	bls.n	8005848 <memmove+0x10>
 8005842:	4284      	cmp	r4, r0
 8005844:	4623      	mov	r3, r4
 8005846:	d807      	bhi.n	8005858 <memmove+0x20>
 8005848:	1e43      	subs	r3, r0, #1
 800584a:	42a1      	cmp	r1, r4
 800584c:	d008      	beq.n	8005860 <memmove+0x28>
 800584e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005852:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005856:	e7f8      	b.n	800584a <memmove+0x12>
 8005858:	4402      	add	r2, r0
 800585a:	4601      	mov	r1, r0
 800585c:	428a      	cmp	r2, r1
 800585e:	d100      	bne.n	8005862 <memmove+0x2a>
 8005860:	bd10      	pop	{r4, pc}
 8005862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800586a:	e7f7      	b.n	800585c <memmove+0x24>

0800586c <_sbrk_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	4d06      	ldr	r5, [pc, #24]	; (8005888 <_sbrk_r+0x1c>)
 8005870:	2300      	movs	r3, #0
 8005872:	4604      	mov	r4, r0
 8005874:	4608      	mov	r0, r1
 8005876:	602b      	str	r3, [r5, #0]
 8005878:	f7fc ff86 	bl	8002788 <_sbrk>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d102      	bne.n	8005886 <_sbrk_r+0x1a>
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	b103      	cbz	r3, 8005886 <_sbrk_r+0x1a>
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	bd38      	pop	{r3, r4, r5, pc}
 8005888:	200005ac 	.word	0x200005ac

0800588c <memcpy>:
 800588c:	440a      	add	r2, r1
 800588e:	4291      	cmp	r1, r2
 8005890:	f100 33ff 	add.w	r3, r0, #4294967295
 8005894:	d100      	bne.n	8005898 <memcpy+0xc>
 8005896:	4770      	bx	lr
 8005898:	b510      	push	{r4, lr}
 800589a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800589e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058a2:	4291      	cmp	r1, r2
 80058a4:	d1f9      	bne.n	800589a <memcpy+0xe>
 80058a6:	bd10      	pop	{r4, pc}

080058a8 <__assert_func>:
 80058a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80058aa:	4614      	mov	r4, r2
 80058ac:	461a      	mov	r2, r3
 80058ae:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <__assert_func+0x2c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4605      	mov	r5, r0
 80058b4:	68d8      	ldr	r0, [r3, #12]
 80058b6:	b14c      	cbz	r4, 80058cc <__assert_func+0x24>
 80058b8:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <__assert_func+0x30>)
 80058ba:	9100      	str	r1, [sp, #0]
 80058bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80058c0:	4906      	ldr	r1, [pc, #24]	; (80058dc <__assert_func+0x34>)
 80058c2:	462b      	mov	r3, r5
 80058c4:	f000 f872 	bl	80059ac <fiprintf>
 80058c8:	f000 f882 	bl	80059d0 <abort>
 80058cc:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <__assert_func+0x38>)
 80058ce:	461c      	mov	r4, r3
 80058d0:	e7f3      	b.n	80058ba <__assert_func+0x12>
 80058d2:	bf00      	nop
 80058d4:	2000005c 	.word	0x2000005c
 80058d8:	0800661f 	.word	0x0800661f
 80058dc:	0800662c 	.word	0x0800662c
 80058e0:	0800665a 	.word	0x0800665a

080058e4 <_calloc_r>:
 80058e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058e6:	fba1 2402 	umull	r2, r4, r1, r2
 80058ea:	b94c      	cbnz	r4, 8005900 <_calloc_r+0x1c>
 80058ec:	4611      	mov	r1, r2
 80058ee:	9201      	str	r2, [sp, #4]
 80058f0:	f7ff f994 	bl	8004c1c <_malloc_r>
 80058f4:	9a01      	ldr	r2, [sp, #4]
 80058f6:	4605      	mov	r5, r0
 80058f8:	b930      	cbnz	r0, 8005908 <_calloc_r+0x24>
 80058fa:	4628      	mov	r0, r5
 80058fc:	b003      	add	sp, #12
 80058fe:	bd30      	pop	{r4, r5, pc}
 8005900:	220c      	movs	r2, #12
 8005902:	6002      	str	r2, [r0, #0]
 8005904:	2500      	movs	r5, #0
 8005906:	e7f8      	b.n	80058fa <_calloc_r+0x16>
 8005908:	4621      	mov	r1, r4
 800590a:	f7fe fa18 	bl	8003d3e <memset>
 800590e:	e7f4      	b.n	80058fa <_calloc_r+0x16>

08005910 <__ascii_mbtowc>:
 8005910:	b082      	sub	sp, #8
 8005912:	b901      	cbnz	r1, 8005916 <__ascii_mbtowc+0x6>
 8005914:	a901      	add	r1, sp, #4
 8005916:	b142      	cbz	r2, 800592a <__ascii_mbtowc+0x1a>
 8005918:	b14b      	cbz	r3, 800592e <__ascii_mbtowc+0x1e>
 800591a:	7813      	ldrb	r3, [r2, #0]
 800591c:	600b      	str	r3, [r1, #0]
 800591e:	7812      	ldrb	r2, [r2, #0]
 8005920:	1e10      	subs	r0, r2, #0
 8005922:	bf18      	it	ne
 8005924:	2001      	movne	r0, #1
 8005926:	b002      	add	sp, #8
 8005928:	4770      	bx	lr
 800592a:	4610      	mov	r0, r2
 800592c:	e7fb      	b.n	8005926 <__ascii_mbtowc+0x16>
 800592e:	f06f 0001 	mvn.w	r0, #1
 8005932:	e7f8      	b.n	8005926 <__ascii_mbtowc+0x16>

08005934 <_realloc_r>:
 8005934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005938:	4680      	mov	r8, r0
 800593a:	4614      	mov	r4, r2
 800593c:	460e      	mov	r6, r1
 800593e:	b921      	cbnz	r1, 800594a <_realloc_r+0x16>
 8005940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005944:	4611      	mov	r1, r2
 8005946:	f7ff b969 	b.w	8004c1c <_malloc_r>
 800594a:	b92a      	cbnz	r2, 8005958 <_realloc_r+0x24>
 800594c:	f7ff f8f2 	bl	8004b34 <_free_r>
 8005950:	4625      	mov	r5, r4
 8005952:	4628      	mov	r0, r5
 8005954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005958:	f000 f841 	bl	80059de <_malloc_usable_size_r>
 800595c:	4284      	cmp	r4, r0
 800595e:	4607      	mov	r7, r0
 8005960:	d802      	bhi.n	8005968 <_realloc_r+0x34>
 8005962:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005966:	d812      	bhi.n	800598e <_realloc_r+0x5a>
 8005968:	4621      	mov	r1, r4
 800596a:	4640      	mov	r0, r8
 800596c:	f7ff f956 	bl	8004c1c <_malloc_r>
 8005970:	4605      	mov	r5, r0
 8005972:	2800      	cmp	r0, #0
 8005974:	d0ed      	beq.n	8005952 <_realloc_r+0x1e>
 8005976:	42bc      	cmp	r4, r7
 8005978:	4622      	mov	r2, r4
 800597a:	4631      	mov	r1, r6
 800597c:	bf28      	it	cs
 800597e:	463a      	movcs	r2, r7
 8005980:	f7ff ff84 	bl	800588c <memcpy>
 8005984:	4631      	mov	r1, r6
 8005986:	4640      	mov	r0, r8
 8005988:	f7ff f8d4 	bl	8004b34 <_free_r>
 800598c:	e7e1      	b.n	8005952 <_realloc_r+0x1e>
 800598e:	4635      	mov	r5, r6
 8005990:	e7df      	b.n	8005952 <_realloc_r+0x1e>

08005992 <__ascii_wctomb>:
 8005992:	b149      	cbz	r1, 80059a8 <__ascii_wctomb+0x16>
 8005994:	2aff      	cmp	r2, #255	; 0xff
 8005996:	bf85      	ittet	hi
 8005998:	238a      	movhi	r3, #138	; 0x8a
 800599a:	6003      	strhi	r3, [r0, #0]
 800599c:	700a      	strbls	r2, [r1, #0]
 800599e:	f04f 30ff 	movhi.w	r0, #4294967295
 80059a2:	bf98      	it	ls
 80059a4:	2001      	movls	r0, #1
 80059a6:	4770      	bx	lr
 80059a8:	4608      	mov	r0, r1
 80059aa:	4770      	bx	lr

080059ac <fiprintf>:
 80059ac:	b40e      	push	{r1, r2, r3}
 80059ae:	b503      	push	{r0, r1, lr}
 80059b0:	4601      	mov	r1, r0
 80059b2:	ab03      	add	r3, sp, #12
 80059b4:	4805      	ldr	r0, [pc, #20]	; (80059cc <fiprintf+0x20>)
 80059b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80059ba:	6800      	ldr	r0, [r0, #0]
 80059bc:	9301      	str	r3, [sp, #4]
 80059be:	f000 f83f 	bl	8005a40 <_vfiprintf_r>
 80059c2:	b002      	add	sp, #8
 80059c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80059c8:	b003      	add	sp, #12
 80059ca:	4770      	bx	lr
 80059cc:	2000005c 	.word	0x2000005c

080059d0 <abort>:
 80059d0:	b508      	push	{r3, lr}
 80059d2:	2006      	movs	r0, #6
 80059d4:	f000 fa0c 	bl	8005df0 <raise>
 80059d8:	2001      	movs	r0, #1
 80059da:	f7fc fe5d 	bl	8002698 <_exit>

080059de <_malloc_usable_size_r>:
 80059de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059e2:	1f18      	subs	r0, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	bfbc      	itt	lt
 80059e8:	580b      	ldrlt	r3, [r1, r0]
 80059ea:	18c0      	addlt	r0, r0, r3
 80059ec:	4770      	bx	lr

080059ee <__sfputc_r>:
 80059ee:	6893      	ldr	r3, [r2, #8]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	b410      	push	{r4}
 80059f6:	6093      	str	r3, [r2, #8]
 80059f8:	da08      	bge.n	8005a0c <__sfputc_r+0x1e>
 80059fa:	6994      	ldr	r4, [r2, #24]
 80059fc:	42a3      	cmp	r3, r4
 80059fe:	db01      	blt.n	8005a04 <__sfputc_r+0x16>
 8005a00:	290a      	cmp	r1, #10
 8005a02:	d103      	bne.n	8005a0c <__sfputc_r+0x1e>
 8005a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a08:	f000 b934 	b.w	8005c74 <__swbuf_r>
 8005a0c:	6813      	ldr	r3, [r2, #0]
 8005a0e:	1c58      	adds	r0, r3, #1
 8005a10:	6010      	str	r0, [r2, #0]
 8005a12:	7019      	strb	r1, [r3, #0]
 8005a14:	4608      	mov	r0, r1
 8005a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <__sfputs_r>:
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1e:	4606      	mov	r6, r0
 8005a20:	460f      	mov	r7, r1
 8005a22:	4614      	mov	r4, r2
 8005a24:	18d5      	adds	r5, r2, r3
 8005a26:	42ac      	cmp	r4, r5
 8005a28:	d101      	bne.n	8005a2e <__sfputs_r+0x12>
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	e007      	b.n	8005a3e <__sfputs_r+0x22>
 8005a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a32:	463a      	mov	r2, r7
 8005a34:	4630      	mov	r0, r6
 8005a36:	f7ff ffda 	bl	80059ee <__sfputc_r>
 8005a3a:	1c43      	adds	r3, r0, #1
 8005a3c:	d1f3      	bne.n	8005a26 <__sfputs_r+0xa>
 8005a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a40 <_vfiprintf_r>:
 8005a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a44:	460d      	mov	r5, r1
 8005a46:	b09d      	sub	sp, #116	; 0x74
 8005a48:	4614      	mov	r4, r2
 8005a4a:	4698      	mov	r8, r3
 8005a4c:	4606      	mov	r6, r0
 8005a4e:	b118      	cbz	r0, 8005a58 <_vfiprintf_r+0x18>
 8005a50:	6a03      	ldr	r3, [r0, #32]
 8005a52:	b90b      	cbnz	r3, 8005a58 <_vfiprintf_r+0x18>
 8005a54:	f7fe f8da 	bl	8003c0c <__sinit>
 8005a58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a5a:	07d9      	lsls	r1, r3, #31
 8005a5c:	d405      	bmi.n	8005a6a <_vfiprintf_r+0x2a>
 8005a5e:	89ab      	ldrh	r3, [r5, #12]
 8005a60:	059a      	lsls	r2, r3, #22
 8005a62:	d402      	bmi.n	8005a6a <_vfiprintf_r+0x2a>
 8005a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a66:	f7fe f9e8 	bl	8003e3a <__retarget_lock_acquire_recursive>
 8005a6a:	89ab      	ldrh	r3, [r5, #12]
 8005a6c:	071b      	lsls	r3, r3, #28
 8005a6e:	d501      	bpl.n	8005a74 <_vfiprintf_r+0x34>
 8005a70:	692b      	ldr	r3, [r5, #16]
 8005a72:	b99b      	cbnz	r3, 8005a9c <_vfiprintf_r+0x5c>
 8005a74:	4629      	mov	r1, r5
 8005a76:	4630      	mov	r0, r6
 8005a78:	f000 f93a 	bl	8005cf0 <__swsetup_r>
 8005a7c:	b170      	cbz	r0, 8005a9c <_vfiprintf_r+0x5c>
 8005a7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a80:	07dc      	lsls	r4, r3, #31
 8005a82:	d504      	bpl.n	8005a8e <_vfiprintf_r+0x4e>
 8005a84:	f04f 30ff 	mov.w	r0, #4294967295
 8005a88:	b01d      	add	sp, #116	; 0x74
 8005a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8e:	89ab      	ldrh	r3, [r5, #12]
 8005a90:	0598      	lsls	r0, r3, #22
 8005a92:	d4f7      	bmi.n	8005a84 <_vfiprintf_r+0x44>
 8005a94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a96:	f7fe f9d1 	bl	8003e3c <__retarget_lock_release_recursive>
 8005a9a:	e7f3      	b.n	8005a84 <_vfiprintf_r+0x44>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa0:	2320      	movs	r3, #32
 8005aa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005aa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aaa:	2330      	movs	r3, #48	; 0x30
 8005aac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005c60 <_vfiprintf_r+0x220>
 8005ab0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ab4:	f04f 0901 	mov.w	r9, #1
 8005ab8:	4623      	mov	r3, r4
 8005aba:	469a      	mov	sl, r3
 8005abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ac0:	b10a      	cbz	r2, 8005ac6 <_vfiprintf_r+0x86>
 8005ac2:	2a25      	cmp	r2, #37	; 0x25
 8005ac4:	d1f9      	bne.n	8005aba <_vfiprintf_r+0x7a>
 8005ac6:	ebba 0b04 	subs.w	fp, sl, r4
 8005aca:	d00b      	beq.n	8005ae4 <_vfiprintf_r+0xa4>
 8005acc:	465b      	mov	r3, fp
 8005ace:	4622      	mov	r2, r4
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	f7ff ffa2 	bl	8005a1c <__sfputs_r>
 8005ad8:	3001      	adds	r0, #1
 8005ada:	f000 80a9 	beq.w	8005c30 <_vfiprintf_r+0x1f0>
 8005ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ae0:	445a      	add	r2, fp
 8005ae2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 80a1 	beq.w	8005c30 <_vfiprintf_r+0x1f0>
 8005aee:	2300      	movs	r3, #0
 8005af0:	f04f 32ff 	mov.w	r2, #4294967295
 8005af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005af8:	f10a 0a01 	add.w	sl, sl, #1
 8005afc:	9304      	str	r3, [sp, #16]
 8005afe:	9307      	str	r3, [sp, #28]
 8005b00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b04:	931a      	str	r3, [sp, #104]	; 0x68
 8005b06:	4654      	mov	r4, sl
 8005b08:	2205      	movs	r2, #5
 8005b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b0e:	4854      	ldr	r0, [pc, #336]	; (8005c60 <_vfiprintf_r+0x220>)
 8005b10:	f7fa fb5e 	bl	80001d0 <memchr>
 8005b14:	9a04      	ldr	r2, [sp, #16]
 8005b16:	b9d8      	cbnz	r0, 8005b50 <_vfiprintf_r+0x110>
 8005b18:	06d1      	lsls	r1, r2, #27
 8005b1a:	bf44      	itt	mi
 8005b1c:	2320      	movmi	r3, #32
 8005b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b22:	0713      	lsls	r3, r2, #28
 8005b24:	bf44      	itt	mi
 8005b26:	232b      	movmi	r3, #43	; 0x2b
 8005b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b30:	2b2a      	cmp	r3, #42	; 0x2a
 8005b32:	d015      	beq.n	8005b60 <_vfiprintf_r+0x120>
 8005b34:	9a07      	ldr	r2, [sp, #28]
 8005b36:	4654      	mov	r4, sl
 8005b38:	2000      	movs	r0, #0
 8005b3a:	f04f 0c0a 	mov.w	ip, #10
 8005b3e:	4621      	mov	r1, r4
 8005b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b44:	3b30      	subs	r3, #48	; 0x30
 8005b46:	2b09      	cmp	r3, #9
 8005b48:	d94d      	bls.n	8005be6 <_vfiprintf_r+0x1a6>
 8005b4a:	b1b0      	cbz	r0, 8005b7a <_vfiprintf_r+0x13a>
 8005b4c:	9207      	str	r2, [sp, #28]
 8005b4e:	e014      	b.n	8005b7a <_vfiprintf_r+0x13a>
 8005b50:	eba0 0308 	sub.w	r3, r0, r8
 8005b54:	fa09 f303 	lsl.w	r3, r9, r3
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	9304      	str	r3, [sp, #16]
 8005b5c:	46a2      	mov	sl, r4
 8005b5e:	e7d2      	b.n	8005b06 <_vfiprintf_r+0xc6>
 8005b60:	9b03      	ldr	r3, [sp, #12]
 8005b62:	1d19      	adds	r1, r3, #4
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	9103      	str	r1, [sp, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	bfbb      	ittet	lt
 8005b6c:	425b      	neglt	r3, r3
 8005b6e:	f042 0202 	orrlt.w	r2, r2, #2
 8005b72:	9307      	strge	r3, [sp, #28]
 8005b74:	9307      	strlt	r3, [sp, #28]
 8005b76:	bfb8      	it	lt
 8005b78:	9204      	strlt	r2, [sp, #16]
 8005b7a:	7823      	ldrb	r3, [r4, #0]
 8005b7c:	2b2e      	cmp	r3, #46	; 0x2e
 8005b7e:	d10c      	bne.n	8005b9a <_vfiprintf_r+0x15a>
 8005b80:	7863      	ldrb	r3, [r4, #1]
 8005b82:	2b2a      	cmp	r3, #42	; 0x2a
 8005b84:	d134      	bne.n	8005bf0 <_vfiprintf_r+0x1b0>
 8005b86:	9b03      	ldr	r3, [sp, #12]
 8005b88:	1d1a      	adds	r2, r3, #4
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	9203      	str	r2, [sp, #12]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	bfb8      	it	lt
 8005b92:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b96:	3402      	adds	r4, #2
 8005b98:	9305      	str	r3, [sp, #20]
 8005b9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005c70 <_vfiprintf_r+0x230>
 8005b9e:	7821      	ldrb	r1, [r4, #0]
 8005ba0:	2203      	movs	r2, #3
 8005ba2:	4650      	mov	r0, sl
 8005ba4:	f7fa fb14 	bl	80001d0 <memchr>
 8005ba8:	b138      	cbz	r0, 8005bba <_vfiprintf_r+0x17a>
 8005baa:	9b04      	ldr	r3, [sp, #16]
 8005bac:	eba0 000a 	sub.w	r0, r0, sl
 8005bb0:	2240      	movs	r2, #64	; 0x40
 8005bb2:	4082      	lsls	r2, r0
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	3401      	adds	r4, #1
 8005bb8:	9304      	str	r3, [sp, #16]
 8005bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bbe:	4829      	ldr	r0, [pc, #164]	; (8005c64 <_vfiprintf_r+0x224>)
 8005bc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bc4:	2206      	movs	r2, #6
 8005bc6:	f7fa fb03 	bl	80001d0 <memchr>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	d03f      	beq.n	8005c4e <_vfiprintf_r+0x20e>
 8005bce:	4b26      	ldr	r3, [pc, #152]	; (8005c68 <_vfiprintf_r+0x228>)
 8005bd0:	bb1b      	cbnz	r3, 8005c1a <_vfiprintf_r+0x1da>
 8005bd2:	9b03      	ldr	r3, [sp, #12]
 8005bd4:	3307      	adds	r3, #7
 8005bd6:	f023 0307 	bic.w	r3, r3, #7
 8005bda:	3308      	adds	r3, #8
 8005bdc:	9303      	str	r3, [sp, #12]
 8005bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be0:	443b      	add	r3, r7
 8005be2:	9309      	str	r3, [sp, #36]	; 0x24
 8005be4:	e768      	b.n	8005ab8 <_vfiprintf_r+0x78>
 8005be6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bea:	460c      	mov	r4, r1
 8005bec:	2001      	movs	r0, #1
 8005bee:	e7a6      	b.n	8005b3e <_vfiprintf_r+0xfe>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	3401      	adds	r4, #1
 8005bf4:	9305      	str	r3, [sp, #20]
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	f04f 0c0a 	mov.w	ip, #10
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c02:	3a30      	subs	r2, #48	; 0x30
 8005c04:	2a09      	cmp	r2, #9
 8005c06:	d903      	bls.n	8005c10 <_vfiprintf_r+0x1d0>
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0c6      	beq.n	8005b9a <_vfiprintf_r+0x15a>
 8005c0c:	9105      	str	r1, [sp, #20]
 8005c0e:	e7c4      	b.n	8005b9a <_vfiprintf_r+0x15a>
 8005c10:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c14:	4604      	mov	r4, r0
 8005c16:	2301      	movs	r3, #1
 8005c18:	e7f0      	b.n	8005bfc <_vfiprintf_r+0x1bc>
 8005c1a:	ab03      	add	r3, sp, #12
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	462a      	mov	r2, r5
 8005c20:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <_vfiprintf_r+0x22c>)
 8005c22:	a904      	add	r1, sp, #16
 8005c24:	4630      	mov	r0, r6
 8005c26:	f7fd fb9f 	bl	8003368 <_printf_float>
 8005c2a:	4607      	mov	r7, r0
 8005c2c:	1c78      	adds	r0, r7, #1
 8005c2e:	d1d6      	bne.n	8005bde <_vfiprintf_r+0x19e>
 8005c30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c32:	07d9      	lsls	r1, r3, #31
 8005c34:	d405      	bmi.n	8005c42 <_vfiprintf_r+0x202>
 8005c36:	89ab      	ldrh	r3, [r5, #12]
 8005c38:	059a      	lsls	r2, r3, #22
 8005c3a:	d402      	bmi.n	8005c42 <_vfiprintf_r+0x202>
 8005c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c3e:	f7fe f8fd 	bl	8003e3c <__retarget_lock_release_recursive>
 8005c42:	89ab      	ldrh	r3, [r5, #12]
 8005c44:	065b      	lsls	r3, r3, #25
 8005c46:	f53f af1d 	bmi.w	8005a84 <_vfiprintf_r+0x44>
 8005c4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c4c:	e71c      	b.n	8005a88 <_vfiprintf_r+0x48>
 8005c4e:	ab03      	add	r3, sp, #12
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	462a      	mov	r2, r5
 8005c54:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <_vfiprintf_r+0x22c>)
 8005c56:	a904      	add	r1, sp, #16
 8005c58:	4630      	mov	r0, r6
 8005c5a:	f7fd fe29 	bl	80038b0 <_printf_i>
 8005c5e:	e7e4      	b.n	8005c2a <_vfiprintf_r+0x1ea>
 8005c60:	08006604 	.word	0x08006604
 8005c64:	0800660e 	.word	0x0800660e
 8005c68:	08003369 	.word	0x08003369
 8005c6c:	08005a1d 	.word	0x08005a1d
 8005c70:	0800660a 	.word	0x0800660a

08005c74 <__swbuf_r>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	460e      	mov	r6, r1
 8005c78:	4614      	mov	r4, r2
 8005c7a:	4605      	mov	r5, r0
 8005c7c:	b118      	cbz	r0, 8005c86 <__swbuf_r+0x12>
 8005c7e:	6a03      	ldr	r3, [r0, #32]
 8005c80:	b90b      	cbnz	r3, 8005c86 <__swbuf_r+0x12>
 8005c82:	f7fd ffc3 	bl	8003c0c <__sinit>
 8005c86:	69a3      	ldr	r3, [r4, #24]
 8005c88:	60a3      	str	r3, [r4, #8]
 8005c8a:	89a3      	ldrh	r3, [r4, #12]
 8005c8c:	071a      	lsls	r2, r3, #28
 8005c8e:	d525      	bpl.n	8005cdc <__swbuf_r+0x68>
 8005c90:	6923      	ldr	r3, [r4, #16]
 8005c92:	b31b      	cbz	r3, 8005cdc <__swbuf_r+0x68>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	6922      	ldr	r2, [r4, #16]
 8005c98:	1a98      	subs	r0, r3, r2
 8005c9a:	6963      	ldr	r3, [r4, #20]
 8005c9c:	b2f6      	uxtb	r6, r6
 8005c9e:	4283      	cmp	r3, r0
 8005ca0:	4637      	mov	r7, r6
 8005ca2:	dc04      	bgt.n	8005cae <__swbuf_r+0x3a>
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f7ff fd9e 	bl	80057e8 <_fflush_r>
 8005cac:	b9e0      	cbnz	r0, 8005ce8 <__swbuf_r+0x74>
 8005cae:	68a3      	ldr	r3, [r4, #8]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	60a3      	str	r3, [r4, #8]
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	6022      	str	r2, [r4, #0]
 8005cba:	701e      	strb	r6, [r3, #0]
 8005cbc:	6962      	ldr	r2, [r4, #20]
 8005cbe:	1c43      	adds	r3, r0, #1
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d004      	beq.n	8005cce <__swbuf_r+0x5a>
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	07db      	lsls	r3, r3, #31
 8005cc8:	d506      	bpl.n	8005cd8 <__swbuf_r+0x64>
 8005cca:	2e0a      	cmp	r6, #10
 8005ccc:	d104      	bne.n	8005cd8 <__swbuf_r+0x64>
 8005cce:	4621      	mov	r1, r4
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	f7ff fd89 	bl	80057e8 <_fflush_r>
 8005cd6:	b938      	cbnz	r0, 8005ce8 <__swbuf_r+0x74>
 8005cd8:	4638      	mov	r0, r7
 8005cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cdc:	4621      	mov	r1, r4
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f000 f806 	bl	8005cf0 <__swsetup_r>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d0d5      	beq.n	8005c94 <__swbuf_r+0x20>
 8005ce8:	f04f 37ff 	mov.w	r7, #4294967295
 8005cec:	e7f4      	b.n	8005cd8 <__swbuf_r+0x64>
	...

08005cf0 <__swsetup_r>:
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	4b2a      	ldr	r3, [pc, #168]	; (8005d9c <__swsetup_r+0xac>)
 8005cf4:	4605      	mov	r5, r0
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	460c      	mov	r4, r1
 8005cfa:	b118      	cbz	r0, 8005d04 <__swsetup_r+0x14>
 8005cfc:	6a03      	ldr	r3, [r0, #32]
 8005cfe:	b90b      	cbnz	r3, 8005d04 <__swsetup_r+0x14>
 8005d00:	f7fd ff84 	bl	8003c0c <__sinit>
 8005d04:	89a3      	ldrh	r3, [r4, #12]
 8005d06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d0a:	0718      	lsls	r0, r3, #28
 8005d0c:	d422      	bmi.n	8005d54 <__swsetup_r+0x64>
 8005d0e:	06d9      	lsls	r1, r3, #27
 8005d10:	d407      	bmi.n	8005d22 <__swsetup_r+0x32>
 8005d12:	2309      	movs	r3, #9
 8005d14:	602b      	str	r3, [r5, #0]
 8005d16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d1a:	81a3      	strh	r3, [r4, #12]
 8005d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d20:	e034      	b.n	8005d8c <__swsetup_r+0x9c>
 8005d22:	0758      	lsls	r0, r3, #29
 8005d24:	d512      	bpl.n	8005d4c <__swsetup_r+0x5c>
 8005d26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d28:	b141      	cbz	r1, 8005d3c <__swsetup_r+0x4c>
 8005d2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d2e:	4299      	cmp	r1, r3
 8005d30:	d002      	beq.n	8005d38 <__swsetup_r+0x48>
 8005d32:	4628      	mov	r0, r5
 8005d34:	f7fe fefe 	bl	8004b34 <_free_r>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	6363      	str	r3, [r4, #52]	; 0x34
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d42:	81a3      	strh	r3, [r4, #12]
 8005d44:	2300      	movs	r3, #0
 8005d46:	6063      	str	r3, [r4, #4]
 8005d48:	6923      	ldr	r3, [r4, #16]
 8005d4a:	6023      	str	r3, [r4, #0]
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	f043 0308 	orr.w	r3, r3, #8
 8005d52:	81a3      	strh	r3, [r4, #12]
 8005d54:	6923      	ldr	r3, [r4, #16]
 8005d56:	b94b      	cbnz	r3, 8005d6c <__swsetup_r+0x7c>
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d62:	d003      	beq.n	8005d6c <__swsetup_r+0x7c>
 8005d64:	4621      	mov	r1, r4
 8005d66:	4628      	mov	r0, r5
 8005d68:	f000 f884 	bl	8005e74 <__smakebuf_r>
 8005d6c:	89a0      	ldrh	r0, [r4, #12]
 8005d6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d72:	f010 0301 	ands.w	r3, r0, #1
 8005d76:	d00a      	beq.n	8005d8e <__swsetup_r+0x9e>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60a3      	str	r3, [r4, #8]
 8005d7c:	6963      	ldr	r3, [r4, #20]
 8005d7e:	425b      	negs	r3, r3
 8005d80:	61a3      	str	r3, [r4, #24]
 8005d82:	6923      	ldr	r3, [r4, #16]
 8005d84:	b943      	cbnz	r3, 8005d98 <__swsetup_r+0xa8>
 8005d86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d8a:	d1c4      	bne.n	8005d16 <__swsetup_r+0x26>
 8005d8c:	bd38      	pop	{r3, r4, r5, pc}
 8005d8e:	0781      	lsls	r1, r0, #30
 8005d90:	bf58      	it	pl
 8005d92:	6963      	ldrpl	r3, [r4, #20]
 8005d94:	60a3      	str	r3, [r4, #8]
 8005d96:	e7f4      	b.n	8005d82 <__swsetup_r+0x92>
 8005d98:	2000      	movs	r0, #0
 8005d9a:	e7f7      	b.n	8005d8c <__swsetup_r+0x9c>
 8005d9c:	2000005c 	.word	0x2000005c

08005da0 <_raise_r>:
 8005da0:	291f      	cmp	r1, #31
 8005da2:	b538      	push	{r3, r4, r5, lr}
 8005da4:	4604      	mov	r4, r0
 8005da6:	460d      	mov	r5, r1
 8005da8:	d904      	bls.n	8005db4 <_raise_r+0x14>
 8005daa:	2316      	movs	r3, #22
 8005dac:	6003      	str	r3, [r0, #0]
 8005dae:	f04f 30ff 	mov.w	r0, #4294967295
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005db6:	b112      	cbz	r2, 8005dbe <_raise_r+0x1e>
 8005db8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005dbc:	b94b      	cbnz	r3, 8005dd2 <_raise_r+0x32>
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f000 f830 	bl	8005e24 <_getpid_r>
 8005dc4:	462a      	mov	r2, r5
 8005dc6:	4601      	mov	r1, r0
 8005dc8:	4620      	mov	r0, r4
 8005dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dce:	f000 b817 	b.w	8005e00 <_kill_r>
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d00a      	beq.n	8005dec <_raise_r+0x4c>
 8005dd6:	1c59      	adds	r1, r3, #1
 8005dd8:	d103      	bne.n	8005de2 <_raise_r+0x42>
 8005dda:	2316      	movs	r3, #22
 8005ddc:	6003      	str	r3, [r0, #0]
 8005dde:	2001      	movs	r0, #1
 8005de0:	e7e7      	b.n	8005db2 <_raise_r+0x12>
 8005de2:	2400      	movs	r4, #0
 8005de4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005de8:	4628      	mov	r0, r5
 8005dea:	4798      	blx	r3
 8005dec:	2000      	movs	r0, #0
 8005dee:	e7e0      	b.n	8005db2 <_raise_r+0x12>

08005df0 <raise>:
 8005df0:	4b02      	ldr	r3, [pc, #8]	; (8005dfc <raise+0xc>)
 8005df2:	4601      	mov	r1, r0
 8005df4:	6818      	ldr	r0, [r3, #0]
 8005df6:	f7ff bfd3 	b.w	8005da0 <_raise_r>
 8005dfa:	bf00      	nop
 8005dfc:	2000005c 	.word	0x2000005c

08005e00 <_kill_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4d07      	ldr	r5, [pc, #28]	; (8005e20 <_kill_r+0x20>)
 8005e04:	2300      	movs	r3, #0
 8005e06:	4604      	mov	r4, r0
 8005e08:	4608      	mov	r0, r1
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	602b      	str	r3, [r5, #0]
 8005e0e:	f7fc fc33 	bl	8002678 <_kill>
 8005e12:	1c43      	adds	r3, r0, #1
 8005e14:	d102      	bne.n	8005e1c <_kill_r+0x1c>
 8005e16:	682b      	ldr	r3, [r5, #0]
 8005e18:	b103      	cbz	r3, 8005e1c <_kill_r+0x1c>
 8005e1a:	6023      	str	r3, [r4, #0]
 8005e1c:	bd38      	pop	{r3, r4, r5, pc}
 8005e1e:	bf00      	nop
 8005e20:	200005ac 	.word	0x200005ac

08005e24 <_getpid_r>:
 8005e24:	f7fc bc20 	b.w	8002668 <_getpid>

08005e28 <__swhatbuf_r>:
 8005e28:	b570      	push	{r4, r5, r6, lr}
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e30:	2900      	cmp	r1, #0
 8005e32:	b096      	sub	sp, #88	; 0x58
 8005e34:	4615      	mov	r5, r2
 8005e36:	461e      	mov	r6, r3
 8005e38:	da0d      	bge.n	8005e56 <__swhatbuf_r+0x2e>
 8005e3a:	89a3      	ldrh	r3, [r4, #12]
 8005e3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e40:	f04f 0100 	mov.w	r1, #0
 8005e44:	bf0c      	ite	eq
 8005e46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005e4a:	2340      	movne	r3, #64	; 0x40
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	6031      	str	r1, [r6, #0]
 8005e50:	602b      	str	r3, [r5, #0]
 8005e52:	b016      	add	sp, #88	; 0x58
 8005e54:	bd70      	pop	{r4, r5, r6, pc}
 8005e56:	466a      	mov	r2, sp
 8005e58:	f000 f848 	bl	8005eec <_fstat_r>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	dbec      	blt.n	8005e3a <__swhatbuf_r+0x12>
 8005e60:	9901      	ldr	r1, [sp, #4]
 8005e62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005e66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005e6a:	4259      	negs	r1, r3
 8005e6c:	4159      	adcs	r1, r3
 8005e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e72:	e7eb      	b.n	8005e4c <__swhatbuf_r+0x24>

08005e74 <__smakebuf_r>:
 8005e74:	898b      	ldrh	r3, [r1, #12]
 8005e76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e78:	079d      	lsls	r5, r3, #30
 8005e7a:	4606      	mov	r6, r0
 8005e7c:	460c      	mov	r4, r1
 8005e7e:	d507      	bpl.n	8005e90 <__smakebuf_r+0x1c>
 8005e80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e84:	6023      	str	r3, [r4, #0]
 8005e86:	6123      	str	r3, [r4, #16]
 8005e88:	2301      	movs	r3, #1
 8005e8a:	6163      	str	r3, [r4, #20]
 8005e8c:	b002      	add	sp, #8
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}
 8005e90:	ab01      	add	r3, sp, #4
 8005e92:	466a      	mov	r2, sp
 8005e94:	f7ff ffc8 	bl	8005e28 <__swhatbuf_r>
 8005e98:	9900      	ldr	r1, [sp, #0]
 8005e9a:	4605      	mov	r5, r0
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	f7fe febd 	bl	8004c1c <_malloc_r>
 8005ea2:	b948      	cbnz	r0, 8005eb8 <__smakebuf_r+0x44>
 8005ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ea8:	059a      	lsls	r2, r3, #22
 8005eaa:	d4ef      	bmi.n	8005e8c <__smakebuf_r+0x18>
 8005eac:	f023 0303 	bic.w	r3, r3, #3
 8005eb0:	f043 0302 	orr.w	r3, r3, #2
 8005eb4:	81a3      	strh	r3, [r4, #12]
 8005eb6:	e7e3      	b.n	8005e80 <__smakebuf_r+0xc>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	6020      	str	r0, [r4, #0]
 8005ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec0:	81a3      	strh	r3, [r4, #12]
 8005ec2:	9b00      	ldr	r3, [sp, #0]
 8005ec4:	6163      	str	r3, [r4, #20]
 8005ec6:	9b01      	ldr	r3, [sp, #4]
 8005ec8:	6120      	str	r0, [r4, #16]
 8005eca:	b15b      	cbz	r3, 8005ee4 <__smakebuf_r+0x70>
 8005ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	f000 f81d 	bl	8005f10 <_isatty_r>
 8005ed6:	b128      	cbz	r0, 8005ee4 <__smakebuf_r+0x70>
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	f023 0303 	bic.w	r3, r3, #3
 8005ede:	f043 0301 	orr.w	r3, r3, #1
 8005ee2:	81a3      	strh	r3, [r4, #12]
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	431d      	orrs	r5, r3
 8005ee8:	81a5      	strh	r5, [r4, #12]
 8005eea:	e7cf      	b.n	8005e8c <__smakebuf_r+0x18>

08005eec <_fstat_r>:
 8005eec:	b538      	push	{r3, r4, r5, lr}
 8005eee:	4d07      	ldr	r5, [pc, #28]	; (8005f0c <_fstat_r+0x20>)
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	4608      	mov	r0, r1
 8005ef6:	4611      	mov	r1, r2
 8005ef8:	602b      	str	r3, [r5, #0]
 8005efa:	f7fc fc1c 	bl	8002736 <_fstat>
 8005efe:	1c43      	adds	r3, r0, #1
 8005f00:	d102      	bne.n	8005f08 <_fstat_r+0x1c>
 8005f02:	682b      	ldr	r3, [r5, #0]
 8005f04:	b103      	cbz	r3, 8005f08 <_fstat_r+0x1c>
 8005f06:	6023      	str	r3, [r4, #0]
 8005f08:	bd38      	pop	{r3, r4, r5, pc}
 8005f0a:	bf00      	nop
 8005f0c:	200005ac 	.word	0x200005ac

08005f10 <_isatty_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	4d06      	ldr	r5, [pc, #24]	; (8005f2c <_isatty_r+0x1c>)
 8005f14:	2300      	movs	r3, #0
 8005f16:	4604      	mov	r4, r0
 8005f18:	4608      	mov	r0, r1
 8005f1a:	602b      	str	r3, [r5, #0]
 8005f1c:	f7fc fc1b 	bl	8002756 <_isatty>
 8005f20:	1c43      	adds	r3, r0, #1
 8005f22:	d102      	bne.n	8005f2a <_isatty_r+0x1a>
 8005f24:	682b      	ldr	r3, [r5, #0]
 8005f26:	b103      	cbz	r3, 8005f2a <_isatty_r+0x1a>
 8005f28:	6023      	str	r3, [r4, #0]
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}
 8005f2c:	200005ac 	.word	0x200005ac

08005f30 <log>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	ed2d 8b02 	vpush	{d8}
 8005f36:	ec55 4b10 	vmov	r4, r5, d0
 8005f3a:	f000 f841 	bl	8005fc0 <__ieee754_log>
 8005f3e:	4622      	mov	r2, r4
 8005f40:	462b      	mov	r3, r5
 8005f42:	4620      	mov	r0, r4
 8005f44:	4629      	mov	r1, r5
 8005f46:	eeb0 8a40 	vmov.f32	s16, s0
 8005f4a:	eef0 8a60 	vmov.f32	s17, s1
 8005f4e:	f7fa fded 	bl	8000b2c <__aeabi_dcmpun>
 8005f52:	b998      	cbnz	r0, 8005f7c <log+0x4c>
 8005f54:	2200      	movs	r2, #0
 8005f56:	2300      	movs	r3, #0
 8005f58:	4620      	mov	r0, r4
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	f7fa fddc 	bl	8000b18 <__aeabi_dcmpgt>
 8005f60:	b960      	cbnz	r0, 8005f7c <log+0x4c>
 8005f62:	2200      	movs	r2, #0
 8005f64:	2300      	movs	r3, #0
 8005f66:	4620      	mov	r0, r4
 8005f68:	4629      	mov	r1, r5
 8005f6a:	f7fa fdad 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f6e:	b160      	cbz	r0, 8005f8a <log+0x5a>
 8005f70:	f7fd ff38 	bl	8003de4 <__errno>
 8005f74:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8005fa0 <log+0x70>
 8005f78:	2322      	movs	r3, #34	; 0x22
 8005f7a:	6003      	str	r3, [r0, #0]
 8005f7c:	eeb0 0a48 	vmov.f32	s0, s16
 8005f80:	eef0 0a68 	vmov.f32	s1, s17
 8005f84:	ecbd 8b02 	vpop	{d8}
 8005f88:	bd38      	pop	{r3, r4, r5, pc}
 8005f8a:	f7fd ff2b 	bl	8003de4 <__errno>
 8005f8e:	ecbd 8b02 	vpop	{d8}
 8005f92:	2321      	movs	r3, #33	; 0x21
 8005f94:	6003      	str	r3, [r0, #0]
 8005f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f9a:	4803      	ldr	r0, [pc, #12]	; (8005fa8 <log+0x78>)
 8005f9c:	f000 b808 	b.w	8005fb0 <nan>
 8005fa0:	00000000 	.word	0x00000000
 8005fa4:	fff00000 	.word	0xfff00000
 8005fa8:	0800665a 	.word	0x0800665a
 8005fac:	00000000 	.word	0x00000000

08005fb0 <nan>:
 8005fb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005fb8 <nan+0x8>
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	00000000 	.word	0x00000000
 8005fbc:	7ff80000 	.word	0x7ff80000

08005fc0 <__ieee754_log>:
 8005fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc4:	ec51 0b10 	vmov	r0, r1, d0
 8005fc8:	ed2d 8b04 	vpush	{d8-d9}
 8005fcc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005fd0:	b083      	sub	sp, #12
 8005fd2:	460d      	mov	r5, r1
 8005fd4:	da29      	bge.n	800602a <__ieee754_log+0x6a>
 8005fd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005fda:	4303      	orrs	r3, r0
 8005fdc:	ee10 2a10 	vmov	r2, s0
 8005fe0:	d10c      	bne.n	8005ffc <__ieee754_log+0x3c>
 8005fe2:	49cf      	ldr	r1, [pc, #828]	; (8006320 <__ieee754_log+0x360>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	2000      	movs	r0, #0
 8005fea:	f7fa fc2f 	bl	800084c <__aeabi_ddiv>
 8005fee:	ec41 0b10 	vmov	d0, r0, r1
 8005ff2:	b003      	add	sp, #12
 8005ff4:	ecbd 8b04 	vpop	{d8-d9}
 8005ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffc:	2900      	cmp	r1, #0
 8005ffe:	da05      	bge.n	800600c <__ieee754_log+0x4c>
 8006000:	460b      	mov	r3, r1
 8006002:	f7fa f941 	bl	8000288 <__aeabi_dsub>
 8006006:	2200      	movs	r2, #0
 8006008:	2300      	movs	r3, #0
 800600a:	e7ee      	b.n	8005fea <__ieee754_log+0x2a>
 800600c:	4bc5      	ldr	r3, [pc, #788]	; (8006324 <__ieee754_log+0x364>)
 800600e:	2200      	movs	r2, #0
 8006010:	f7fa faf2 	bl	80005f8 <__aeabi_dmul>
 8006014:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8006018:	460d      	mov	r5, r1
 800601a:	4ac3      	ldr	r2, [pc, #780]	; (8006328 <__ieee754_log+0x368>)
 800601c:	4295      	cmp	r5, r2
 800601e:	dd06      	ble.n	800602e <__ieee754_log+0x6e>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	f7fa f932 	bl	800028c <__adddf3>
 8006028:	e7e1      	b.n	8005fee <__ieee754_log+0x2e>
 800602a:	2300      	movs	r3, #0
 800602c:	e7f5      	b.n	800601a <__ieee754_log+0x5a>
 800602e:	152c      	asrs	r4, r5, #20
 8006030:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006034:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006038:	441c      	add	r4, r3
 800603a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800603e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8006042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006046:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800604a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800604e:	ea42 0105 	orr.w	r1, r2, r5
 8006052:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8006056:	2200      	movs	r2, #0
 8006058:	4bb4      	ldr	r3, [pc, #720]	; (800632c <__ieee754_log+0x36c>)
 800605a:	f7fa f915 	bl	8000288 <__aeabi_dsub>
 800605e:	1cab      	adds	r3, r5, #2
 8006060:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006064:	2b02      	cmp	r3, #2
 8006066:	4682      	mov	sl, r0
 8006068:	468b      	mov	fp, r1
 800606a:	f04f 0200 	mov.w	r2, #0
 800606e:	dc53      	bgt.n	8006118 <__ieee754_log+0x158>
 8006070:	2300      	movs	r3, #0
 8006072:	f7fa fd29 	bl	8000ac8 <__aeabi_dcmpeq>
 8006076:	b1d0      	cbz	r0, 80060ae <__ieee754_log+0xee>
 8006078:	2c00      	cmp	r4, #0
 800607a:	f000 8122 	beq.w	80062c2 <__ieee754_log+0x302>
 800607e:	4620      	mov	r0, r4
 8006080:	f7fa fa50 	bl	8000524 <__aeabi_i2d>
 8006084:	a390      	add	r3, pc, #576	; (adr r3, 80062c8 <__ieee754_log+0x308>)
 8006086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608a:	4606      	mov	r6, r0
 800608c:	460f      	mov	r7, r1
 800608e:	f7fa fab3 	bl	80005f8 <__aeabi_dmul>
 8006092:	a38f      	add	r3, pc, #572	; (adr r3, 80062d0 <__ieee754_log+0x310>)
 8006094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006098:	4604      	mov	r4, r0
 800609a:	460d      	mov	r5, r1
 800609c:	4630      	mov	r0, r6
 800609e:	4639      	mov	r1, r7
 80060a0:	f7fa faaa 	bl	80005f8 <__aeabi_dmul>
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4620      	mov	r0, r4
 80060aa:	4629      	mov	r1, r5
 80060ac:	e7ba      	b.n	8006024 <__ieee754_log+0x64>
 80060ae:	a38a      	add	r3, pc, #552	; (adr r3, 80062d8 <__ieee754_log+0x318>)
 80060b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b4:	4650      	mov	r0, sl
 80060b6:	4659      	mov	r1, fp
 80060b8:	f7fa fa9e 	bl	80005f8 <__aeabi_dmul>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	2000      	movs	r0, #0
 80060c2:	499b      	ldr	r1, [pc, #620]	; (8006330 <__ieee754_log+0x370>)
 80060c4:	f7fa f8e0 	bl	8000288 <__aeabi_dsub>
 80060c8:	4652      	mov	r2, sl
 80060ca:	4606      	mov	r6, r0
 80060cc:	460f      	mov	r7, r1
 80060ce:	465b      	mov	r3, fp
 80060d0:	4650      	mov	r0, sl
 80060d2:	4659      	mov	r1, fp
 80060d4:	f7fa fa90 	bl	80005f8 <__aeabi_dmul>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	4630      	mov	r0, r6
 80060de:	4639      	mov	r1, r7
 80060e0:	f7fa fa8a 	bl	80005f8 <__aeabi_dmul>
 80060e4:	4606      	mov	r6, r0
 80060e6:	460f      	mov	r7, r1
 80060e8:	b914      	cbnz	r4, 80060f0 <__ieee754_log+0x130>
 80060ea:	4632      	mov	r2, r6
 80060ec:	463b      	mov	r3, r7
 80060ee:	e0a2      	b.n	8006236 <__ieee754_log+0x276>
 80060f0:	4620      	mov	r0, r4
 80060f2:	f7fa fa17 	bl	8000524 <__aeabi_i2d>
 80060f6:	a374      	add	r3, pc, #464	; (adr r3, 80062c8 <__ieee754_log+0x308>)
 80060f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fc:	4680      	mov	r8, r0
 80060fe:	4689      	mov	r9, r1
 8006100:	f7fa fa7a 	bl	80005f8 <__aeabi_dmul>
 8006104:	a372      	add	r3, pc, #456	; (adr r3, 80062d0 <__ieee754_log+0x310>)
 8006106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610a:	4604      	mov	r4, r0
 800610c:	460d      	mov	r5, r1
 800610e:	4640      	mov	r0, r8
 8006110:	4649      	mov	r1, r9
 8006112:	f7fa fa71 	bl	80005f8 <__aeabi_dmul>
 8006116:	e0a7      	b.n	8006268 <__ieee754_log+0x2a8>
 8006118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800611c:	f7fa f8b6 	bl	800028c <__adddf3>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	4650      	mov	r0, sl
 8006126:	4659      	mov	r1, fp
 8006128:	f7fa fb90 	bl	800084c <__aeabi_ddiv>
 800612c:	ec41 0b18 	vmov	d8, r0, r1
 8006130:	4620      	mov	r0, r4
 8006132:	f7fa f9f7 	bl	8000524 <__aeabi_i2d>
 8006136:	ec53 2b18 	vmov	r2, r3, d8
 800613a:	ec41 0b19 	vmov	d9, r0, r1
 800613e:	ec51 0b18 	vmov	r0, r1, d8
 8006142:	f7fa fa59 	bl	80005f8 <__aeabi_dmul>
 8006146:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800614a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800614e:	9301      	str	r3, [sp, #4]
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	4680      	mov	r8, r0
 8006156:	4689      	mov	r9, r1
 8006158:	f7fa fa4e 	bl	80005f8 <__aeabi_dmul>
 800615c:	a360      	add	r3, pc, #384	; (adr r3, 80062e0 <__ieee754_log+0x320>)
 800615e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006162:	4606      	mov	r6, r0
 8006164:	460f      	mov	r7, r1
 8006166:	f7fa fa47 	bl	80005f8 <__aeabi_dmul>
 800616a:	a35f      	add	r3, pc, #380	; (adr r3, 80062e8 <__ieee754_log+0x328>)
 800616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006170:	f7fa f88c 	bl	800028c <__adddf3>
 8006174:	4632      	mov	r2, r6
 8006176:	463b      	mov	r3, r7
 8006178:	f7fa fa3e 	bl	80005f8 <__aeabi_dmul>
 800617c:	a35c      	add	r3, pc, #368	; (adr r3, 80062f0 <__ieee754_log+0x330>)
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	f7fa f883 	bl	800028c <__adddf3>
 8006186:	4632      	mov	r2, r6
 8006188:	463b      	mov	r3, r7
 800618a:	f7fa fa35 	bl	80005f8 <__aeabi_dmul>
 800618e:	a35a      	add	r3, pc, #360	; (adr r3, 80062f8 <__ieee754_log+0x338>)
 8006190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006194:	f7fa f87a 	bl	800028c <__adddf3>
 8006198:	4642      	mov	r2, r8
 800619a:	464b      	mov	r3, r9
 800619c:	f7fa fa2c 	bl	80005f8 <__aeabi_dmul>
 80061a0:	a357      	add	r3, pc, #348	; (adr r3, 8006300 <__ieee754_log+0x340>)
 80061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a6:	4680      	mov	r8, r0
 80061a8:	4689      	mov	r9, r1
 80061aa:	4630      	mov	r0, r6
 80061ac:	4639      	mov	r1, r7
 80061ae:	f7fa fa23 	bl	80005f8 <__aeabi_dmul>
 80061b2:	a355      	add	r3, pc, #340	; (adr r3, 8006308 <__ieee754_log+0x348>)
 80061b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b8:	f7fa f868 	bl	800028c <__adddf3>
 80061bc:	4632      	mov	r2, r6
 80061be:	463b      	mov	r3, r7
 80061c0:	f7fa fa1a 	bl	80005f8 <__aeabi_dmul>
 80061c4:	a352      	add	r3, pc, #328	; (adr r3, 8006310 <__ieee754_log+0x350>)
 80061c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ca:	f7fa f85f 	bl	800028c <__adddf3>
 80061ce:	4632      	mov	r2, r6
 80061d0:	463b      	mov	r3, r7
 80061d2:	f7fa fa11 	bl	80005f8 <__aeabi_dmul>
 80061d6:	460b      	mov	r3, r1
 80061d8:	4602      	mov	r2, r0
 80061da:	4649      	mov	r1, r9
 80061dc:	4640      	mov	r0, r8
 80061de:	f7fa f855 	bl	800028c <__adddf3>
 80061e2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80061e6:	9b01      	ldr	r3, [sp, #4]
 80061e8:	3551      	adds	r5, #81	; 0x51
 80061ea:	431d      	orrs	r5, r3
 80061ec:	2d00      	cmp	r5, #0
 80061ee:	4680      	mov	r8, r0
 80061f0:	4689      	mov	r9, r1
 80061f2:	dd48      	ble.n	8006286 <__ieee754_log+0x2c6>
 80061f4:	4b4e      	ldr	r3, [pc, #312]	; (8006330 <__ieee754_log+0x370>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	4650      	mov	r0, sl
 80061fa:	4659      	mov	r1, fp
 80061fc:	f7fa f9fc 	bl	80005f8 <__aeabi_dmul>
 8006200:	4652      	mov	r2, sl
 8006202:	465b      	mov	r3, fp
 8006204:	f7fa f9f8 	bl	80005f8 <__aeabi_dmul>
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	4606      	mov	r6, r0
 800620e:	460f      	mov	r7, r1
 8006210:	4640      	mov	r0, r8
 8006212:	4649      	mov	r1, r9
 8006214:	f7fa f83a 	bl	800028c <__adddf3>
 8006218:	ec53 2b18 	vmov	r2, r3, d8
 800621c:	f7fa f9ec 	bl	80005f8 <__aeabi_dmul>
 8006220:	4680      	mov	r8, r0
 8006222:	4689      	mov	r9, r1
 8006224:	b964      	cbnz	r4, 8006240 <__ieee754_log+0x280>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4630      	mov	r0, r6
 800622c:	4639      	mov	r1, r7
 800622e:	f7fa f82b 	bl	8000288 <__aeabi_dsub>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	4650      	mov	r0, sl
 8006238:	4659      	mov	r1, fp
 800623a:	f7fa f825 	bl	8000288 <__aeabi_dsub>
 800623e:	e6d6      	b.n	8005fee <__ieee754_log+0x2e>
 8006240:	a321      	add	r3, pc, #132	; (adr r3, 80062c8 <__ieee754_log+0x308>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	ec51 0b19 	vmov	r0, r1, d9
 800624a:	f7fa f9d5 	bl	80005f8 <__aeabi_dmul>
 800624e:	a320      	add	r3, pc, #128	; (adr r3, 80062d0 <__ieee754_log+0x310>)
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	4604      	mov	r4, r0
 8006256:	460d      	mov	r5, r1
 8006258:	ec51 0b19 	vmov	r0, r1, d9
 800625c:	f7fa f9cc 	bl	80005f8 <__aeabi_dmul>
 8006260:	4642      	mov	r2, r8
 8006262:	464b      	mov	r3, r9
 8006264:	f7fa f812 	bl	800028c <__adddf3>
 8006268:	4602      	mov	r2, r0
 800626a:	460b      	mov	r3, r1
 800626c:	4630      	mov	r0, r6
 800626e:	4639      	mov	r1, r7
 8006270:	f7fa f80a 	bl	8000288 <__aeabi_dsub>
 8006274:	4652      	mov	r2, sl
 8006276:	465b      	mov	r3, fp
 8006278:	f7fa f806 	bl	8000288 <__aeabi_dsub>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4620      	mov	r0, r4
 8006282:	4629      	mov	r1, r5
 8006284:	e7d9      	b.n	800623a <__ieee754_log+0x27a>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	4650      	mov	r0, sl
 800628c:	4659      	mov	r1, fp
 800628e:	f7f9 fffb 	bl	8000288 <__aeabi_dsub>
 8006292:	ec53 2b18 	vmov	r2, r3, d8
 8006296:	f7fa f9af 	bl	80005f8 <__aeabi_dmul>
 800629a:	4606      	mov	r6, r0
 800629c:	460f      	mov	r7, r1
 800629e:	2c00      	cmp	r4, #0
 80062a0:	f43f af23 	beq.w	80060ea <__ieee754_log+0x12a>
 80062a4:	a308      	add	r3, pc, #32	; (adr r3, 80062c8 <__ieee754_log+0x308>)
 80062a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062aa:	ec51 0b19 	vmov	r0, r1, d9
 80062ae:	f7fa f9a3 	bl	80005f8 <__aeabi_dmul>
 80062b2:	a307      	add	r3, pc, #28	; (adr r3, 80062d0 <__ieee754_log+0x310>)
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	4604      	mov	r4, r0
 80062ba:	460d      	mov	r5, r1
 80062bc:	ec51 0b19 	vmov	r0, r1, d9
 80062c0:	e727      	b.n	8006112 <__ieee754_log+0x152>
 80062c2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8006318 <__ieee754_log+0x358>
 80062c6:	e694      	b.n	8005ff2 <__ieee754_log+0x32>
 80062c8:	fee00000 	.word	0xfee00000
 80062cc:	3fe62e42 	.word	0x3fe62e42
 80062d0:	35793c76 	.word	0x35793c76
 80062d4:	3dea39ef 	.word	0x3dea39ef
 80062d8:	55555555 	.word	0x55555555
 80062dc:	3fd55555 	.word	0x3fd55555
 80062e0:	df3e5244 	.word	0xdf3e5244
 80062e4:	3fc2f112 	.word	0x3fc2f112
 80062e8:	96cb03de 	.word	0x96cb03de
 80062ec:	3fc74664 	.word	0x3fc74664
 80062f0:	94229359 	.word	0x94229359
 80062f4:	3fd24924 	.word	0x3fd24924
 80062f8:	55555593 	.word	0x55555593
 80062fc:	3fe55555 	.word	0x3fe55555
 8006300:	d078c69f 	.word	0xd078c69f
 8006304:	3fc39a09 	.word	0x3fc39a09
 8006308:	1d8e78af 	.word	0x1d8e78af
 800630c:	3fcc71c5 	.word	0x3fcc71c5
 8006310:	9997fa04 	.word	0x9997fa04
 8006314:	3fd99999 	.word	0x3fd99999
	...
 8006320:	c3500000 	.word	0xc3500000
 8006324:	43500000 	.word	0x43500000
 8006328:	7fefffff 	.word	0x7fefffff
 800632c:	3ff00000 	.word	0x3ff00000
 8006330:	3fe00000 	.word	0x3fe00000

08006334 <_init>:
 8006334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006336:	bf00      	nop
 8006338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800633a:	bc08      	pop	{r3}
 800633c:	469e      	mov	lr, r3
 800633e:	4770      	bx	lr

08006340 <_fini>:
 8006340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006342:	bf00      	nop
 8006344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006346:	bc08      	pop	{r3}
 8006348:	469e      	mov	lr, r3
 800634a:	4770      	bx	lr
